{
  "address": "0xD0760Cc67F609a491AE38A134e37fa38D5221626",
  "abi": [
    {
      "inputs": [],
      "name": "InitializerContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsNotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "InitializerVersionAlreadyInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Contributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8dd6998904c526d7dd485819b20ff785d93ea50be64f17a82c251596dd050091",
  "receipt": {
    "to": null,
    "from": "0x8465B78e3308bCDE4b72ab9B3CD1a51bEc954f01",
    "contractAddress": "0xD0760Cc67F609a491AE38A134e37fa38D5221626",
    "transactionIndex": 12,
    "gasUsed": "1669807",
    "logsBloom": "0x
    "blockHash": "0xa51a01761a010af8e59d76563f12b941757067d88372bfa2b454720773ef4135",
    "transactionHash": "0x8dd6998904c526d7dd485819b20ff785d93ea50be64f17a82c251596dd050091",
    "logs": [],
    "blockNumber": 25899310,
    "cumulativeGasUsed": "2330434",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d976b6cc178fcec65f1c3398ff618248",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InitializerContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsNotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"InitializerVersionAlreadyInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"blacklist(address,string)\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"blacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"isBlacklisted(address)\":{\"details\":\"Returns `true` if `account` is blacklisted.\"},\"isBlacklisted(address[])\":{\"details\":\"Returns `true` if any address in `accounts` is on the blacklist.\"},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"unblacklist(address,string)\":{\"details\":\"External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}\"},\"unblacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/positive-impact/PositiveImpact.sol\":\"PositiveImpact\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin AccessControlEnumerable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControl\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControlEnumerable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\\n */\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Storage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.access.LibAccessControl\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _storage().roles[role].members[account] ||\\n            _storage().roles[getRoleAdmin(role)].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * @notice This function is identical to {checkRole} but is following the naming convention.\\n     */\\n    function enforceRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return _storage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _storage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _storage().roles[role].members[account] = true;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].add(account);\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _storage().roles[role].members[account] = false;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].remove(account);\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return _storage().roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return _storage().roleMembers[role].length();\\n    }\\n}\\n\",\"keccak256\":\"0x4ed5e921ffcea325dd43880c20ad89149bf959132eb32a137efd94dc645d51bf\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library with a set of default roles to use across different other contracts.\\n */\\nlibrary LibRoles {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant BLACKLIST_MANAGER_ROLE =\\n        keccak256(\\\"BLACKLIST_MANAGER_ROLE\\\");\\n    bytes32 public constant PAUSE_MANAGER_ROLE =\\n        keccak256(\\\"PAUSE_MANAGER_ROLE\\\");\\n    bytes32 public constant STABLE_PRICE_MANAGER_ROLE =\\n        keccak256(\\\"STABLE_PRICE_MANAGER_ROLE\\\");\\n    bytes32 public constant TESTER_ROLE = keccak256(\\\"TESTER_ROLE\\\");\\n    bytes32 public constant TOKEN_TAXES_MANAGER =\\n        keccak256(\\\"TOKEN_TAXES_MANAGER\\\");\\n    bytes32 public constant TOKEN_REFLECTION_MANAGER =\\n        keccak256(\\\"TOKEN_REFLECTION_MANAGER\\\");\\n}\\n\",\"keccak256\":\"0x216d4885ce42ca57b0ee30117078d724af39c4aaf8d114c1253ccf29a3e5a6ef\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/ISimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/*\\n * @dev External interface of a simple blacklist.\\n */\\ninterface ISimpleBlacklist {\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Check if `account` is on the blacklist.\\n     */\\n    function isBlacklisted(address account) external view returns (bool);\\n\\n    /*\\n     * @dev Check if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        returns (bool);\\n\\n    /*\\n     * @dev Adds `account` to the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {Blacklisted} event, if `account` was added to the blacklist.\\n     */\\n    function blacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Adds `accounts` to the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {Blacklisted} events, for each account that was added to the blacklist\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n\\n    /*\\n     * @dev Removes `account` from the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {UnBlacklisted} event, if `account` was removed from the blacklist\\n     */\\n    function unblacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Removes multiple `accounts` from the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {UnBlacklisted} events, for each account that was removed from the blacklist\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n}\\n\",\"keccak256\":\"0xa8e74fdac0740629f464bfc2f7a6a54ee804e5ab98b0fe35e4d36c27889913a0\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/LibSimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibSimpleBlacklist {\\n    struct Storage {\\n        mapping(address => bool) accounts;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.blacklist.LibSimpleBlacklist\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is blacklisted.\\n     */\\n    function enforceNotBlacklisted() internal view {\\n        checkBlacklisted(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     */\\n    function enforceNotBlacklisted(address account) internal view {\\n        checkBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account) internal view returns (bool) {\\n        return _storage().accounts[account];\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            if (isBlacklisted(accounts[index])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^SimpleBlacklist: account (0x[0-9a-f]{40}) is blacklisted$/\\n     */\\n    function checkBlacklisted(address account) internal view {\\n        if (isBlacklisted(account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"SimpleBlacklist: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is blacklisted\\\"\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds `account` to the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function blacklist(address account, string memory reason) internal {\\n        if (!isBlacklisted(account)) {\\n            _storage().accounts[account] = true;\\n            emit Blacklisted(account, reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes `account` from the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function unblacklist(address account, string memory reason) internal {\\n        if (isBlacklisted(account)) {\\n            _storage().accounts[account] = false;\\n            emit UnBlacklisted(account, reason);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc32cb035e0ff42973d8637b736f3c51eacbfac1db557b1dae3cd583194d4015c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibSimpleBlacklist} from \\\"./LibSimpleBlacklist.sol\\\";\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Contract module that exposes athe interface for a simple blacklist.\\n */\\ncontract SimpleBlacklistFacet is ISimpleBlacklist {\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.blacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.blacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.blacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev External function to remove `account` from the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-unblacklist}\\n     *\\n     */\\n    function unblacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.unblacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.unblacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.unblacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(accounts);\\n    }\\n}\\n\",\"keccak256\":\"0x0c9ef37a0a0c9024300f286d379229e9805d7ae01feea1eba6f06249d0a0ad54\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Simple interface for pausable contracts.\\n */\\ninterface IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x957a95f5c424cda473f53fcec5fe3f01cd5a650bb11e2281c0314fa3fe8c2dc6\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin Pausable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n */\\nlibrary LibPausable {\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.pausable.LibPausable\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused() internal view {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused(address address1, address address2)\\n        internal\\n        view\\n    {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address1) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address2),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when not paused.\\n     */\\n    function enforcePaused() internal view {\\n        require(\\n            paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: not paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() internal view returns (bool) {\\n        return _storage().paused;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function pause() internal {\\n        _storage().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function unpause() internal {\\n        _storage().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3c0dca0212cf1994b4005ace39c6a29bb2e258f12d5845eca9cb3608f90b8a1c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IPausable} from \\\"./IPausable.sol\\\";\\nimport {LibPausable} from \\\"./LibPausable.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\ncontract PausableFacet is IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool) {\\n        return LibPausable.paused();\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforceNotPaused();\\n\\n        LibPausable.pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforcePaused();\\n\\n        LibPausable.unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x3d7ad0ce3f15bcd9d9b30580037448ac57eebfd4f60303da4e348fe2811a12df\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/IInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IInitializer {\\n    error InitializerContractIsInitializing();\\n    error InitializerContractIsNotInitializing();\\n    error InitializerContractAlreadyInitialized();\\n    error InitializerVersionAlreadyInitialized(uint8 version);\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n}\\n\",\"keccak256\":\"0x08e2f2250d1a61bf4cfb07b788cdf0f1e838c068c72f5bb6acc9a20b5acab88c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\nimport {LibInitializer} from \\\"./LibInitializer.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Initializer is IInitializer {\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !LibInitializer.isInitializing();\\n\\n        if (\\n            (isTopLevelCall && !LibInitializer.isInitialized(1)) ||\\n            (!Address.isContract(address(this)) &&\\n                LibInitializer.getInitializedVersion() == 1)\\n        ) {\\n            LibInitializer.setInitialized(1);\\n\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(true);\\n            }\\n            _;\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(false);\\n                emit Initialized(1);\\n            }\\n        } else {\\n            revert InitializerContractAlreadyInitialized();\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        if (\\n            LibInitializer.isInitializing() ||\\n            LibInitializer.isInitialized(version)\\n        ) {\\n            revert InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        LibInitializer.setInitialized(version);\\n        LibInitializer.setInitializing(true);\\n        _;\\n        LibInitializer.setInitializing(false);\\n        emit Initialized(version);\\n    }\\n}\\n\",\"keccak256\":\"0x58e2c1e9b0297362c5f08b5a8dbc3b0851744def47e14438dfe377dfcedd4ed8\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/LibInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\n\\nlibrary LibInitializer {\\n    struct Storage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint8 initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool initializing;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.utils.initializer.LibInitializer\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    function enforceIsInitializing() internal view {\\n        if (!isInitializing()) {\\n            revert IInitializer.InitializerContractIsNotInitializing();\\n        }\\n    }\\n\\n    function isInitializing() internal view returns (bool) {\\n        return _storage().initializing;\\n    }\\n\\n    function setInitializing(bool value) internal {\\n        _storage().initializing = value;\\n    }\\n\\n    function isInitialized() internal view returns (bool) {\\n        return isInitialized(1);\\n    }\\n\\n    function isInitialized(uint8 version) internal view returns (bool) {\\n        return _storage().initialized >= version;\\n    }\\n\\n    function getInitializedVersion() internal view returns (uint8) {\\n        return _storage().initialized;\\n    }\\n\\n    function setInitialized(uint8 version) internal {\\n        if (isInitialized(version)) {\\n            revert IInitializer.InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        _storage().initialized = version;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function disable() internal {\\n        if (isInitializing()) {\\n            revert IInitializer.InitializerContractIsInitializing();\\n        }\\n\\n        if (!isInitialized(type(uint8).max)) {\\n            setInitialized(type(uint8).max);\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd626fbde2606a1d7a0f8a188eaab3e8d8e3056075f11511b03e6ea3f24f972\",\"license\":\"MIT\"},\"contracts/positive-impact/PositiveImpact.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {Initializer} from \\\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\\\";\\nimport {PausableFacet, LibPausable} from \\\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\\\";\\nimport {SimpleBlacklistFacet, LibSimpleBlacklist} from \\\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PositiveImpact is Initializer, PausableFacet, SimpleBlacklistFacet {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n    address public treasury;\\n\\n    event Contributed(address account, uint256 amount);\\n\\n    function contribute(uint256 amount) external {\\n        require(amount > 0, \\\"Amount is 0\\\");\\n\\n        token.safeTransferFrom(msg.sender, treasury, amount);\\n\\n        emit Contributed(msg.sender, amount);\\n    }\\n\\n    function initialize(IERC20 token_, address treasury_) external initializer {\\n        token = token_;\\n        treasury = treasury_;\\n    }\\n}\\n\",\"keccak256\":\"0x7b1e2abee34f47a0ff58b2347e9e5c26c1062eefc16b71bffe60cfe8e0cbedb9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d65806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638456cb591161008c578063d1e6c30c11610066578063d1e6c30c146101b7578063ddf579ff146101ca578063fc0c546a146101dd578063fe575a87146101fd57600080fd5b80638456cb5914610189578063c1cbbca714610191578063ce5da407146101a457600080fd5b80635c975abb116100bd5780635c975abb1461011457806361d027b3146101315780636ebb16d31461017657600080fd5b8063186d3830146100e45780633f4ba83a146100f9578063485cc95514610101575b600080fd5b6100f76100f23660046117fd565b610210565b005b6100f76103e2565b6100f761010f36600461189b565b61041d565b61011c610609565b60405190151581526020015b60405180910390f35b6001546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610128565b61011c610184366004611903565b610618565b6100f7610629565b6100f761019f3660046119e6565b610662565b6100f76101b23660046117fd565b610734565b6100f76101c53660046119ff565b6108f3565b6100f76101d83660046119ff565b61095c565b6000546101519073ffffffffffffffffffffffffffffffffffffffff1681565b61011c61020b366004611a84565b6109c5565b6102397ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b801561037e578281146102d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b83811015610378576103668585838181106102f3576102f3611aa1565b90506020020160208101906103089190611a84565b84848481811061031a5761031a611aa1565b905060200281019061032c9190611ad0565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1f92505050565b8061037081611b64565b9150506102d6565b506103dc565b60005b838110156103da576103c885858381811061039e5761039e611aa1565b90506020020160208101906103b39190611a84565b60405180602001604052806000815250610a1f565b806103d281611b64565b915050610381565b505b50505050565b61040b7f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26610a12565b610413610b31565b61041b610bcf565b565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354610100900460ff161580801561047b57507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600160ff909116105b8061049a5750303b15801561049a5750610493610c4c565b60ff166001145b156105d7576104a96001610c79565b80156104fb577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6000805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600180549285169290911691909117905580156105d2577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6040517f5d99ebd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610613610d31565b905090565b600061062382610d59565b92915050565b6106527f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26610a12565b61065a610df6565b61041b610e95565b600081116106cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f416d6f756e74206973203000000000000000000000000000000000000000000060448201526064016102ca565b6001546000546106f89173ffffffffffffffffffffffffffffffffffffffff9182169133911684610f0f565b60408051338152602081018390527f62722348256371b5147820d6cad90c40fd2da1ccee18c3ed52c0bca5a61dbbab910160405180910390a150565b61075d7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b8015610897578281146107f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084016102ca565b60005b838110156103785761088585858381811061081257610812611aa1565b90506020020160208101906108279190611a84565b84848481811061083957610839611aa1565b905060200281019061084b9190611ad0565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fa492505050565b8061088f81611b64565b9150506107f5565b60005b838110156103da576108e18585838181106108b7576108b7611aa1565b90506020020160208101906108cc9190611a84565b60405180602001604052806000815250610fa4565b806108eb81611b64565b91505061089a565b61091c7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b6105d28383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1f92505050565b6109857ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b6105d28383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fa492505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff16610623565b610a1c81336110b7565b50565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1615610b2d5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551610ae4908290611bc0565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35b5050565b610b39610d31565b80610b695750610b697fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33611160565b61041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102ca565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60007f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35b5460ff16919050565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610610cde576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff821660048201526024016102ca565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b60007fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea7610c70565b6000805b8251811015610ded57610dcd838281518110610d7b57610d7b611aa1565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b15610ddb5750600192915050565b80610de581611b64565b915050610d5d565b50600092915050565b610dfe610d31565b1580610e2f5750610e2f7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33611160565b61041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016102ca565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610c42565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526103dc908590611253565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16610b2d5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555161106b908290611bc0565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b6110c18282611160565b610b2d576110e68173ffffffffffffffffffffffffffffffffffffffff16601461135f565b6110f183602061135f565b604051602001611102929190611bdc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526102ca91600401611c5d565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff168061124c57507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260006112148560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff165b9392505050565b60006112b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115a29092919063ffffffff16565b8051909150156105d257808060200190518101906112d39190611cae565b6105d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ca565b6060600061136e836002611cd0565b611379906002611ce7565b67ffffffffffffffff811115611391576113916118d4565b6040519080825280601f01601f1916602001820160405280156113bb576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106113f2576113f2611aa1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061145557611455611aa1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611491846002611cd0565b61149c906001611ce7565b90505b6001811115611539577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106114dd576114dd611aa1565b1a60f81b8282815181106114f3576114f3611aa1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361153281611cfa565b905061149f565b50831561124c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102ca565b60606115b184846000856115b9565b949350505050565b60608247101561164b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ca565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116749190611bc0565b60006040518083038185875af1925050503d80600081146116b1576040519150601f19603f3d011682016040523d82523d6000602084013e6116b6565b606091505b50915091506116c7878383876116d2565b979650505050505050565b606083156117685782516000036117615773ffffffffffffffffffffffffffffffffffffffff85163b611761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ca565b50816115b1565b6115b1838381511561177d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca9190611c5d565b60008083601f8401126117c357600080fd5b50813567ffffffffffffffff8111156117db57600080fd5b6020830191508360208260051b85010111156117f657600080fd5b9250929050565b6000806000806040858703121561181357600080fd5b843567ffffffffffffffff8082111561182b57600080fd5b611837888389016117b1565b9096509450602087013591508082111561185057600080fd5b5061185d878288016117b1565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a1c57600080fd5b803561189681611869565b919050565b600080604083850312156118ae57600080fd5b82356118b981611869565b915060208301356118c981611869565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561191657600080fd5b823567ffffffffffffffff8082111561192e57600080fd5b818501915085601f83011261194257600080fd5b813581811115611954576119546118d4565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715611997576119976118d4565b6040529182528482019250838101850191888311156119b557600080fd5b938501935b828510156119da576119cb8561188b565b845293850193928501926119ba565b98975050505050505050565b6000602082840312156119f857600080fd5b5035919050565b600080600060408486031215611a1457600080fd5b8335611a1f81611869565b9250602084013567ffffffffffffffff80821115611a3c57600080fd5b818601915086601f830112611a5057600080fd5b813581811115611a5f57600080fd5b876020828501011115611a7157600080fd5b6020830194508093505050509250925092565b600060208284031215611a9657600080fd5b813561124c81611869565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b0557600080fd5b83018035915067ffffffffffffffff821115611b2057600080fd5b6020019150368190038213156117f657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b9557611b95611b35565b5060010190565b60005b83811015611bb7578181015183820152602001611b9f565b50506000910152565b60008251611bd2818460208701611b9c565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c14816017850160208801611b9c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611c51816028840160208801611b9c565b01602801949350505050565b6020815260008251806020840152611c7c816040850160208701611b9c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215611cc057600080fd5b8151801515811461124c57600080fd5b808202811582820484141761062357610623611b35565b8082018082111561062357610623611b35565b600081611d0957611d09611b35565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122095c441717a1f7fc15866f78e51ecc2a1297d20c586add784125f15f57439c9bf64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638456cb591161008c578063d1e6c30c11610066578063d1e6c30c146101b7578063ddf579ff146101ca578063fc0c546a146101dd578063fe575a87146101fd57600080fd5b80638456cb5914610189578063c1cbbca714610191578063ce5da407146101a457600080fd5b80635c975abb116100bd5780635c975abb1461011457806361d027b3146101315780636ebb16d31461017657600080fd5b8063186d3830146100e45780633f4ba83a146100f9578063485cc95514610101575b600080fd5b6100f76100f23660046117fd565b610210565b005b6100f76103e2565b6100f761010f36600461189b565b61041d565b61011c610609565b60405190151581526020015b60405180910390f35b6001546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610128565b61011c610184366004611903565b610618565b6100f7610629565b6100f761019f3660046119e6565b610662565b6100f76101b23660046117fd565b610734565b6100f76101c53660046119ff565b6108f3565b6100f76101d83660046119ff565b61095c565b6000546101519073ffffffffffffffffffffffffffffffffffffffff1681565b61011c61020b366004611a84565b6109c5565b6102397ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b801561037e578281146102d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b83811015610378576103668585838181106102f3576102f3611aa1565b90506020020160208101906103089190611a84565b84848481811061031a5761031a611aa1565b905060200281019061032c9190611ad0565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1f92505050565b8061037081611b64565b9150506102d6565b506103dc565b60005b838110156103da576103c885858381811061039e5761039e611aa1565b90506020020160208101906103b39190611a84565b60405180602001604052806000815250610a1f565b806103d281611b64565b915050610381565b505b50505050565b61040b7f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26610a12565b610413610b31565b61041b610bcf565b565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354610100900460ff161580801561047b57507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600160ff909116105b8061049a5750303b15801561049a5750610493610c4c565b60ff166001145b156105d7576104a96001610c79565b80156104fb577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6000805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600180549285169290911691909117905580156105d2577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6040517f5d99ebd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610613610d31565b905090565b600061062382610d59565b92915050565b6106527f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26610a12565b61065a610df6565b61041b610e95565b600081116106cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f416d6f756e74206973203000000000000000000000000000000000000000000060448201526064016102ca565b6001546000546106f89173ffffffffffffffffffffffffffffffffffffffff9182169133911684610f0f565b60408051338152602081018390527f62722348256371b5147820d6cad90c40fd2da1ccee18c3ed52c0bca5a61dbbab910160405180910390a150565b61075d7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b8015610897578281146107f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084016102ca565b60005b838110156103785761088585858381811061081257610812611aa1565b90506020020160208101906108279190611a84565b84848481811061083957610839611aa1565b905060200281019061084b9190611ad0565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fa492505050565b8061088f81611b64565b9150506107f5565b60005b838110156103da576108e18585838181106108b7576108b7611aa1565b90506020020160208101906108cc9190611a84565b60405180602001604052806000815250610fa4565b806108eb81611b64565b91505061089a565b61091c7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b6105d28383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1f92505050565b6109857ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee610a12565b6105d28383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fa492505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff16610623565b610a1c81336110b7565b50565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1615610b2d5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551610ae4908290611bc0565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35b5050565b610b39610d31565b80610b695750610b697fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33611160565b61041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102ca565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60007f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35b5460ff16919050565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610610cde576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff821660048201526024016102ca565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b60007fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea7610c70565b6000805b8251811015610ded57610dcd838281518110610d7b57610d7b611aa1565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b15610ddb5750600192915050565b80610de581611b64565b915050610d5d565b50600092915050565b610dfe610d31565b1580610e2f5750610e2f7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33611160565b61041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016102ca565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610c42565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526103dc908590611253565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16610b2d5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555161106b908290611bc0565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b6110c18282611160565b610b2d576110e68173ffffffffffffffffffffffffffffffffffffffff16601461135f565b6110f183602061135f565b604051602001611102929190611bdc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526102ca91600401611c5d565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff168061124c57507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260006112148560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff165b9392505050565b60006112b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115a29092919063ffffffff16565b8051909150156105d257808060200190518101906112d39190611cae565b6105d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ca565b6060600061136e836002611cd0565b611379906002611ce7565b67ffffffffffffffff811115611391576113916118d4565b6040519080825280601f01601f1916602001820160405280156113bb576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106113f2576113f2611aa1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061145557611455611aa1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611491846002611cd0565b61149c906001611ce7565b90505b6001811115611539577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106114dd576114dd611aa1565b1a60f81b8282815181106114f3576114f3611aa1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361153281611cfa565b905061149f565b50831561124c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102ca565b60606115b184846000856115b9565b949350505050565b60608247101561164b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ca565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116749190611bc0565b60006040518083038185875af1925050503d80600081146116b1576040519150601f19603f3d011682016040523d82523d6000602084013e6116b6565b606091505b50915091506116c7878383876116d2565b979650505050505050565b606083156117685782516000036117615773ffffffffffffffffffffffffffffffffffffffff85163b611761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ca565b50816115b1565b6115b1838381511561177d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca9190611c5d565b60008083601f8401126117c357600080fd5b50813567ffffffffffffffff8111156117db57600080fd5b6020830191508360208260051b85010111156117f657600080fd5b9250929050565b6000806000806040858703121561181357600080fd5b843567ffffffffffffffff8082111561182b57600080fd5b611837888389016117b1565b9096509450602087013591508082111561185057600080fd5b5061185d878288016117b1565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a1c57600080fd5b803561189681611869565b919050565b600080604083850312156118ae57600080fd5b82356118b981611869565b915060208301356118c981611869565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561191657600080fd5b823567ffffffffffffffff8082111561192e57600080fd5b818501915085601f83011261194257600080fd5b813581811115611954576119546118d4565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715611997576119976118d4565b6040529182528482019250838101850191888311156119b557600080fd5b938501935b828510156119da576119cb8561188b565b845293850193928501926119ba565b98975050505050505050565b6000602082840312156119f857600080fd5b5035919050565b600080600060408486031215611a1457600080fd5b8335611a1f81611869565b9250602084013567ffffffffffffffff80821115611a3c57600080fd5b818601915086601f830112611a5057600080fd5b813581811115611a5f57600080fd5b876020828501011115611a7157600080fd5b6020830194508093505050509250925092565b600060208284031215611a9657600080fd5b813561124c81611869565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b0557600080fd5b83018035915067ffffffffffffffff821115611b2057600080fd5b6020019150368190038213156117f657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b9557611b95611b35565b5060010190565b60005b83811015611bb7578181015183820152602001611b9f565b50506000910152565b60008251611bd2818460208701611b9c565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c14816017850160208801611b9c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611c51816028840160208801611b9c565b01602801949350505050565b6020815260008251806020840152611c7c816040850160208701611b9c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215611cc057600080fd5b8151801515811461124c57600080fd5b808202811582820484141761062357610623611b35565b8082018082111561062357610623611b35565b600081611d0957611d09611b35565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122095c441717a1f7fc15866f78e51ecc2a1297d20c586add784125f15f57439c9bf64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "blacklist(address,string)": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "blacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "isBlacklisted(address)": {
        "details": "Returns `true` if `account` is blacklisted."
      },
      "isBlacklisted(address[])": {
        "details": "Returns `true` if any address in `accounts` is on the blacklist."
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "unblacklist(address,string)": {
        "details": "External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}"
      },
      "unblacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6863,
        "contract": "contracts/positive-impact/PositiveImpact.sol:PositiveImpact",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)175"
      },
      {
        "astId": 6865,
        "contract": "contracts/positive-impact/PositiveImpact.sol:PositiveImpact",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)175": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}