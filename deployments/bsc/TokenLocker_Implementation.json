{
  "address": "0x581fC3Fc663cd025c41E76365a15a3b280c0FF1C",
  "abi": [
    {
      "inputs": [],
      "name": "ERC20ApproveFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20ApproveToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ERC20BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20BurnFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "ERC20DecreasedAllowanceBelowZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ERC20TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFromZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsNotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "InitializerVersionAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockNotExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedDuration",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "lockedAt",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "expiresAt",
          "type": "uint32"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "lockedAt",
          "type": "uint32"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_DEPOSIT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_DEPOSIT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockedAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expiresAt",
              "type": "uint32"
            }
          ],
          "internalType": "struct ITokenLocker.Lock",
          "name": "lock",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "durations",
          "type": "uint32[]"
        }
      ],
      "name": "getLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockedAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expiresAt",
              "type": "uint32"
            }
          ],
          "internalType": "struct ITokenLocker.Lock[]",
          "name": "locks",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockedAt",
              "type": "uint32"
            }
          ],
          "internalType": "struct ITokenLocker.UserInfo[]",
          "name": "userLockInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lockedAt",
              "type": "uint32"
            }
          ],
          "internalType": "struct ITokenLocker.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserInfoLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "migrationManagers",
          "type": "address[]"
        }
      ],
      "name": "reinitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lockedAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfoMigrated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa91fa5f8046d589dea53b2aadc8cd4101891c609b0ef4fb2b45680595a0726b8",
  "receipt": {
    "to": null,
    "from": "0x8465B78e3308bCDE4b72ab9B3CD1a51bEc954f01",
    "contractAddress": "0x581fC3Fc663cd025c41E76365a15a3b280c0FF1C",
    "transactionIndex": 92,
    "gasUsed": "4379705",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2475aa08d8bc46542abb8bc171ab0552e9f2a611ff8d58a7b8c25981dd113e22",
    "transactionHash": "0xa91fa5f8046d589dea53b2aadc8cd4101891c609b0ef4fb2b45680595a0726b8",
    "logs": [],
    "blockNumber": 25106076,
    "cumulativeGasUsed": "13818524",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f3b9fe82b8b6b04da344e71c2b803807",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC20ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20ApproveToZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ERC20BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"ERC20DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ERC20TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsNotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"InitializerVersionAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedDuration\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"getLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"internalType\":\"struct ITokenLocker.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"durations\",\"type\":\"uint32[]\"}],\"name\":\"getLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiresAt\",\"type\":\"uint32\"}],\"internalType\":\"struct ITokenLocker.Lock[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct ITokenLocker.UserInfo[]\",\"name\":\"userLockInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"}],\"internalType\":\"struct ITokenLocker.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfoLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"migrationManagers\",\"type\":\"address[]\"}],\"name\":\"reinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockedAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfoMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"blacklist(address,string)\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"blacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isBlacklisted(address)\":{\"details\":\"Returns `true` if `account` is blacklisted.\"},\"isBlacklisted(address[])\":{\"details\":\"Returns `true` if any address in `accounts` is on the blacklist.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setRoleAdmin(bytes32,bytes32)\":{\"details\":\"Sets `adminRole` as ``role``'s admin role. Emits a {RoleAdminChanged} event.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"unblacklist(address,string)\":{\"details\":\"External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}\"},\"unblacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256,uint256,uint32,uint32,uint32)\":{\"notice\":\"DEPRECATED\"}},\"kind\":\"user\",\"methods\":{\"getUserInfo(address)\":{\"notice\":\"DEPRECATED\"},\"getUserInfo(address,uint256)\":{\"notice\":\"DEPRECATED\"},\"getUserInfoLength(address)\":{\"notice\":\"DEPRECATED\"},\"token()\":{\"notice\":\"DEPRECATED\"},\"userInfo(address,uint256)\":{\"notice\":\"DEPRECATED\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token-locker/TokenLocker.sol\":\"TokenLocker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/AccessControlFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibAccessControl} from \\\"./LibAccessControl.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ncontract AccessControlFacet is IAccessControlEnumerable {\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibAccessControl.hasRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return LibAccessControl.getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external {\\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\\n\\n        LibAccessControl.setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\\n\\n        LibAccessControl.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\\n\\n        LibAccessControl.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        external\\n        virtual\\n        override\\n    {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            account == msg.sender,\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        LibAccessControl.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return LibAccessControl.getRoleMember(role, index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256) {\\n        return LibAccessControl.getRoleMemberCount(role);\\n    }\\n}\\n\",\"keccak256\":\"0x164bb42840caa7ac788128a403aec18d7b6d88694d6ac29dfe6e235c28769106\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin AccessControlEnumerable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControl\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControlEnumerable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\\n */\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Storage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.access.LibAccessControl\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _storage().roles[role].members[account] ||\\n            _storage().roles[getRoleAdmin(role)].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * @notice This function is identical to {checkRole} but is following the naming convention.\\n     */\\n    function enforceRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return _storage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _storage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _storage().roles[role].members[account] = true;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].add(account);\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _storage().roles[role].members[account] = false;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].remove(account);\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return _storage().roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return _storage().roleMembers[role].length();\\n    }\\n}\\n\",\"keccak256\":\"0x4ed5e921ffcea325dd43880c20ad89149bf959132eb32a137efd94dc645d51bf\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library with a set of default roles to use across different other contracts.\\n */\\nlibrary LibRoles {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant BLACKLIST_MANAGER_ROLE =\\n        keccak256(\\\"BLACKLIST_MANAGER_ROLE\\\");\\n    bytes32 public constant PAUSE_MANAGER_ROLE =\\n        keccak256(\\\"PAUSE_MANAGER_ROLE\\\");\\n    bytes32 public constant STABLE_PRICE_MANAGER_ROLE =\\n        keccak256(\\\"STABLE_PRICE_MANAGER_ROLE\\\");\\n    bytes32 public constant TESTER_ROLE = keccak256(\\\"TESTER_ROLE\\\");\\n    bytes32 public constant TOKEN_TAXES_MANAGER =\\n        keccak256(\\\"TOKEN_TAXES_MANAGER\\\");\\n    bytes32 public constant TOKEN_REFLECTION_MANAGER =\\n        keccak256(\\\"TOKEN_REFLECTION_MANAGER\\\");\\n}\\n\",\"keccak256\":\"0x216d4885ce42ca57b0ee30117078d724af39c4aaf8d114c1253ccf29a3e5a6ef\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/ISimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/*\\n * @dev External interface of a simple blacklist.\\n */\\ninterface ISimpleBlacklist {\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Check if `account` is on the blacklist.\\n     */\\n    function isBlacklisted(address account) external view returns (bool);\\n\\n    /*\\n     * @dev Check if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        returns (bool);\\n\\n    /*\\n     * @dev Adds `account` to the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {Blacklisted} event, if `account` was added to the blacklist.\\n     */\\n    function blacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Adds `accounts` to the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {Blacklisted} events, for each account that was added to the blacklist\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n\\n    /*\\n     * @dev Removes `account` from the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {UnBlacklisted} event, if `account` was removed from the blacklist\\n     */\\n    function unblacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Removes multiple `accounts` from the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {UnBlacklisted} events, for each account that was removed from the blacklist\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n}\\n\",\"keccak256\":\"0xa8e74fdac0740629f464bfc2f7a6a54ee804e5ab98b0fe35e4d36c27889913a0\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/LibSimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibSimpleBlacklist {\\n    struct Storage {\\n        mapping(address => bool) accounts;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.blacklist.LibSimpleBlacklist\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is blacklisted.\\n     */\\n    function enforceNotBlacklisted() internal view {\\n        checkBlacklisted(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     */\\n    function enforceNotBlacklisted(address account) internal view {\\n        checkBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account) internal view returns (bool) {\\n        return _storage().accounts[account];\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            if (isBlacklisted(accounts[index])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^SimpleBlacklist: account (0x[0-9a-f]{40}) is blacklisted$/\\n     */\\n    function checkBlacklisted(address account) internal view {\\n        if (isBlacklisted(account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"SimpleBlacklist: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is blacklisted\\\"\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds `account` to the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function blacklist(address account, string memory reason) internal {\\n        if (!isBlacklisted(account)) {\\n            _storage().accounts[account] = true;\\n            emit Blacklisted(account, reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes `account` from the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function unblacklist(address account, string memory reason) internal {\\n        if (isBlacklisted(account)) {\\n            _storage().accounts[account] = false;\\n            emit UnBlacklisted(account, reason);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc32cb035e0ff42973d8637b736f3c51eacbfac1db557b1dae3cd583194d4015c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibSimpleBlacklist} from \\\"./LibSimpleBlacklist.sol\\\";\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Contract module that exposes athe interface for a simple blacklist.\\n */\\ncontract SimpleBlacklistFacet is ISimpleBlacklist {\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.blacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.blacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.blacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev External function to remove `account` from the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-unblacklist}\\n     *\\n     */\\n    function unblacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.unblacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.unblacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.unblacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(accounts);\\n    }\\n}\\n\",\"keccak256\":\"0x0c9ef37a0a0c9024300f286d379229e9805d7ae01feea1eba6f06249d0a0ad54\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Simple interface for pausable contracts.\\n */\\ninterface IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x957a95f5c424cda473f53fcec5fe3f01cd5a650bb11e2281c0314fa3fe8c2dc6\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin Pausable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n */\\nlibrary LibPausable {\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.pausable.LibPausable\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused() internal view {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused(address address1, address address2)\\n        internal\\n        view\\n    {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address1) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address2),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when not paused.\\n     */\\n    function enforcePaused() internal view {\\n        require(\\n            paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: not paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() internal view returns (bool) {\\n        return _storage().paused;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function pause() internal {\\n        _storage().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function unpause() internal {\\n        _storage().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3c0dca0212cf1994b4005ace39c6a29bb2e258f12d5845eca9cb3608f90b8a1c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IPausable} from \\\"./IPausable.sol\\\";\\nimport {LibPausable} from \\\"./LibPausable.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\ncontract PausableFacet is IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool) {\\n        return LibPausable.paused();\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforceNotPaused();\\n\\n        LibPausable.pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforcePaused();\\n\\n        LibPausable.unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x3d7ad0ce3f15bcd9d9b30580037448ac57eebfd4f60303da4e348fe2811a12df\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/token/ERC20/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Errors} from \\\"./errors/IERC20Errors.sol\\\";\\n\\nlibrary LibERC20 {\\n    struct Storage {\\n        uint256 totalSupply;\\n        string name;\\n        string symbol;\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarlabs.modules.ERC20.LibERC20\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (from == address(0)) {\\n            revert IERC20Errors.ERC20TransferFromZeroAddress();\\n        }\\n        if (to == address(0)) revert IERC20Errors.ERC20TransferToZeroAddress();\\n\\n        Storage storage s = _storage();\\n\\n        uint256 fromBalance = _storage().balances[from];\\n        if (amount > fromBalance) {\\n            revert IERC20Errors.ERC20TransferAmountExceedsBalance(\\n                amount,\\n                fromBalance\\n            );\\n        }\\n\\n        unchecked {\\n            s.balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            s.balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function mint(address account, uint256 amount) internal {\\n        if (account == address(0)) revert IERC20Errors.ERC20MintToZeroAddress();\\n\\n        Storage storage s = _storage();\\n\\n        s.totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            s.balances[account] += amount;\\n        }\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(address account, uint256 amount) internal {\\n        if (account == address(0))\\n            revert IERC20Errors.ERC20BurnFromZeroAddress();\\n\\n        Storage storage s = _storage();\\n\\n        uint256 accountBalance = s.balances[account];\\n        if (amount > accountBalance)\\n            revert IERC20Errors.ERC20BurnAmountExceedsBalance(\\n                amount,\\n                accountBalance\\n            );\\n\\n        unchecked {\\n            s.balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            s.totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) internal view returns (uint256) {\\n        return _storage().balances[account];\\n    }\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _storage().allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (owner == address(0))\\n            revert IERC20Errors.ERC20ApproveFromZeroAddress();\\n        if (spender == address(0))\\n            revert IERC20Errors.ERC20ApproveToZeroAddress();\\n\\n        _storage().allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (amount > currentAllowance)\\n                revert IERC20Errors.ERC20InsufficientAllowance(\\n                    amount,\\n                    currentAllowance\\n                );\\n\\n            unchecked {\\n                approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function getName() internal view returns (string memory) {\\n        return _storage().name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function getSymbol() internal view returns (string memory) {\\n        return _storage().symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of the token.\\n     */\\n    function totalSupply() internal view returns (uint256) {\\n        return _storage().totalSupply;\\n    }\\n\\n    function setName(string memory name) internal {\\n        _storage().name = name;\\n    }\\n\\n    function setSymbol(string memory symbol) internal {\\n        _storage().symbol = symbol;\\n    }\\n}\\n\",\"keccak256\":\"0x63819d078671adbd26e67abdb215b6a5e27da982dbb908387f57b821869c5d4b\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/token/ERC20/errors/IERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC20Errors {\\n    error ERC20TransferFromZeroAddress();\\n    error ERC20TransferToZeroAddress();\\n    error ERC20TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n    error ERC20MintToZeroAddress();\\n    error ERC20BurnFromZeroAddress();\\n    error ERC20BurnAmountExceedsBalance(uint256 amount, uint256 balance);\\n    error ERC20ApproveFromZeroAddress();\\n    error ERC20ApproveToZeroAddress();\\n    error ERC20InsufficientAllowance(uint256 amount, uint256 allowance);\\n    error ERC20DecreasedAllowanceBelowZero(uint256 value, uint256 allowance);\\n}\\n\",\"keccak256\":\"0x48c8f8c6042af7afc20be92066addac57219bdfe444668d1f979a997304f2b3c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/token/ERC20/facets/ERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibERC20} from \\\"../LibERC20.sol\\\";\\nimport {IERC20Errors} from \\\"../errors/IERC20Errors.sol\\\";\\nimport {LibSimpleBlacklist} from \\\"../../../blacklist/LibSimpleBlacklist.sol\\\";\\nimport {LibPausable} from \\\"../../../pausable/LibPausable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract ERC20Facet is IERC20, IERC20Metadata, IERC20Errors {\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transfer(address to, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        LibPausable.enforceNotPaused(to, address(0));\\n\\n        LibSimpleBlacklist.enforceNotBlacklisted();\\n        LibSimpleBlacklist.enforceNotBlacklisted(to);\\n\\n        LibERC20.transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        LibPausable.enforceNotPaused(from, to);\\n\\n        LibSimpleBlacklist.enforceNotBlacklisted();\\n        LibSimpleBlacklist.enforceNotBlacklisted(from);\\n        LibSimpleBlacklist.enforceNotBlacklisted(to);\\n\\n        LibERC20.spendAllowance(from, msg.sender, amount);\\n        LibERC20.transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function balanceOf(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return LibERC20.balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return LibERC20.allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        LibERC20.approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        LibERC20.approve(\\n            msg.sender,\\n            spender,\\n            LibERC20.allowance(msg.sender, spender) + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = LibERC20.allowance(msg.sender, spender);\\n        if (subtractedValue > currentAllowance) {\\n            revert IERC20Errors.ERC20DecreasedAllowanceBelowZero(\\n                subtractedValue,\\n                currentAllowance\\n            );\\n        }\\n\\n        unchecked {\\n            LibERC20.approve(\\n                msg.sender,\\n                spender,\\n                currentAllowance - subtractedValue\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return LibERC20.totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return LibERC20.getName();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return LibERC20.getSymbol();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return 18;\\n    }\\n}\\n\",\"keccak256\":\"0x9ea5a0c25f7e2137c3e6ba685f785d94470a22391714f8ab0636e5f9c9c2ca0a\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/IInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IInitializer {\\n    error InitializerContractIsInitializing();\\n    error InitializerContractIsNotInitializing();\\n    error InitializerContractAlreadyInitialized();\\n    error InitializerVersionAlreadyInitialized(uint8 version);\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n}\\n\",\"keccak256\":\"0x08e2f2250d1a61bf4cfb07b788cdf0f1e838c068c72f5bb6acc9a20b5acab88c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\nimport {LibInitializer} from \\\"./LibInitializer.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Initializer is IInitializer {\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !LibInitializer.isInitializing();\\n\\n        if (\\n            (isTopLevelCall && !LibInitializer.isInitialized(1)) ||\\n            (!Address.isContract(address(this)) &&\\n                LibInitializer.getInitializedVersion() == 1)\\n        ) {\\n            LibInitializer.setInitialized(1);\\n\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(true);\\n            }\\n            _;\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(false);\\n                emit Initialized(1);\\n            }\\n        } else {\\n            revert InitializerContractAlreadyInitialized();\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        if (\\n            LibInitializer.isInitializing() ||\\n            LibInitializer.isInitialized(version)\\n        ) {\\n            revert InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        LibInitializer.setInitialized(version);\\n        LibInitializer.setInitializing(true);\\n        _;\\n        LibInitializer.setInitializing(false);\\n        emit Initialized(version);\\n    }\\n}\\n\",\"keccak256\":\"0x58e2c1e9b0297362c5f08b5a8dbc3b0851744def47e14438dfe377dfcedd4ed8\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/LibInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\n\\nlibrary LibInitializer {\\n    struct Storage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint8 initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool initializing;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.utils.initializer.LibInitializer\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    function enforceIsInitializing() internal view {\\n        if (!isInitializing()) {\\n            revert IInitializer.InitializerContractIsNotInitializing();\\n        }\\n    }\\n\\n    function isInitializing() internal view returns (bool) {\\n        return _storage().initializing;\\n    }\\n\\n    function setInitializing(bool value) internal {\\n        _storage().initializing = value;\\n    }\\n\\n    function isInitialized() internal view returns (bool) {\\n        return isInitialized(1);\\n    }\\n\\n    function isInitialized(uint8 version) internal view returns (bool) {\\n        return _storage().initialized >= version;\\n    }\\n\\n    function getInitializedVersion() internal view returns (uint8) {\\n        return _storage().initialized;\\n    }\\n\\n    function setInitialized(uint8 version) internal {\\n        if (isInitialized(version)) {\\n            revert IInitializer.InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        _storage().initialized = version;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function disable() internal {\\n        if (isInitializing()) {\\n            revert IInitializer.InitializerContractIsInitializing();\\n        }\\n\\n        if (!isInitialized(type(uint8).max)) {\\n            setInitialized(type(uint8).max);\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd626fbde2606a1d7a0f8a188eaab3e8d8e3056075f11511b03e6ea3f24f972\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IERC20Mintable is IERC20, IERC20Metadata {\\n    function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x67301cdb95ceb5c95ba6aebe3c3e4a541e9424b80e8c3b97fde5b49da013c84c\",\"license\":\"MIT\"},\"contracts/token-locker/ITokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITokenLocker {\\n    struct Lock {\\n        uint256 amount;\\n        uint256 reward;\\n        uint32 duration;\\n        uint32 lockedAt;\\n        uint32 expiresAt;\\n    }\\n\\n    /// @notice DEPRECATED\\n    struct UserInfo {\\n        uint256 amount;\\n        uint32 duration;\\n        uint32 lockedAt;\\n    }\\n\\n    error UnsupportedDuration();\\n    error LockNotFound();\\n    error LockNotExpired();\\n\\n    /// @notice DEPRECATED\\n    /*event Deposit(\\n        address account,\\n        uint256 amount,\\n        uint32 duration,\\n        uint32 lockedAt\\n    );/**/\\n\\n    event Deposit(\\n        address account,\\n        uint256 amount,\\n        uint256 reward,\\n        uint32 duration,\\n        uint32 lockedAt,\\n        uint32 expiresAt\\n    );\\n\\n    event Redeem(\\n        address account,\\n        uint256 amount,\\n        uint256 reward,\\n        uint32 duration,\\n        uint32 lockedAt\\n    );\\n\\n    function deposit(uint256 amount, uint32 duration) external;\\n\\n    function redeem(uint32 duration) external;\\n\\n    function getLock(\\n        address account,\\n        uint32 duration\\n    ) external view returns (Lock memory lock);\\n\\n    /// @notice DEPRECATED\\n    function getUserInfoLength(address account) external view returns (uint256);\\n\\n    /// @notice DEPRECATED\\n    function getUserInfo(\\n        address account,\\n        uint256 id\\n    ) external view returns (UserInfo memory);\\n\\n    /// @notice DEPRECATED\\n    function getUserInfo(\\n        address account\\n    ) external view returns (UserInfo[] memory userLockInfo);\\n}\\n\",\"keccak256\":\"0x6534d2001be9c19377cadb87b9ec7c38207e9d74827ad7ff10c779b4a43f025c\",\"license\":\"MIT\"},\"contracts/token-locker/LibTokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {ITokenLocker} from \\\"./ITokenLocker.sol\\\";\\nimport {IERC20Mintable} from \\\"../interfaces/IERC20Mintable.sol\\\";\\nimport {LibERC20} from \\\"@solarprotocol/solidity-modules/contracts/modules/token/ERC20/LibERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibTokenLocker {\\n    using SafeERC20 for IERC20Mintable;\\n\\n    struct Storage {\\n        IERC20Mintable lockedToken;\\n        mapping(address => mapping(uint32 => ITokenLocker.Lock)) accountDurationLock;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarlabs.contracts.token-locker.LibTokenLocker\\\");\\n\\n    uint256 internal constant DENOMINATOR = 1e10;\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    event Deposit(\\n        address account,\\n        uint256 amount,\\n        uint256 reward,\\n        uint32 duration,\\n        uint32 lockedAt,\\n        uint32 expiresAt\\n    );\\n\\n    event Redeem(\\n        address account,\\n        uint256 amount,\\n        uint256 reward,\\n        uint32 duration,\\n        uint32 lockedAt\\n    );\\n\\n    function enforceLockExistsAndExpired(\\n        address account,\\n        uint32 duration\\n    ) internal view {\\n        ITokenLocker.Lock storage lock = _storage().accountDurationLock[\\n            account\\n        ][duration];\\n\\n        if (lock.expiresAt == 0) {\\n            revert ITokenLocker.LockNotFound();\\n        }\\n\\n        if (block.timestamp < lock.expiresAt) {\\n            revert ITokenLocker.LockNotExpired();\\n        }\\n    }\\n\\n    function deposit(\\n        address account,\\n        uint256 amount,\\n        uint32 duration\\n    ) internal {\\n        Storage storage s = _storage();\\n\\n        // solhint-disable not-rely-on-time\\n        // slither-disable-next-line weak-prng\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n        // solhint-enable\\n\\n        if (s.accountDurationLock[account][duration].amount > 0) {\\n            amount += redeem(account, duration);\\n        }\\n\\n        s.lockedToken.safeTransferFrom(account, address(this), amount);\\n\\n        ITokenLocker.Lock memory lock = ITokenLocker.Lock({\\n            amount: amount,\\n            reward: calculateReward(amount, duration),\\n            duration: duration,\\n            lockedAt: blockTimestamp,\\n            expiresAt: blockTimestamp + duration\\n        });\\n\\n        s.accountDurationLock[account][duration] = lock;\\n\\n        LibERC20.mint(account, lock.amount + lock.reward);\\n\\n        emit Deposit(\\n            account,\\n            lock.amount,\\n            lock.reward,\\n            lock.duration,\\n            lock.lockedAt,\\n            lock.expiresAt\\n        );\\n    }\\n\\n    function redeem(\\n        address account,\\n        uint32 duration\\n    ) internal returns (uint256 redeemedAmount) {\\n        Storage storage s = _storage();\\n\\n        ITokenLocker.Lock memory lock = s.accountDurationLock[account][\\n            duration\\n        ];\\n\\n        if (lock.amount == 0) {\\n            revert ITokenLocker.LockNotFound();\\n        }\\n\\n        LibERC20.burn(account, lock.amount + lock.reward);\\n\\n        uint256 reward = lock.reward;\\n\\n        if (block.timestamp < lock.expiresAt) {\\n            reward = calculateRewardDiff(\\n                reward,\\n                lock.duration,\\n                (lock.expiresAt - block.timestamp)\\n            );\\n        }\\n\\n        redeemedAmount = lock.amount + reward;\\n\\n        IERC20Mintable lockedToken = s.lockedToken;\\n\\n        lockedToken.mint(address(this), reward);\\n\\n        lockedToken.safeTransfer(account, redeemedAmount);\\n\\n        emit Redeem(\\n            account,\\n            redeemedAmount,\\n            lock.reward,\\n            duration,\\n            lock.lockedAt\\n        );\\n\\n        delete s.accountDurationLock[account][duration];\\n    }\\n\\n    function getLock(\\n        address account,\\n        uint32 duration\\n    ) internal view returns (ITokenLocker.Lock memory lock) {\\n        return _storage().accountDurationLock[account][duration];\\n    }\\n\\n    function migrate(\\n        address account,\\n        uint256 amount,\\n        uint32 duration,\\n        uint32 timestamp\\n    ) internal {\\n        Storage storage s = _storage();\\n\\n        if (s.accountDurationLock[account][duration].amount == 0) {\\n            ITokenLocker.Lock memory lock = ITokenLocker.Lock({\\n                amount: amount,\\n                reward: calculateReward(amount, duration),\\n                duration: duration,\\n                lockedAt: timestamp,\\n                expiresAt: timestamp + duration\\n            });\\n\\n            s.accountDurationLock[account][duration] = lock;\\n\\n            LibERC20.mint(account, lock.amount + lock.reward);\\n\\n            emit Deposit(\\n                account,\\n                lock.amount,\\n                lock.reward,\\n                lock.duration,\\n                lock.lockedAt,\\n                lock.expiresAt\\n            );\\n        } else {\\n            ITokenLocker.Lock storage lock = s.accountDurationLock[account][\\n                duration\\n            ];\\n\\n            LibERC20.burn(account, lock.amount + lock.reward);\\n\\n            uint256 reward = lock.reward;\\n\\n            if (timestamp < lock.expiresAt) {\\n                reward = calculateRewardDiff(\\n                    reward,\\n                    lock.duration,\\n                    (timestamp - lock.lockedAt)\\n                );\\n            }\\n\\n            emit Redeem(account, lock.amount, reward, duration, lock.lockedAt);\\n\\n            s.lockedToken.mint(address(this), reward);\\n\\n            lock.amount += reward + amount;\\n            lock.reward = calculateReward(lock.amount, duration);\\n            lock.lockedAt = timestamp;\\n            lock.expiresAt = timestamp + duration;\\n\\n            uint256 balance = LibERC20.balanceOf(account);\\n            uint256 expectedBalance = lock.amount + lock.reward;\\n\\n            if (balance > expectedBalance) {\\n                LibERC20.burn(account, balance - expectedBalance);\\n            } else if (expectedBalance > balance) {\\n                LibERC20.mint(account, expectedBalance - balance);\\n            }\\n\\n            emit Deposit(\\n                account,\\n                lock.amount,\\n                lock.reward,\\n                lock.duration,\\n                lock.lockedAt,\\n                lock.expiresAt\\n            );\\n        }\\n    }\\n\\n    function calculateRewardDiff(\\n        uint256 reward,\\n        uint32 duration,\\n        uint256 newDuration\\n    ) internal pure returns (uint256 rewardAmount) {\\n        return\\n            (((reward * DENOMINATOR) / duration) * newDuration) / DENOMINATOR;\\n    }\\n\\n    function calculateReward(\\n        uint256 amount,\\n        uint32 duration\\n    ) internal pure returns (uint256 rewardAmount) {\\n        return (amount * getApr(duration)) / DENOMINATOR;\\n    }\\n\\n    function getApr(uint32 duration) internal pure returns (uint256 apr) {\\n        if (duration == 30 days) {\\n            return 83e6; // 0.83 / 100 * 1e10\\n        } else if (duration == 365 days) {\\n            return 65e8; // 65 / 100 * 1e10\\n        } else {\\n            revert ITokenLocker.UnsupportedDuration();\\n        }\\n    }\\n\\n    function setLockedToken(IERC20Mintable lockedToken) internal {\\n        _storage().lockedToken = lockedToken;\\n    }\\n}\\n\",\"keccak256\":\"0xddeb6611b70584eef234d1561d95d7516c1acfc5743bfd1baf4b32469717899c\",\"license\":\"MIT\"},\"contracts/token-locker/TokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibTokenLocker, ITokenLocker, IERC20Mintable, SafeERC20} from \\\"./LibTokenLocker.sol\\\";\\nimport {Initializer} from \\\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\\\";\\nimport {PausableFacet, LibPausable} from \\\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\\\";\\nimport {SimpleBlacklistFacet, LibSimpleBlacklist} from \\\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\\\";\\nimport {AccessControlFacet, LibAccessControl} from \\\"@solarprotocol/solidity-modules/contracts/modules/access/AccessControlFacet.sol\\\";\\nimport {LibRoles} from \\\"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\\\";\\nimport {ERC20Facet, LibERC20, IERC20} from \\\"@solarprotocol/solidity-modules/contracts/modules/token/ERC20/facets/ERC20Facet.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract TokenLocker is\\n    ITokenLocker,\\n    Initializer,\\n    PausableFacet,\\n    SimpleBlacklistFacet,\\n    AccessControlFacet,\\n    ERC20Facet\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice DEPRECATED\\n    IERC20 public token;\\n\\n    /// @notice DEPRECATED\\n    mapping(address => UserInfo[]) public userInfo;\\n    mapping(address => mapping(uint256 => bool)) public userInfoMigrated;\\n\\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 1e18;\\n    uint256 public constant MAX_DEPOSIT_AMOUNT = 5000e18;\\n\\n    function deposit(uint256 amount, uint32 duration) external {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        require(amount > MIN_DEPOSIT_AMOUNT, \\\"Amount < MIN_DEPOSIT_AMOUNT\\\");\\n        require(amount < MAX_DEPOSIT_AMOUNT, \\\"Amount > MAX_DEPOSIT_AMOUNT\\\");\\n\\n        assert(LibTokenLocker.getApr(duration) > 0);\\n\\n        LibTokenLocker.deposit(msg.sender, amount, duration);\\n    }\\n\\n    function redeem(uint32 duration) external {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        LibTokenLocker.enforceLockExistsAndExpired(msg.sender, duration);\\n\\n        LibTokenLocker.redeem(msg.sender, duration);\\n    }\\n\\n    function getLock(\\n        address account,\\n        uint32 duration\\n    ) external view returns (Lock memory lock) {\\n        return LibTokenLocker.getLock(account, duration);\\n    }\\n\\n    function getLocks(\\n        address[] calldata accounts,\\n        uint32[] calldata durations\\n    ) external view returns (Lock[] memory locks) {\\n        uint256 length = accounts.length;\\n\\n        require(length == durations.length, \\\"Length missmatch\\\");\\n\\n        locks = new Lock[](accounts.length);\\n\\n        uint256 index = 0;\\n\\n        while (index < length) {\\n            locks[index] = LibTokenLocker.getLock(\\n                accounts[index],\\n                durations[index]\\n            );\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    // solhint-disable no-unused-vars\\n    function transfer(\\n        // solc-ignore-next-line unused-param\\n        address to,\\n        // solc-ignore-next-line unused-param\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        revert(\\\"ERC20: Nit transferrable\\\");\\n    }\\n\\n    // solhint-enable\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    // solhint-disable no-unused-vars\\n    function transferFrom(\\n        // solc-ignore-next-line unused-param\\n        address from,\\n        // solc-ignore-next-line unused-param\\n        address to,\\n        // solc-ignore-next-line unused-param\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        revert(\\\"ERC20: Nit transferrable\\\");\\n    }\\n\\n    // solhint-enable\\n\\n    function initialize(IERC20 token_, address owner) external initializer {\\n        token = token_;\\n\\n        LibAccessControl.grantRole(LibRoles.DEFAULT_ADMIN_ROLE, owner);\\n        LibAccessControl.grantRole(LibRoles.MANAGER_ROLE, owner);\\n        LibAccessControl.grantRole(LibRoles.TESTER_ROLE, owner);\\n    }\\n\\n    function reinitialize(\\n        address[] calldata migrationManagers\\n    ) external reinitializer(2) {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        LibERC20.setName(\\\"KyotoSwap Governance Token\\\");\\n        LibERC20.setSymbol(\\\"voKSWAP\\\");\\n\\n        LibTokenLocker.setLockedToken(IERC20Mintable(address(token)));\\n\\n        LibPausable.pause();\\n\\n        for (uint256 index = 0; index < migrationManagers.length; ++index) {\\n            LibAccessControl.grantRole(\\n                keccak256(\\\"MIGRATION_MANAGER_ROLE\\\"),\\n                migrationManagers[index]\\n            );\\n        }\\n    }\\n\\n    function migrate(address[] calldata accounts) external {\\n        LibAccessControl.enforceRole(keccak256(\\\"MIGRATION_MANAGER_ROLE\\\"));\\n\\n        for (uint256 index = 0; index < accounts.length; ++index) {\\n            UserInfo[] storage infos = userInfo[accounts[index]];\\n\\n            for (uint256 uIndex = 0; uIndex < infos.length; ++uIndex) {\\n                if (!userInfoMigrated[accounts[index]][uIndex]) {\\n                    UserInfo storage uInfo = infos[uIndex];\\n                    LibTokenLocker.migrate(\\n                        accounts[index],\\n                        uInfo.amount,\\n                        uInfo.duration,\\n                        uInfo.lockedAt\\n                    );\\n\\n                    userInfoMigrated[accounts[index]][uIndex] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice DEPRECATED\\n    function getUserInfoLength(\\n        address account\\n    ) external view returns (uint256) {\\n        return userInfo[account].length;\\n    }\\n\\n    /// @notice DEPRECATED\\n    function getUserInfo(\\n        address account,\\n        uint256 id\\n    ) external view returns (UserInfo memory) {\\n        return userInfo[account][id];\\n    }\\n\\n    /// @notice DEPRECATED\\n    function getUserInfo(\\n        address account\\n    ) external view returns (UserInfo[] memory userLockInfo) {\\n        UserInfo[] storage userLocks = userInfo[account];\\n\\n        uint256 length = userLocks.length;\\n        uint256 index = 0;\\n\\n        userLockInfo = new UserInfo[](length);\\n\\n        while (index < length) {\\n            userLockInfo[index] = userLocks[index];\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76b43c7bc6123cfb17652afb25b1a82fd67b6f51983690a25c7672dad054ff90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614e94806100206000396000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c80634c34a98211610191578063a457c2d7116100e3578063d1e6c30c11610097578063ddf579ff11610071578063ddf579ff14610684578063fc0c546a14610697578063fe575a87146106b757600080fd5b8063d1e6c30c1461064b578063d547741f1461065e578063dd62ed3e1461067157600080fd5b8063c3392ee5116100c8578063c3392ee5146105ef578063ca15c87314610625578063ce5da4071461063857600080fd5b8063a457c2d7146105ce578063a9059cbb146105e157600080fd5b806376e8424f116101455780639010d07c1161011f5780639010d07c1461057b57806391d14854146105b357806395d89b41146105c657600080fd5b806376e8424f146105405780638456cb591461056057806385bee14b1461056857600080fd5b80636386c1c7116101765780636386c1c7146104fa5780636ebb16d31461051a57806370a082311461052d57600080fd5b80634c34a982146104e15780635c975abb146104f257600080fd5b8063248a9ca31161024a57806336568abe116101fe57806339509351116101d857806339509351146104b35780633f4ba83a146104c6578063485cc955146104ce57600080fd5b806336568abe1461046057806338bae1f71461047357806338c6e7951461049357600080fd5b80632e558d691161022f5780632e558d691461042b5780632f2ff15d1461043e578063313ce5671461045157600080fd5b8063248a9ca3146104055780632b2dfd2c1461041857600080fd5b80631c8f9f25116102a15780631ea30fef116102865780631ea30fef146103ae57806321ce919d146103bd57806323b872dd146103f257600080fd5b80631c8f9f251461036d5780631e4e00911461039b57600080fd5b8063095ea7b3116102d2578063095ea7b31461032157806318160ddd14610344578063186d38301461035a57600080fd5b806305a7508b146102ee57806306fdde0314610303575b600080fd5b6103016102fc3660046142f5565b6106ca565b005b61030b6106f3565b6040516103189190614334565b60405180910390f35b61033461032f3660046143b2565b610702565b6040519015158152602001610318565b61034c610719565b604051908152602001610318565b61030161036836600461442a565b610743565b61033461037b3660046143b2565b600260209081526000928352604080842090915290825290205460ff1681565b6103016103a9366004614496565b610915565b61034c670de0b6b3a764000081565b6103d06103cb3660046143b2565b610959565b6040805193845263ffffffff9283166020850152911690820152606001610318565b6103346104003660046144b8565b6109a7565b61034c6104133660046144f9565b610a0c565b610301610426366004614512565b610a42565b61030161043936600461453e565b610b5a565b61030161044c366004614580565b610d8c565b60405160128152602001610318565b61030161046e366004614580565b610dd0565b61048661048136600461442a565b610e7f565b60405161031891906145b0565b6104a66104a1366004614637565b6110d5565b6040516103189190614663565b6103346104c13660046143b2565b6111c7565b61030161122f565b6103016104dc3660046146aa565b61126a565b61034c69010f0cf064dd5920000081565b61033461149f565b61050d6105083660046146d8565b6114a9565b60405161031891906146f5565b610334610528366004614786565b6115e8565b61034c61053b3660046146d8565b6115f3565b61055361054e3660046143b2565b61163d565b6040516103189190614869565b6103016116db565b61030161057636600461453e565b611714565b61058e610589366004614496565b6119fc565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610318565b6103346105c1366004614580565b611a08565b61030b611a14565b6103346105dc3660046143b2565b611a1e565b6103346104003660046143b2565b61034c6105fd3660046146d8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b61034c6106333660046144f9565b611ac9565b61030161064636600461442a565b611ad4565b610301610659366004614897565b611c93565b61030161066c366004614580565b611cfc565b61034c61067f3660046146aa565b611d36565b610301610692366004614897565b611d8f565b60005461058e9073ffffffffffffffffffffffffffffffffffffffff1681565b6103346106c53660046146d8565b611df8565b6106d2611e45565b6106db33611ee4565b6106e53382611ef0565b6106ef3382611fe4565b5050565b60606106fd6122e4565b905090565b600061070f338484612398565b5060015b92915050565b60006106fd7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c5490565b61076c7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b80156108b157828114610806576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b838110156108ab576108998585838181106108265761082661491c565b905060200201602081019061083b91906146d8565b84848481811061084d5761084d61491c565b905060200281019061085f919061494b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124ca92505050565b806108a3816149df565b915050610809565b5061090f565b60005b8381101561090d576108fb8585838181106108d1576108d161491c565b90506020020160208101906108e691906146d8565b604051806020016040528060008152506124ca565b80610905816149df565b9150506108b4565b505b50505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015461094f906124c0565b6106ef82826125db565b6001602052816000526040600020818154811061097557600080fd5b60009182526020909120600290910201805460019091015490925063ffffffff80821692506401000000009091041683565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45524332303a204e6974207472616e736665727261626c65000000000000000060448201526000906064016107fd565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040812060010154610713565b610a4a611e45565b610a5333611ee4565b670de0b6b3a76400008211610ac4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74203c204d494e5f4445504f5349545f414d4f554e54000000000060448201526064016107fd565b69010f0cf064dd592000008210610b37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74203e204d41585f4445504f5349545f414d4f554e54000000000060448201526064016107fd565b6000610b4282612645565b11610b4f57610b4f614a17565b6106ef3383836126b6565b610b837f739a51874800ca2ea551f6738888eda63da7b0ffed906ab18243498239604e966124c0565b60005b81811015610d8757600060016000858585818110610ba657610ba661491c565b9050602002016020810190610bbb91906146d8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8154811015610d745760026000868686818110610c1957610c1961491c565b9050602002016020810190610c2e91906146d8565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812084825290925290205460ff16610d64576000828281548110610c7d57610c7d61491c565b90600052602060002090600202019050610cd5868686818110610ca257610ca261491c565b9050602002016020810190610cb791906146d8565b8254600184015463ffffffff80821691640100000000900416612935565b600160026000888888818110610ced57610ced61491c565b9050602002016020810190610d0291906146d8565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120868252909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055505b610d6d816149df565b9050610bfa565b505080610d80906149df565b9050610b86565b505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040902060010154610dc6906124c0565b6106ef8282612f12565b73ffffffffffffffffffffffffffffffffffffffff81163314610e75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107fd565b6106ef8282613014565b606083828114610eeb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c656e677468206d6973736d617463680000000000000000000000000000000060448201526064016107fd565b8467ffffffffffffffff811115610f0457610f04614757565b604051908082528060200260200182016040528015610f7b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610f225790505b50915060005b818110156110cb576110a6878783818110610f9e57610f9e61491c565b9050602002016020810190610fb391906146d8565b868684818110610fc557610fc561491c565b9050602002016020810190610fda91906142f5565b6040805160a08082018352600080835260208084018290528385018290526060808501839052608094850183905273ffffffffffffffffffffffffffffffffffffffff9790971682527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab6815284822063ffffffff9687168352815290849020845192830185528054835260018101549183019190915260020154808516938201939093526401000000008304841694810194909452680100000000000000009091049091169082015290565b8382815181106110b8576110b861491c565b6020908102919091010152600101610f81565b5050949350505050565b6040805160a08082018352600080835260208084018290528385018290526060808501839052608080860184905286518086018852848152808401859052808801859052808301859052810184905273ffffffffffffffffffffffffffffffffffffffff891684527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab6835286842063ffffffff808a168652908452938790208751958601885280548652600181015493860193909352600290920154808416968501969096526401000000008604831690840152680100000000000000009094041692810192909252905b9392505050565b3360008181527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea06020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161070f91859061122a908690614a46565b612398565b6112587f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a266124c0565b611260613114565b6112686131b2565b565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354610100900460ff16158080156112c857507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600160ff909116105b806112e75750303b1580156112e757506112e061322f565b60ff166001145b1561146d576112f6600161325c565b8015611348577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161781556113929083612f12565b6113bc7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0883612f12565b6113e67fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e83612f12565b8015610d87577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b6040517f5d99ebd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106fd613314565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812080546060928167ffffffffffffffff8111156114ec576114ec614757565b60405190808252806020026020018201604052801561155557816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161150a5790505b5093505b818110156115e0578281815481106115735761157361491c565b6000918252602091829020604080516060810182526002909302909101805483526001015463ffffffff8082169484019490945264010000000090049092169181019190915284518590839081106115cd576115cd61491c565b6020908102919091010152600101611559565b505050919050565b60006107138261333c565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9f6020526040812054610713565b604080516060810182526000808252602080830182905282840182905273ffffffffffffffffffffffffffffffffffffffff86168252600190529190912080548390811061168d5761168d61491c565b6000918252602091829020604080516060810182526002909302909101805483526001015463ffffffff80821694840194909452640100000000900490921691810191909152905092915050565b6117047f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a266124c0565b61170c611e45565b6112686133d9565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600290610100900460ff168061177357507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610155b156117af576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff821660048201526024016107fd565b6117b88161325c565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905561182c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086124c0565b61186a6040518060400160405280601a81526020017f4b796f746f5377617020476f7665726e616e636520546f6b656e000000000000815250613453565b6118a86040518060400160405280600781526020017f766f4b535741500000000000000000000000000000000000000000000000000081525061347e565b6000547fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556119166133d9565b60005b82811015611981576119717f739a51874800ca2ea551f6738888eda63da7b0ffed906ab18243498239604e968585848181106119575761195761491c565b905060200201602081019061196c91906146d8565b612f12565b61197a816149df565b9050611919565b507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611460565b60006111c083836134a9565b60006111c083836134e0565b60606106fd6135d3565b3360009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea06020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205480831115611ab2576040517fc7d2f36c00000000000000000000000000000000000000000000000000000000815260048101849052602481018290526044016107fd565b611abf3385858403612398565b5060019392505050565b600061071382613604565b611afd7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b8015611c3757828114611b92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084016107fd565b60005b838110156108ab57611c25858583818110611bb257611bb261491c565b9050602002016020810190611bc791906146d8565b848484818110611bd957611bd961491c565b9050602002810190611beb919061494b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061363a92505050565b80611c2f816149df565b915050611b95565b60005b8381101561090d57611c81858583818110611c5757611c5761491c565b9050602002016020810190611c6c91906146d8565b6040518060200160405280600081525061363a565b80611c8b816149df565b915050611c3a565b611cbc7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b610d878383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124ca92505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040902060010154610e75906124c0565b73ffffffffffffffffffffffffffffffffffffffff80831660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea0602090815260408083209385168352929052908120546111c0565b611db87ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b610d878383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061363a92505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff16610713565b611e4d613314565b1580611e7e5750611e7e7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336134e0565b611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107fd565b611eed8161374d565b50565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab66020908152604080832063ffffffff85811685529252822060028101549092680100000000000000009091049091169003611f94576040517fc10ddcde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015468010000000000000000900463ffffffff16421015610d87576040517f6855a80200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab66020908152604080832063ffffffff8581168552908352818420825160a081018452815480825260018301549582019590955260029091015480831693820193909352640100000000830482166060820152680100000000000000009092041660808201527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab59183036120e0576040517fc10ddcde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120fd85826020015183600001516120f89190614a46565b613829565b6020810151608082015163ffffffff1642101561213b5761213881836040015142856080015163ffffffff166121339190614a59565b61398f565b90505b8151612148908290614a46565b83546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905291955073ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b1580156121bc57600080fd5b505af11580156121d0573d6000803e3d6000fd5b506121f69250505073ffffffffffffffffffffffffffffffffffffffff821688876139cf565b6020808401516060808601516040805173ffffffffffffffffffffffffffffffffffffffff8d1681529485018a905284019290925263ffffffff808a16918401919091521660808201527f7e7b8348e805fc4ba413c959fbbe6735485605b293a9fd525bb79c0e027ef7ba9060a00160405180910390a150505073ffffffffffffffffffffffffffffffffffffffff909316600090815260019384016020908152604080832063ffffffff909516835293905291822082815592830191909155600290910180547fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016905590565b60607f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c600101805461231590614a6c565b80601f016020809104026020016040519081016040528092919081815260200182805461234190614a6c565b801561238e5780601f106123635761010080835404028352916020019161238e565b820191906000526020600020905b81548152906001019060200180831161237157829003601f168201915b5050505050905090565b73ffffffffffffffffffffffffffffffffffffffff83166123e5576040517fbec36d8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216612432576040517fd8aedff600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83811660008181527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea0602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b611eed8133613aa3565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16156106ef5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555161258f908290614abf565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008163ffffffff1662278d000361266257506304f27ac0919050565b8163ffffffff166301e133800361267f57506401836e2100919050565b6040517f4df76e0300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b7fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab560006126e864010000000042614b0a565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600184016020908152604080832063ffffffff8816845290915290205490915015612740576127338584611fe4565b61273d9085614a46565b93505b81546127649073ffffffffffffffffffffffffffffffffffffffff16863087613aee565b60006040518060a001604052808681526020016127818787613b4c565b815263ffffffff8087166020830152841660408201526060016127a48685614b1e565b63ffffffff90811690915273ffffffffffffffffffffffffffffffffffffffff881660009081526001808701602090815260408084208a86168552825292839020855180825591860151928101839055928501516002909301805460608701516080880151871668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff918816640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909316969097169590951717939093169390931790915591925061289191889161288c9190614a46565b613b71565b7f4263ff4bf483fdbd3d385d4777e89e099a862063a0fd57650c8ee052ff5dcce586826000015183602001518460400151856060015186608001516040516129259695949392919073ffffffffffffffffffffffffffffffffffffffff9690961686526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405180910390a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab66020908152604080832063ffffffff861684529091528120547fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab59103612b7c5760006040518060a001604052808681526020016129cf8787613b4c565b815263ffffffff8087166020830152851660408201526060016129f28686614b1e565b63ffffffff90811690915273ffffffffffffffffffffffffffffffffffffffff881660009081526001808601602090815260408084208a86168552825292839020855180825591860151928101839055928501516002909301805460608701516080880151871668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff918816640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009093169690971695909517179390931693909317909155919250612ada91889161288c9190614a46565b7f4263ff4bf483fdbd3d385d4777e89e099a862063a0fd57650c8ee052ff5dcce58682600001518360200151846040015185606001518660800151604051612b6e9695949392919073ffffffffffffffffffffffffffffffffffffffff9690961686526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405180910390a15061090d565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260018083016020908152604080842063ffffffff88168552909152909120908101548154612bcc9188916120f89190614a46565b6001810154600282015463ffffffff6801000000000000000090910481169085161015612c29576002820154612c2690829063ffffffff80821691612c1b916401000000009091041688614b3b565b63ffffffff1661398f565b90505b815460028301546040805173ffffffffffffffffffffffffffffffffffffffff8b1681526020810193909352820183905263ffffffff80881660608401526401000000009091041660808201527f7e7b8348e805fc4ba413c959fbbe6735485605b293a9fd525bb79c0e027ef7ba9060a00160405180910390a182546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b158015612d1457600080fd5b505af1158015612d28573d6000803e3d6000fd5b505050508581612d389190614a46565b826000016000828254612d4b9190614a46565b90915550508154612d5c9086613b4c565b60018301556002820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff1664010000000063ffffffff871602179055612da48585614b1e565b60028301805463ffffffff9290921668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff90921691909117905573ffffffffffffffffffffffffffffffffffffffff871660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9f602052604081205460018401548454919291612e419190614a46565b905080821115612e5e57612e59896120f88385614a59565b612e74565b81811115612e7457612e748961288c8484614a59565b8354600185015460028601546040805173ffffffffffffffffffffffffffffffffffffffff8e168152602081019490945283019190915263ffffffff8082166060840152640100000000820481166080840152680100000000000000009091041660a08201527f4263ff4bf483fdbd3d385d4777e89e099a862063a0fd57650c8ee052ff5dcce59060c00160405180910390a1505050505050505050565b612f1c82826134e0565b6106ef5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d39091529020612fca9082613c54565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b61301e82826134e0565b156106ef5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d390915290206130ca9082613c76565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b61311c613314565b8061314c575061314c7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336134e0565b611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107fd565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60007f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35b5460ff16919050565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff8083169116106132c1576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff821660048201526024016107fd565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b60007fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea7613253565b6000805b82518110156133d0576133b083828151811061335e5761335e61491c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b156133be5750600192915050565b806133c8816149df565b915050613340565b50600092915050565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001613225565b7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9d6106ef8282614ba6565b7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9e6106ef8282614ba6565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d3602052604081206111c09083613c98565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff16806111c057507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260006135948560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b60607f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c600201805461231590614a6c565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d36020526040812061071390613ca4565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff166106ef5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551613701908290614abf565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1615611eed576137bb8173ffffffffffffffffffffffffffffffffffffffff166014613cae565b6040516020016137cb9190614cc0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526107fd91600401614334565b73ffffffffffffffffffffffffffffffffffffffff8216613876576040517f560d88fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9f60205260409020547f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c9080831115613921576040517fe1166d4100000000000000000000000000000000000000000000000000000000815260048101849052602481018290526044016107fd565b73ffffffffffffffffffffffffffffffffffffffff841660008181526003840160209081526040808320878603905585548790038655518681529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b60006402540be4008263ffffffff85166139a98388614d2c565b6139b39190614d43565b6139bd9190614d2c565b6139c79190614d43565b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d879084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ef1565b613aad82826134e0565b6106ef57613ad28173ffffffffffffffffffffffffffffffffffffffff166014613cae565b613add836020613cae565b6040516020016137cb929190614d57565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261090f9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613a21565b60006402540be400613b5d83612645565b613b679085614d2c565b6111c09190614d43565b73ffffffffffffffffffffffffffffffffffffffff8216613bbe576040517fd1bb5a3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c805482908290600090613bf3908490614a46565b909155505073ffffffffffffffffffffffffffffffffffffffff831660008181526003830160209081526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016124b3565b60006111c08373ffffffffffffffffffffffffffffffffffffffff8416613ffd565b60006111c08373ffffffffffffffffffffffffffffffffffffffff841661404c565b60006111c08383614146565b6000610713825490565b60606000613cbd836002614d2c565b613cc8906002614a46565b67ffffffffffffffff811115613ce057613ce0614757565b6040519080825280601f01601f191660200182016040528015613d0a576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613d4157613d4161491c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613da457613da461491c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613de0846002614d2c565b613deb906001614a46565b90505b6001811115613e88577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613e2c57613e2c61491c565b1a60f81b828281518110613e4257613e4261491c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613e8181614dd8565b9050613dee565b5083156111c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fd565b6000613f53826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166141709092919063ffffffff16565b805190915015610d875780806020019051810190613f719190614e0d565b610d87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107fd565b600081815260018301602052604081205461404457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610713565b506000610713565b60008181526001830160205260408120548015614135576000614070600183614a59565b855490915060009061408490600190614a59565b90508181146140e95760008660000182815481106140a4576140a461491c565b90600052602060002001549050808760000184815481106140c7576140c761491c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140fa576140fa614e2f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610713565b6000915050610713565b5092915050565b600082600001828154811061415d5761415d61491c565b9060005260206000200154905092915050565b60606139c78484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516141a49190614abf565b60006040518083038185875af1925050503d80600081146141e1576040519150601f19603f3d011682016040523d82523d6000602084013e6141e6565b606091505b50915091506141f787838387614202565b979650505050505050565b606083156142985782516000036142915773ffffffffffffffffffffffffffffffffffffffff85163b614291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107fd565b50816139c7565b6139c783838151156142ad5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd9190614334565b803563ffffffff811681146126b157600080fd5b60006020828403121561430757600080fd5b6111c0826142e1565b60005b8381101561432b578181015183820152602001614313565b50506000910152565b6020815260008251806020840152614353816040850160208701614310565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114611eed57600080fd5b80356126b181614385565b600080604083850312156143c557600080fd5b82356143d081614385565b946020939093013593505050565b60008083601f8401126143f057600080fd5b50813567ffffffffffffffff81111561440857600080fd5b6020830191508360208260051b850101111561442357600080fd5b9250929050565b6000806000806040858703121561444057600080fd5b843567ffffffffffffffff8082111561445857600080fd5b614464888389016143de565b9096509450602087013591508082111561447d57600080fd5b5061448a878288016143de565b95989497509550505050565b600080604083850312156144a957600080fd5b50508035926020909101359150565b6000806000606084860312156144cd57600080fd5b83356144d881614385565b925060208401356144e881614385565b929592945050506040919091013590565b60006020828403121561450b57600080fd5b5035919050565b6000806040838503121561452557600080fd5b82359150614535602084016142e1565b90509250929050565b6000806020838503121561455157600080fd5b823567ffffffffffffffff81111561456857600080fd5b614574858286016143de565b90969095509350505050565b6000806040838503121561459357600080fd5b8235915060208301356145a581614385565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561462b576146188385518051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015280608084015116608085015250505050565b9284019260a092909201916001016145cc565b50909695505050505050565b6000806040838503121561464a57600080fd5b823561465581614385565b9150614535602084016142e1565b60a0810161071382848051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015280608084015116608085015250505050565b600080604083850312156146bd57600080fd5b82356146c881614385565b915060208301356145a581614385565b6000602082840312156146ea57600080fd5b81356111c081614385565b6020808252825182820181905260009190848201906040850190845b8181101561462b576147448385518051825260208082015163ffffffff9081169184019190915260409182015116910152565b9284019260609290920191600101614711565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561479957600080fd5b823567ffffffffffffffff808211156147b157600080fd5b818501915085601f8301126147c557600080fd5b8135818111156147d7576147d7614757565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561481a5761481a614757565b60405291825284820192508381018501918883111561483857600080fd5b938501935b8285101561485d5761484e856143a7565b8452938501939285019261483d565b98975050505050505050565b6060810161071382848051825260208082015163ffffffff9081169184019190915260409182015116910152565b6000806000604084860312156148ac57600080fd5b83356148b781614385565b9250602084013567ffffffffffffffff808211156148d457600080fd5b818601915086601f8301126148e857600080fd5b8135818111156148f757600080fd5b87602082850101111561490957600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261498057600080fd5b83018035915067ffffffffffffffff82111561499b57600080fd5b60200191503681900382131561442357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a1057614a106149b0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b80820180821115610713576107136149b0565b81810381811115610713576107136149b0565b600181811c90821680614a8057607f821691505b602082108103614ab9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008251614ad1818460208701614310565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614b1957614b19614adb565b500690565b63ffffffff81811683821601908082111561413f5761413f6149b0565b63ffffffff82811682821603908082111561413f5761413f6149b0565b601f821115610d8757600081815260208120601f850160051c81016020861015614b7f5750805b601f850160051c820191505b81811015614b9e57828155600101614b8b565b505050505050565b815167ffffffffffffffff811115614bc057614bc0614757565b614bd481614bce8454614a6c565b84614b58565b602080601f831160018114614c275760008415614bf15750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614b9e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015614c7457888601518255948401946001909101908401614c55565b5085821015614cb057878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f53696d706c65426c61636b6c6973743a206163636f756e742000000000000000815260008251614cf8816019850160208701614310565b7f20697320626c61636b6c697374656400000000000000000000000000000000006019939091019283015250602801919050565b8082028115828204841417610713576107136149b0565b600082614d5257614d52614adb565b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d8f816017850160208801614310565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614dcc816028840160208801614310565b01602801949350505050565b600081614de757614de76149b0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215614e1f57600080fd5b815180151581146111c057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220cb3ed805aa08195518b45abf67a8ec61647f2750f6e58002db1f05e9fce5bb0e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e95760003560e01c80634c34a98211610191578063a457c2d7116100e3578063d1e6c30c11610097578063ddf579ff11610071578063ddf579ff14610684578063fc0c546a14610697578063fe575a87146106b757600080fd5b8063d1e6c30c1461064b578063d547741f1461065e578063dd62ed3e1461067157600080fd5b8063c3392ee5116100c8578063c3392ee5146105ef578063ca15c87314610625578063ce5da4071461063857600080fd5b8063a457c2d7146105ce578063a9059cbb146105e157600080fd5b806376e8424f116101455780639010d07c1161011f5780639010d07c1461057b57806391d14854146105b357806395d89b41146105c657600080fd5b806376e8424f146105405780638456cb591461056057806385bee14b1461056857600080fd5b80636386c1c7116101765780636386c1c7146104fa5780636ebb16d31461051a57806370a082311461052d57600080fd5b80634c34a982146104e15780635c975abb146104f257600080fd5b8063248a9ca31161024a57806336568abe116101fe57806339509351116101d857806339509351146104b35780633f4ba83a146104c6578063485cc955146104ce57600080fd5b806336568abe1461046057806338bae1f71461047357806338c6e7951461049357600080fd5b80632e558d691161022f5780632e558d691461042b5780632f2ff15d1461043e578063313ce5671461045157600080fd5b8063248a9ca3146104055780632b2dfd2c1461041857600080fd5b80631c8f9f25116102a15780631ea30fef116102865780631ea30fef146103ae57806321ce919d146103bd57806323b872dd146103f257600080fd5b80631c8f9f251461036d5780631e4e00911461039b57600080fd5b8063095ea7b3116102d2578063095ea7b31461032157806318160ddd14610344578063186d38301461035a57600080fd5b806305a7508b146102ee57806306fdde0314610303575b600080fd5b6103016102fc3660046142f5565b6106ca565b005b61030b6106f3565b6040516103189190614334565b60405180910390f35b61033461032f3660046143b2565b610702565b6040519015158152602001610318565b61034c610719565b604051908152602001610318565b61030161036836600461442a565b610743565b61033461037b3660046143b2565b600260209081526000928352604080842090915290825290205460ff1681565b6103016103a9366004614496565b610915565b61034c670de0b6b3a764000081565b6103d06103cb3660046143b2565b610959565b6040805193845263ffffffff9283166020850152911690820152606001610318565b6103346104003660046144b8565b6109a7565b61034c6104133660046144f9565b610a0c565b610301610426366004614512565b610a42565b61030161043936600461453e565b610b5a565b61030161044c366004614580565b610d8c565b60405160128152602001610318565b61030161046e366004614580565b610dd0565b61048661048136600461442a565b610e7f565b60405161031891906145b0565b6104a66104a1366004614637565b6110d5565b6040516103189190614663565b6103346104c13660046143b2565b6111c7565b61030161122f565b6103016104dc3660046146aa565b61126a565b61034c69010f0cf064dd5920000081565b61033461149f565b61050d6105083660046146d8565b6114a9565b60405161031891906146f5565b610334610528366004614786565b6115e8565b61034c61053b3660046146d8565b6115f3565b61055361054e3660046143b2565b61163d565b6040516103189190614869565b6103016116db565b61030161057636600461453e565b611714565b61058e610589366004614496565b6119fc565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610318565b6103346105c1366004614580565b611a08565b61030b611a14565b6103346105dc3660046143b2565b611a1e565b6103346104003660046143b2565b61034c6105fd3660046146d8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b61034c6106333660046144f9565b611ac9565b61030161064636600461442a565b611ad4565b610301610659366004614897565b611c93565b61030161066c366004614580565b611cfc565b61034c61067f3660046146aa565b611d36565b610301610692366004614897565b611d8f565b60005461058e9073ffffffffffffffffffffffffffffffffffffffff1681565b6103346106c53660046146d8565b611df8565b6106d2611e45565b6106db33611ee4565b6106e53382611ef0565b6106ef3382611fe4565b5050565b60606106fd6122e4565b905090565b600061070f338484612398565b5060015b92915050565b60006106fd7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c5490565b61076c7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b80156108b157828114610806576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b838110156108ab576108998585838181106108265761082661491c565b905060200201602081019061083b91906146d8565b84848481811061084d5761084d61491c565b905060200281019061085f919061494b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124ca92505050565b806108a3816149df565b915050610809565b5061090f565b60005b8381101561090d576108fb8585838181106108d1576108d161491c565b90506020020160208101906108e691906146d8565b604051806020016040528060008152506124ca565b80610905816149df565b9150506108b4565b505b50505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015461094f906124c0565b6106ef82826125db565b6001602052816000526040600020818154811061097557600080fd5b60009182526020909120600290910201805460019091015490925063ffffffff80821692506401000000009091041683565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45524332303a204e6974207472616e736665727261626c65000000000000000060448201526000906064016107fd565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040812060010154610713565b610a4a611e45565b610a5333611ee4565b670de0b6b3a76400008211610ac4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74203c204d494e5f4445504f5349545f414d4f554e54000000000060448201526064016107fd565b69010f0cf064dd592000008210610b37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416d6f756e74203e204d41585f4445504f5349545f414d4f554e54000000000060448201526064016107fd565b6000610b4282612645565b11610b4f57610b4f614a17565b6106ef3383836126b6565b610b837f739a51874800ca2ea551f6738888eda63da7b0ffed906ab18243498239604e966124c0565b60005b81811015610d8757600060016000858585818110610ba657610ba661491c565b9050602002016020810190610bbb91906146d8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8154811015610d745760026000868686818110610c1957610c1961491c565b9050602002016020810190610c2e91906146d8565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812084825290925290205460ff16610d64576000828281548110610c7d57610c7d61491c565b90600052602060002090600202019050610cd5868686818110610ca257610ca261491c565b9050602002016020810190610cb791906146d8565b8254600184015463ffffffff80821691640100000000900416612935565b600160026000888888818110610ced57610ced61491c565b9050602002016020810190610d0291906146d8565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120868252909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055505b610d6d816149df565b9050610bfa565b505080610d80906149df565b9050610b86565b505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040902060010154610dc6906124c0565b6106ef8282612f12565b73ffffffffffffffffffffffffffffffffffffffff81163314610e75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107fd565b6106ef8282613014565b606083828114610eeb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c656e677468206d6973736d617463680000000000000000000000000000000060448201526064016107fd565b8467ffffffffffffffff811115610f0457610f04614757565b604051908082528060200260200182016040528015610f7b57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610f225790505b50915060005b818110156110cb576110a6878783818110610f9e57610f9e61491c565b9050602002016020810190610fb391906146d8565b868684818110610fc557610fc561491c565b9050602002016020810190610fda91906142f5565b6040805160a08082018352600080835260208084018290528385018290526060808501839052608094850183905273ffffffffffffffffffffffffffffffffffffffff9790971682527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab6815284822063ffffffff9687168352815290849020845192830185528054835260018101549183019190915260020154808516938201939093526401000000008304841694810194909452680100000000000000009091049091169082015290565b8382815181106110b8576110b861491c565b6020908102919091010152600101610f81565b5050949350505050565b6040805160a08082018352600080835260208084018290528385018290526060808501839052608080860184905286518086018852848152808401859052808801859052808301859052810184905273ffffffffffffffffffffffffffffffffffffffff891684527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab6835286842063ffffffff808a168652908452938790208751958601885280548652600181015493860193909352600290920154808416968501969096526401000000008604831690840152680100000000000000009094041692810192909252905b9392505050565b3360008181527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea06020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161070f91859061122a908690614a46565b612398565b6112587f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a266124c0565b611260613114565b6112686131b2565b565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354610100900460ff16158080156112c857507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600160ff909116105b806112e75750303b1580156112e757506112e061322f565b60ff166001145b1561146d576112f6600161325c565b8015611348577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161781556113929083612f12565b6113bc7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0883612f12565b6113e67fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e83612f12565b8015610d87577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b6040517f5d99ebd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106fd613314565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812080546060928167ffffffffffffffff8111156114ec576114ec614757565b60405190808252806020026020018201604052801561155557816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161150a5790505b5093505b818110156115e0578281815481106115735761157361491c565b6000918252602091829020604080516060810182526002909302909101805483526001015463ffffffff8082169484019490945264010000000090049092169181019190915284518590839081106115cd576115cd61491c565b6020908102919091010152600101611559565b505050919050565b60006107138261333c565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9f6020526040812054610713565b604080516060810182526000808252602080830182905282840182905273ffffffffffffffffffffffffffffffffffffffff86168252600190529190912080548390811061168d5761168d61491c565b6000918252602091829020604080516060810182526002909302909101805483526001015463ffffffff80821694840194909452640100000000900490921691810191909152905092915050565b6117047f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a266124c0565b61170c611e45565b6112686133d9565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600290610100900460ff168061177357507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610155b156117af576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff821660048201526024016107fd565b6117b88161325c565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905561182c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086124c0565b61186a6040518060400160405280601a81526020017f4b796f746f5377617020476f7665726e616e636520546f6b656e000000000000815250613453565b6118a86040518060400160405280600781526020017f766f4b535741500000000000000000000000000000000000000000000000000081525061347e565b6000547fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556119166133d9565b60005b82811015611981576119717f739a51874800ca2ea551f6738888eda63da7b0ffed906ab18243498239604e968585848181106119575761195761491c565b905060200201602081019061196c91906146d8565b612f12565b61197a816149df565b9050611919565b507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611460565b60006111c083836134a9565b60006111c083836134e0565b60606106fd6135d3565b3360009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea06020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205480831115611ab2576040517fc7d2f36c00000000000000000000000000000000000000000000000000000000815260048101849052602481018290526044016107fd565b611abf3385858403612398565b5060019392505050565b600061071382613604565b611afd7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b8015611c3757828114611b92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e73000000000000000000000000000000000000000000000000000000000060648201526084016107fd565b60005b838110156108ab57611c25858583818110611bb257611bb261491c565b9050602002016020810190611bc791906146d8565b848484818110611bd957611bd961491c565b9050602002810190611beb919061494b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061363a92505050565b80611c2f816149df565b915050611b95565b60005b8381101561090d57611c81858583818110611c5757611c5761491c565b9050602002016020810190611c6c91906146d8565b6040518060200160405280600081525061363a565b80611c8b816149df565b915050611c3a565b611cbc7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b610d878383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124ca92505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040902060010154610e75906124c0565b73ffffffffffffffffffffffffffffffffffffffff80831660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea0602090815260408083209385168352929052908120546111c0565b611db87ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee6124c0565b610d878383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061363a92505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff16610713565b611e4d613314565b1580611e7e5750611e7e7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336134e0565b611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107fd565b611eed8161374d565b50565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab66020908152604080832063ffffffff85811685529252822060028101549092680100000000000000009091049091169003611f94576040517fc10ddcde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015468010000000000000000900463ffffffff16421015610d87576040517f6855a80200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab66020908152604080832063ffffffff8581168552908352818420825160a081018452815480825260018301549582019590955260029091015480831693820193909352640100000000830482166060820152680100000000000000009092041660808201527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab59183036120e0576040517fc10ddcde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120fd85826020015183600001516120f89190614a46565b613829565b6020810151608082015163ffffffff1642101561213b5761213881836040015142856080015163ffffffff166121339190614a59565b61398f565b90505b8151612148908290614a46565b83546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905291955073ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b1580156121bc57600080fd5b505af11580156121d0573d6000803e3d6000fd5b506121f69250505073ffffffffffffffffffffffffffffffffffffffff821688876139cf565b6020808401516060808601516040805173ffffffffffffffffffffffffffffffffffffffff8d1681529485018a905284019290925263ffffffff808a16918401919091521660808201527f7e7b8348e805fc4ba413c959fbbe6735485605b293a9fd525bb79c0e027ef7ba9060a00160405180910390a150505073ffffffffffffffffffffffffffffffffffffffff909316600090815260019384016020908152604080832063ffffffff909516835293905291822082815592830191909155600290910180547fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016905590565b60607f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c600101805461231590614a6c565b80601f016020809104026020016040519081016040528092919081815260200182805461234190614a6c565b801561238e5780601f106123635761010080835404028352916020019161238e565b820191906000526020600020905b81548152906001019060200180831161237157829003601f168201915b5050505050905090565b73ffffffffffffffffffffffffffffffffffffffff83166123e5576040517fbec36d8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216612432576040517fd8aedff600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83811660008181527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12ea0602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b611eed8133613aa3565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16156106ef5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555161258f908290614abf565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008163ffffffff1662278d000361266257506304f27ac0919050565b8163ffffffff166301e133800361267f57506401836e2100919050565b6040517f4df76e0300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b7fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab560006126e864010000000042614b0a565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600184016020908152604080832063ffffffff8816845290915290205490915015612740576127338584611fe4565b61273d9085614a46565b93505b81546127649073ffffffffffffffffffffffffffffffffffffffff16863087613aee565b60006040518060a001604052808681526020016127818787613b4c565b815263ffffffff8087166020830152841660408201526060016127a48685614b1e565b63ffffffff90811690915273ffffffffffffffffffffffffffffffffffffffff881660009081526001808701602090815260408084208a86168552825292839020855180825591860151928101839055928501516002909301805460608701516080880151871668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff918816640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909316969097169590951717939093169390931790915591925061289191889161288c9190614a46565b613b71565b7f4263ff4bf483fdbd3d385d4777e89e099a862063a0fd57650c8ee052ff5dcce586826000015183602001518460400151856060015186608001516040516129259695949392919073ffffffffffffffffffffffffffffffffffffffff9690961686526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405180910390a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081527fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab66020908152604080832063ffffffff861684529091528120547fc3e2198cb9100972704cf8e52b0abb0942d86d4aefd2e3b156a1254839eebab59103612b7c5760006040518060a001604052808681526020016129cf8787613b4c565b815263ffffffff8087166020830152851660408201526060016129f28686614b1e565b63ffffffff90811690915273ffffffffffffffffffffffffffffffffffffffff881660009081526001808601602090815260408084208a86168552825292839020855180825591860151928101839055928501516002909301805460608701516080880151871668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff918816640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009093169690971695909517179390931693909317909155919250612ada91889161288c9190614a46565b7f4263ff4bf483fdbd3d385d4777e89e099a862063a0fd57650c8ee052ff5dcce58682600001518360200151846040015185606001518660800151604051612b6e9695949392919073ffffffffffffffffffffffffffffffffffffffff9690961686526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405180910390a15061090d565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260018083016020908152604080842063ffffffff88168552909152909120908101548154612bcc9188916120f89190614a46565b6001810154600282015463ffffffff6801000000000000000090910481169085161015612c29576002820154612c2690829063ffffffff80821691612c1b916401000000009091041688614b3b565b63ffffffff1661398f565b90505b815460028301546040805173ffffffffffffffffffffffffffffffffffffffff8b1681526020810193909352820183905263ffffffff80881660608401526401000000009091041660808201527f7e7b8348e805fc4ba413c959fbbe6735485605b293a9fd525bb79c0e027ef7ba9060a00160405180910390a182546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b158015612d1457600080fd5b505af1158015612d28573d6000803e3d6000fd5b505050508581612d389190614a46565b826000016000828254612d4b9190614a46565b90915550508154612d5c9086613b4c565b60018301556002820180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff1664010000000063ffffffff871602179055612da48585614b1e565b60028301805463ffffffff9290921668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff90921691909117905573ffffffffffffffffffffffffffffffffffffffff871660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9f602052604081205460018401548454919291612e419190614a46565b905080821115612e5e57612e59896120f88385614a59565b612e74565b81811115612e7457612e748961288c8484614a59565b8354600185015460028601546040805173ffffffffffffffffffffffffffffffffffffffff8e168152602081019490945283019190915263ffffffff8082166060840152640100000000820481166080840152680100000000000000009091041660a08201527f4263ff4bf483fdbd3d385d4777e89e099a862063a0fd57650c8ee052ff5dcce59060c00160405180910390a1505050505050505050565b612f1c82826134e0565b6106ef5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d39091529020612fca9082613c54565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b61301e82826134e0565b156106ef5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d390915290206130ca9082613c76565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b61311c613314565b8061314c575061314c7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336134e0565b611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107fd565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60007f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35b5460ff16919050565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff8083169116106132c1576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff821660048201526024016107fd565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b60007fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea7613253565b6000805b82518110156133d0576133b083828151811061335e5761335e61491c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b156133be5750600192915050565b806133c8816149df565b915050613340565b50600092915050565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001613225565b7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9d6106ef8282614ba6565b7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9e6106ef8282614ba6565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d3602052604081206111c09083613c98565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff16806111c057507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260006135948560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b60607f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c600201805461231590614a6c565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d36020526040812061071390613ca4565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff166106ef5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551613701908290614abf565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1615611eed576137bb8173ffffffffffffffffffffffffffffffffffffffff166014613cae565b6040516020016137cb9190614cc0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526107fd91600401614334565b73ffffffffffffffffffffffffffffffffffffffff8216613876576040517f560d88fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081527f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9f60205260409020547f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c9080831115613921576040517fe1166d4100000000000000000000000000000000000000000000000000000000815260048101849052602481018290526044016107fd565b73ffffffffffffffffffffffffffffffffffffffff841660008181526003840160209081526040808320878603905585548790038655518681529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b60006402540be4008263ffffffff85166139a98388614d2c565b6139b39190614d43565b6139bd9190614d2c565b6139c79190614d43565b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d879084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ef1565b613aad82826134e0565b6106ef57613ad28173ffffffffffffffffffffffffffffffffffffffff166014613cae565b613add836020613cae565b6040516020016137cb929190614d57565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261090f9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613a21565b60006402540be400613b5d83612645565b613b679085614d2c565b6111c09190614d43565b73ffffffffffffffffffffffffffffffffffffffff8216613bbe576040517fd1bb5a3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f1bdb0091f995c1d3419374bcead175ae14251e0f0aba8df7ace36571bda12e9c805482908290600090613bf3908490614a46565b909155505073ffffffffffffffffffffffffffffffffffffffff831660008181526003830160209081526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016124b3565b60006111c08373ffffffffffffffffffffffffffffffffffffffff8416613ffd565b60006111c08373ffffffffffffffffffffffffffffffffffffffff841661404c565b60006111c08383614146565b6000610713825490565b60606000613cbd836002614d2c565b613cc8906002614a46565b67ffffffffffffffff811115613ce057613ce0614757565b6040519080825280601f01601f191660200182016040528015613d0a576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613d4157613d4161491c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613da457613da461491c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613de0846002614d2c565b613deb906001614a46565b90505b6001811115613e88577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613e2c57613e2c61491c565b1a60f81b828281518110613e4257613e4261491c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613e8181614dd8565b9050613dee565b5083156111c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fd565b6000613f53826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166141709092919063ffffffff16565b805190915015610d875780806020019051810190613f719190614e0d565b610d87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107fd565b600081815260018301602052604081205461404457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610713565b506000610713565b60008181526001830160205260408120548015614135576000614070600183614a59565b855490915060009061408490600190614a59565b90508181146140e95760008660000182815481106140a4576140a461491c565b90600052602060002001549050808760000184815481106140c7576140c761491c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140fa576140fa614e2f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610713565b6000915050610713565b5092915050565b600082600001828154811061415d5761415d61491c565b9060005260206000200154905092915050565b60606139c78484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516141a49190614abf565b60006040518083038185875af1925050503d80600081146141e1576040519150601f19603f3d011682016040523d82523d6000602084013e6141e6565b606091505b50915091506141f787838387614202565b979650505050505050565b606083156142985782516000036142915773ffffffffffffffffffffffffffffffffffffffff85163b614291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107fd565b50816139c7565b6139c783838151156142ad5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd9190614334565b803563ffffffff811681146126b157600080fd5b60006020828403121561430757600080fd5b6111c0826142e1565b60005b8381101561432b578181015183820152602001614313565b50506000910152565b6020815260008251806020840152614353816040850160208701614310565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114611eed57600080fd5b80356126b181614385565b600080604083850312156143c557600080fd5b82356143d081614385565b946020939093013593505050565b60008083601f8401126143f057600080fd5b50813567ffffffffffffffff81111561440857600080fd5b6020830191508360208260051b850101111561442357600080fd5b9250929050565b6000806000806040858703121561444057600080fd5b843567ffffffffffffffff8082111561445857600080fd5b614464888389016143de565b9096509450602087013591508082111561447d57600080fd5b5061448a878288016143de565b95989497509550505050565b600080604083850312156144a957600080fd5b50508035926020909101359150565b6000806000606084860312156144cd57600080fd5b83356144d881614385565b925060208401356144e881614385565b929592945050506040919091013590565b60006020828403121561450b57600080fd5b5035919050565b6000806040838503121561452557600080fd5b82359150614535602084016142e1565b90509250929050565b6000806020838503121561455157600080fd5b823567ffffffffffffffff81111561456857600080fd5b614574858286016143de565b90969095509350505050565b6000806040838503121561459357600080fd5b8235915060208301356145a581614385565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561462b576146188385518051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015280608084015116608085015250505050565b9284019260a092909201916001016145cc565b50909695505050505050565b6000806040838503121561464a57600080fd5b823561465581614385565b9150614535602084016142e1565b60a0810161071382848051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015280608084015116608085015250505050565b600080604083850312156146bd57600080fd5b82356146c881614385565b915060208301356145a581614385565b6000602082840312156146ea57600080fd5b81356111c081614385565b6020808252825182820181905260009190848201906040850190845b8181101561462b576147448385518051825260208082015163ffffffff9081169184019190915260409182015116910152565b9284019260609290920191600101614711565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561479957600080fd5b823567ffffffffffffffff808211156147b157600080fd5b818501915085601f8301126147c557600080fd5b8135818111156147d7576147d7614757565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561481a5761481a614757565b60405291825284820192508381018501918883111561483857600080fd5b938501935b8285101561485d5761484e856143a7565b8452938501939285019261483d565b98975050505050505050565b6060810161071382848051825260208082015163ffffffff9081169184019190915260409182015116910152565b6000806000604084860312156148ac57600080fd5b83356148b781614385565b9250602084013567ffffffffffffffff808211156148d457600080fd5b818601915086601f8301126148e857600080fd5b8135818111156148f757600080fd5b87602082850101111561490957600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261498057600080fd5b83018035915067ffffffffffffffff82111561499b57600080fd5b60200191503681900382131561442357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a1057614a106149b0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b80820180821115610713576107136149b0565b81810381811115610713576107136149b0565b600181811c90821680614a8057607f821691505b602082108103614ab9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008251614ad1818460208701614310565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614b1957614b19614adb565b500690565b63ffffffff81811683821601908082111561413f5761413f6149b0565b63ffffffff82811682821603908082111561413f5761413f6149b0565b601f821115610d8757600081815260208120601f850160051c81016020861015614b7f5750805b601f850160051c820191505b81811015614b9e57828155600101614b8b565b505050505050565b815167ffffffffffffffff811115614bc057614bc0614757565b614bd481614bce8454614a6c565b84614b58565b602080601f831160018114614c275760008415614bf15750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614b9e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015614c7457888601518255948401946001909101908401614c55565b5085821015614cb057878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f53696d706c65426c61636b6c6973743a206163636f756e742000000000000000815260008251614cf8816019850160208701614310565b7f20697320626c61636b6c697374656400000000000000000000000000000000006019939091019283015250602801919050565b8082028115828204841417610713576107136149b0565b600082614d5257614d52614adb565b500490565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d8f816017850160208801614310565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614dcc816028840160208801614310565b01602801949350505050565b600081614de757614de76149b0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215614e1f57600080fd5b815180151581146111c057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220cb3ed805aa08195518b45abf67a8ec61647f2750f6e58002db1f05e9fce5bb0e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "blacklist(address,string)": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "blacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isBlacklisted(address)": {
        "details": "Returns `true` if `account` is blacklisted."
      },
      "isBlacklisted(address[])": {
        "details": "Returns `true` if any address in `accounts` is on the blacklist."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setRoleAdmin(bytes32,bytes32)": {
        "details": "Sets `adminRole` as ``role``'s admin role. Emits a {RoleAdminChanged} event."
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "unblacklist(address,string)": {
        "details": "External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}"
      },
      "unblacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256,uint256,uint32,uint32,uint32)": {
        "notice": "DEPRECATED"
      }
    },
    "kind": "user",
    "methods": {
      "getUserInfo(address)": {
        "notice": "DEPRECATED"
      },
      "getUserInfo(address,uint256)": {
        "notice": "DEPRECATED"
      },
      "getUserInfoLength(address)": {
        "notice": "DEPRECATED"
      },
      "token()": {
        "notice": "DEPRECATED"
      },
      "userInfo(address,uint256)": {
        "notice": "DEPRECATED"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6100,
        "contract": "contracts/token-locker/TokenLocker.sol:TokenLocker",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)175"
      },
      {
        "astId": 6107,
        "contract": "contracts/token-locker/TokenLocker.sol:TokenLocker",
        "label": "userInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(UserInfo)5269_storage)dyn_storage)"
      },
      {
        "astId": 6113,
        "contract": "contracts/token-locker/TokenLocker.sol:TokenLocker",
        "label": "userInfoMigrated",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UserInfo)5269_storage)dyn_storage": {
        "base": "t_struct(UserInfo)5269_storage",
        "encoding": "dynamic_array",
        "label": "struct ITokenLocker.UserInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)175": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(UserInfo)5269_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITokenLocker.UserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserInfo)5269_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(UserInfo)5269_storage": {
        "encoding": "inplace",
        "label": "struct ITokenLocker.UserInfo",
        "members": [
          {
            "astId": 5264,
            "contract": "contracts/token-locker/TokenLocker.sol:TokenLocker",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5266,
            "contract": "contracts/token-locker/TokenLocker.sol:TokenLocker",
            "label": "duration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 5268,
            "contract": "contracts/token-locker/TokenLocker.sol:TokenLocker",
            "label": "lockedAt",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}