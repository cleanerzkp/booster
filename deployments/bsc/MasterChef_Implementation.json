{
  "address": "0x8c801360936171Bcf97742365eF3009fEC5968BC",
  "abi": [
    {
      "inputs": [],
      "name": "InitializerContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsNotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "InitializerVersionAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRegular",
          "type": "bool"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "boostContract",
          "type": "address"
        }
      ],
      "name": "UpdateBoostContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "UpdateBoostMultiplier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "UpdateBurnAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "regularFarmRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "specialFarmRate",
          "type": "uint256"
        }
      ],
      "name": "UpdateCakeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accKswapPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "UpdateWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_KSWAP_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPRECATED_boostContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPRECATED_burnAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KSWAP_RATE_TOTAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTERCHEF_KSWAP_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BOOST_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATES_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isRegular",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_startBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "burnKswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getBoostMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswap",
      "outputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRegular",
          "type": "bool"
        }
      ],
      "name": "kswapPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapPerBlockToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapRateToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapRateToRegularFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapRateToSpecialFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBurnedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingKswap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accKswapPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBoostedShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegular",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinitialize2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aprManager",
          "type": "address"
        }
      ],
      "name": "reinitialize3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMasterChefAdmin.SetPoolAllocationInfo[]",
          "name": "poolAlocations",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newLastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "setPoolLastRewardBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "newLastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "setPoolLastRewardBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRegularAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSpecialAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateBoostMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_regularFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_specialFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateKswapRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accKswapPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBoostedShare",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isRegular",
              "type": "bool"
            }
          ],
          "internalType": "struct IMasterChef.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMasterChefAdmin.SetPoolAllocationInfo[]",
          "name": "poolAlocations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_regularFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_specialFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateRatesAndPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isValid",
          "type": "bool"
        }
      ],
      "name": "updateWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb70e525993afa4f578758fd97a2cd387fd632c71f522e012be957e695ac5f79c",
  "receipt": {
    "to": null,
    "from": "0x8465B78e3308bCDE4b72ab9B3CD1a51bEc954f01",
    "contractAddress": "0x8c801360936171Bcf97742365eF3009fEC5968BC",
    "transactionIndex": 40,
    "gasUsed": "4810498",
    "logsBloom": "0x
    "blockHash": "0xece30af0a8fcc5d77ec6a3fd4d3e7b8b0301826b073cadfab6a1f8be8b67143f",
    "transactionHash": "0xb70e525993afa4f578758fd97a2cd387fd632c71f522e012be957e695ac5f79c",
    "logs": [],
    "blockNumber": 23765346,
    "cumulativeGasUsed": "9994018",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "c97eefcdb3cf36be7897c36c6649caef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InitializerContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsNotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"InitializerVersionAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"UpdateBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateBoostMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateBurnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regularFarmRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFarmRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCakeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accKswapPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_KSWAP_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPRECATED_boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPRECATED_burnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KSWAP_RATE_TOTAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_KSWAP_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATES_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"burnKswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswap\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"}],\"name\":\"kswapPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapPerBlockToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapRateToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapRateToRegularFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapRateToSpecialFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingKswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accKswapPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinitialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aprManager\",\"type\":\"address\"}],\"name\":\"reinitialize3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct IMasterChefAdmin.SetPoolAllocationInfo[]\",\"name\":\"poolAlocations\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolLastRewardBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"newLastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolLastRewardBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRegularAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpecialAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateKswapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accKswapPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct IMasterChef.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct IMasterChefAdmin.SetPoolAllocationInfo[]\",\"name\":\"poolAlocations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateRatesAndPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,bool,uint256,bool)\":{\"params\":{\"_allocPoint\":\"Number of allocation points for the new pool.\",\"_isRegular\":\"Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\",\"_lpToken\":\"Address of the LP BEP-20 token.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation. only for KSWAP distributions within Kyoto Swap products.\"}},\"blacklist(address,string)\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"blacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"burnKswap(bool)\":{\"params\":{\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"deposit(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to deposit.\",\"_pid\":\"The id of the pool. See `poolInfo`.\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\"}},\"getBoostMultiplier(address,uint256)\":{\"params\":{\"_pid\":\"The pool id.\",\"_user\":\"The user address.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isBlacklisted(address)\":{\"details\":\"Returns `true` if `account` is blacklisted.\"},\"isBlacklisted(address[])\":{\"details\":\"Returns `true` if any address in `accounts` is on the blacklist.\"},\"kswapPerBlock(bool)\":{\"params\":{\"_isRegular\":\"If the pool belongs to regular or special.\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingKswap(uint256,address)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\",\"_user\":\"Address of the user.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"set((uint256,uint256)[],bool)\":{\"params\":{\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\",\"poolAlocations\":\"List of SetPoolAllocationInfo to update\"}},\"set(uint256,uint256,bool)\":{\"params\":{\"_allocPoint\":\"New number of allocation points for the pool.\",\"_pid\":\"The id of the pool. See `poolInfo`.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"setPoolLastRewardBlock(uint256,uint256)\":{\"params\":{\"_pid\":\"The pool id to update.\",\"newLastRewardBlock\":\"The new value.\"}},\"setPoolLastRewardBlock(uint256[],uint256)\":{\"params\":{\"_pids\":\"The list of pool ids to update.\",\"newLastRewardBlock\":\"The new value.\"}},\"setRoleAdmin(bytes32,bytes32)\":{\"details\":\"Sets `adminRole` as ``role``'s admin role. Emits a {RoleAdminChanged} event.\"},\"unblacklist(address,string)\":{\"details\":\"External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}\"},\"unblacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - The contract must be paused.\"},\"updateBoostMultiplier(address,uint256,uint256)\":{\"params\":{\"_newMultiplier\":\"New boost multiplier.\",\"_pid\":\"The pool id for the boost factor updates.\",\"_user\":\"The user address for boost factor updates.\"}},\"updateKswapRate(uint256,uint256,uint256,bool)\":{\"params\":{\"_burnRate\":\"The % of KSWAP to burn each block.\",\"_regularFarmRate\":\"The % of KSWAP to regular pools each block.\",\"_specialFarmRate\":\"The % of KSWAP to special pools each block.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"updateRatesAndPools((uint256,uint256)[],uint256,uint256,uint256,bool)\":{\"params\":{\"_burnRate\":\"The % of KSWAP to burn each block.\",\"_regularFarmRate\":\"The % of KSWAP to regular pools each block.\",\"_specialFarmRate\":\"The % of KSWAP to special pools each block.\",\"poolAlocations\":\"List of SetPoolAllocationInfo to update\"}},\"updateWhiteList(address,bool)\":{\"params\":{\"_isValid\":\"The flag for valid or invalid.\",\"_user\":\"The address to be updated.\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to withdraw.\",\"_pid\":\"The id of the pool. See `poolInfo`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BOOST_PRECISION()\":{\"notice\":\"Basic boost factor, none boosted user's boost factor\"},\"DEPRECATED_boostContract()\":{\"notice\":\"The contract handles the share boosts.\"},\"DEPRECATED_burnAdmin()\":{\"notice\":\"The only address can withdraw all the burn KSWAP.\"},\"KSWAP_RATE_TOTAL_PRECISION()\":{\"notice\":\"total kswap rate = toBurn + toRegular + toSpecial\"},\"MASTERCHEF_KSWAP_PER_BLOCK()\":{\"notice\":\"40 KSWAP per block in MC\"},\"MAX_BOOST_PRECISION()\":{\"notice\":\"Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\"},\"add(uint256,address,bool,uint256,bool)\":{\"notice\":\"Add a new pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"burnKswap(bool)\":{\"notice\":\"Send KSWAP pending for burn to `burnAdmin`.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to pool.\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about the rewards. EMERGENCY ONLY.\"},\"getBoostMultiplier(address,uint256)\":{\"notice\":\"Get user boost multiplier for specific pool id.\"},\"kswapPerBlock(bool)\":{\"notice\":\"Calculates and returns the `amount` of KSWAP per block.\"},\"kswapPerBlockToBurn()\":{\"notice\":\"Calculates and returns the `amount` of KSWAP per block to burn.\"},\"kswapRateToBurn()\":{\"notice\":\"The last block number of KSWAP burn action being executed.\"},\"lpToken(uint256)\":{\"notice\":\"Address of the LP token for each MCV2 pool.\"},\"massUpdatePools()\":{\"notice\":\"Update kswap reward for all the active pools. Be careful of gas spending!\"},\"pendingKswap(uint256,address)\":{\"notice\":\"View function for checking pending KSWAP rewards.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each MCV2 pool.\"},\"poolLength()\":{\"notice\":\"Returns the number of MC pools.\"},\"set((uint256,uint256)[],bool)\":{\"notice\":\"Update the given pool's KSWAP allocation point. Can only be called by the owner.\"},\"set(uint256,uint256,bool)\":{\"notice\":\"Update the given pool's KSWAP allocation point. Can only be called by the owner.\"},\"setPoolLastRewardBlock(uint256,uint256)\":{\"notice\":\"Updates the lastRewardBlock for a pool.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`.\"},\"setPoolLastRewardBlock(uint256[],uint256)\":{\"notice\":\"Updates the lastRewardBlock for a list of pools.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`.\"},\"setTreasuryAddress(address)\":{\"notice\":\"Update the treasury address.\"},\"totalRegularAllocPoint()\":{\"notice\":\"Total regular allocation points. Must be the sum of all regular pools' allocation points.\"},\"totalSpecialAllocPoint()\":{\"notice\":\"Total special allocation points. Must be the sum of all special pools' allocation points.\"},\"updateBoostMultiplier(address,uint256,uint256)\":{\"notice\":\"Update user boost factor.\"},\"updateKswapRate(uint256,uint256,uint256,bool)\":{\"notice\":\"Update the % of KSWAP distributions for burn, regular pools and special pools.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables for the given pool.\"},\"updateRatesAndPools((uint256,uint256)[],uint256,uint256,uint256,bool)\":{\"notice\":\"Updates the given pool's allocations and the pool rates.\"},\"updateWhiteList(address,bool)\":{\"notice\":\"Update whitelisted addresses for special pools.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each pool user.\"},\"whiteList(address)\":{\"notice\":\"The whitelist of addresses allowed to deposit in special pools.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/AccessControlFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibAccessControl} from \\\"./LibAccessControl.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ncontract AccessControlFacet is IAccessControlEnumerable {\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibAccessControl.hasRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return LibAccessControl.getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external {\\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\\n\\n        LibAccessControl.setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\\n\\n        LibAccessControl.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\\n\\n        LibAccessControl.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        external\\n        virtual\\n        override\\n    {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            account == msg.sender,\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        LibAccessControl.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return LibAccessControl.getRoleMember(role, index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256) {\\n        return LibAccessControl.getRoleMemberCount(role);\\n    }\\n}\\n\",\"keccak256\":\"0x164bb42840caa7ac788128a403aec18d7b6d88694d6ac29dfe6e235c28769106\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin AccessControlEnumerable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControl\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControlEnumerable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\\n */\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Storage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.access.LibAccessControl\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _storage().roles[role].members[account] ||\\n            _storage().roles[getRoleAdmin(role)].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * @notice This function is identical to {checkRole} but is following the naming convention.\\n     */\\n    function enforceRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return _storage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _storage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _storage().roles[role].members[account] = true;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].add(account);\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _storage().roles[role].members[account] = false;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].remove(account);\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return _storage().roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return _storage().roleMembers[role].length();\\n    }\\n}\\n\",\"keccak256\":\"0x4ed5e921ffcea325dd43880c20ad89149bf959132eb32a137efd94dc645d51bf\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library with a set of default roles to use across different other contracts.\\n */\\nlibrary LibRoles {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant BLACKLIST_MANAGER_ROLE =\\n        keccak256(\\\"BLACKLIST_MANAGER_ROLE\\\");\\n    bytes32 public constant PAUSE_MANAGER_ROLE =\\n        keccak256(\\\"PAUSE_MANAGER_ROLE\\\");\\n    bytes32 public constant STABLE_PRICE_MANAGER_ROLE =\\n        keccak256(\\\"STABLE_PRICE_MANAGER_ROLE\\\");\\n    bytes32 public constant TESTER_ROLE = keccak256(\\\"TESTER_ROLE\\\");\\n    bytes32 public constant TOKEN_TAXES_MANAGER =\\n        keccak256(\\\"TOKEN_TAXES_MANAGER\\\");\\n    bytes32 public constant TOKEN_REFLECTION_MANAGER =\\n        keccak256(\\\"TOKEN_REFLECTION_MANAGER\\\");\\n}\\n\",\"keccak256\":\"0x216d4885ce42ca57b0ee30117078d724af39c4aaf8d114c1253ccf29a3e5a6ef\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/ISimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/*\\n * @dev External interface of a simple blacklist.\\n */\\ninterface ISimpleBlacklist {\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Check if `account` is on the blacklist.\\n     */\\n    function isBlacklisted(address account) external view returns (bool);\\n\\n    /*\\n     * @dev Check if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        returns (bool);\\n\\n    /*\\n     * @dev Adds `account` to the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {Blacklisted} event, if `account` was added to the blacklist.\\n     */\\n    function blacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Adds `accounts` to the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {Blacklisted} events, for each account that was added to the blacklist\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n\\n    /*\\n     * @dev Removes `account` from the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {UnBlacklisted} event, if `account` was removed from the blacklist\\n     */\\n    function unblacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Removes multiple `accounts` from the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {UnBlacklisted} events, for each account that was removed from the blacklist\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n}\\n\",\"keccak256\":\"0xa8e74fdac0740629f464bfc2f7a6a54ee804e5ab98b0fe35e4d36c27889913a0\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/LibSimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibSimpleBlacklist {\\n    struct Storage {\\n        mapping(address => bool) accounts;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.blacklist.LibSimpleBlacklist\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is blacklisted.\\n     */\\n    function enforceNotBlacklisted() internal view {\\n        checkBlacklisted(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     */\\n    function enforceNotBlacklisted(address account) internal view {\\n        checkBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account) internal view returns (bool) {\\n        return _storage().accounts[account];\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            if (isBlacklisted(accounts[index])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^SimpleBlacklist: account (0x[0-9a-f]{40}) is blacklisted$/\\n     */\\n    function checkBlacklisted(address account) internal view {\\n        if (isBlacklisted(account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"SimpleBlacklist: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is blacklisted\\\"\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds `account` to the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function blacklist(address account, string memory reason) internal {\\n        if (!isBlacklisted(account)) {\\n            _storage().accounts[account] = true;\\n            emit Blacklisted(account, reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes `account` from the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function unblacklist(address account, string memory reason) internal {\\n        if (isBlacklisted(account)) {\\n            _storage().accounts[account] = false;\\n            emit UnBlacklisted(account, reason);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc32cb035e0ff42973d8637b736f3c51eacbfac1db557b1dae3cd583194d4015c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibSimpleBlacklist} from \\\"./LibSimpleBlacklist.sol\\\";\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Contract module that exposes athe interface for a simple blacklist.\\n */\\ncontract SimpleBlacklistFacet is ISimpleBlacklist {\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.blacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.blacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.blacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev External function to remove `account` from the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-unblacklist}\\n     *\\n     */\\n    function unblacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.unblacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.unblacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.unblacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(accounts);\\n    }\\n}\\n\",\"keccak256\":\"0x0c9ef37a0a0c9024300f286d379229e9805d7ae01feea1eba6f06249d0a0ad54\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Simple interface for pausable contracts.\\n */\\ninterface IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x957a95f5c424cda473f53fcec5fe3f01cd5a650bb11e2281c0314fa3fe8c2dc6\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin Pausable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n */\\nlibrary LibPausable {\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.pausable.LibPausable\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused() internal view {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused(address address1, address address2)\\n        internal\\n        view\\n    {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address1) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address2),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when not paused.\\n     */\\n    function enforcePaused() internal view {\\n        require(\\n            paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: not paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() internal view returns (bool) {\\n        return _storage().paused;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function pause() internal {\\n        _storage().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function unpause() internal {\\n        _storage().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3c0dca0212cf1994b4005ace39c6a29bb2e258f12d5845eca9cb3608f90b8a1c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IPausable} from \\\"./IPausable.sol\\\";\\nimport {LibPausable} from \\\"./LibPausable.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\ncontract PausableFacet is IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool) {\\n        return LibPausable.paused();\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforceNotPaused();\\n\\n        LibPausable.pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforcePaused();\\n\\n        LibPausable.unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x3d7ad0ce3f15bcd9d9b30580037448ac57eebfd4f60303da4e348fe2811a12df\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/IReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IReentrancyGuard {\\n    error ReentrancyGuardReentrantCall();\\n}\\n\",\"keccak256\":\"0xe43f60aa79117012c1e307acbbbc078f153e33d6c546bbf94c242dc4b0eae168\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/LibReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibReentrancyGuard {\\n    uint256 internal constant NOT_ENTERED = 1;\\n    uint256 internal constant ENTERED = 2;\\n\\n    struct Storage {\\n        uint256 status;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarlabs.modules.reentrancy-guard.LibReentrancyGuard\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    function isEntered() internal view returns (bool) {\\n        return _storage().status == ENTERED;\\n    }\\n\\n    function enter() internal {\\n        _storage().status = ENTERED;\\n    }\\n\\n    function exit() internal {\\n        _storage().status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xaae9840e5d5ce8f5d1a56c5dd03548c2cea6e3e90b28caf177b5963b87d439be\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IReentrancyGuard} from \\\"./IReentrancyGuard.sol\\\";\\nimport {LibReentrancyGuard} from \\\"./LibReentrancyGuard.sol\\\";\\n\\nabstract contract ReentrancyGuard is IReentrancyGuard {\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, isEntered will be false\\n        if (LibReentrancyGuard.isEntered()) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        LibReentrancyGuard.enter();\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        LibReentrancyGuard.exit();\\n    }\\n}\\n\",\"keccak256\":\"0xf809444ff3b71695a5442412b5a3cdbb747f818de85fc99517c0d2292644b7bc\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/IInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IInitializer {\\n    error InitializerContractIsInitializing();\\n    error InitializerContractIsNotInitializing();\\n    error InitializerContractAlreadyInitialized();\\n    error InitializerVersionAlreadyInitialized(uint8 version);\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n}\\n\",\"keccak256\":\"0x08e2f2250d1a61bf4cfb07b788cdf0f1e838c068c72f5bb6acc9a20b5acab88c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\nimport {LibInitializer} from \\\"./LibInitializer.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Initializer is IInitializer {\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !LibInitializer.isInitializing();\\n\\n        if (\\n            (isTopLevelCall && !LibInitializer.isInitialized(1)) ||\\n            (!Address.isContract(address(this)) &&\\n                LibInitializer.getInitializedVersion() == 1)\\n        ) {\\n            LibInitializer.setInitialized(1);\\n\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(true);\\n            }\\n            _;\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(false);\\n                emit Initialized(1);\\n            }\\n        } else {\\n            revert InitializerContractAlreadyInitialized();\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        if (\\n            LibInitializer.isInitializing() ||\\n            LibInitializer.isInitialized(version)\\n        ) {\\n            revert InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        LibInitializer.setInitialized(version);\\n        LibInitializer.setInitializing(true);\\n        _;\\n        LibInitializer.setInitializing(false);\\n        emit Initialized(version);\\n    }\\n}\\n\",\"keccak256\":\"0x58e2c1e9b0297362c5f08b5a8dbc3b0851744def47e14438dfe377dfcedd4ed8\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/LibInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\n\\nlibrary LibInitializer {\\n    struct Storage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint8 initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool initializing;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.utils.initializer.LibInitializer\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    function enforceIsInitializing() internal view {\\n        if (!isInitializing()) {\\n            revert IInitializer.InitializerContractIsNotInitializing();\\n        }\\n    }\\n\\n    function isInitializing() internal view returns (bool) {\\n        return _storage().initializing;\\n    }\\n\\n    function setInitializing(bool value) internal {\\n        _storage().initializing = value;\\n    }\\n\\n    function isInitialized() internal view returns (bool) {\\n        return isInitialized(1);\\n    }\\n\\n    function isInitialized(uint8 version) internal view returns (bool) {\\n        return _storage().initialized >= version;\\n    }\\n\\n    function getInitializedVersion() internal view returns (uint8) {\\n        return _storage().initialized;\\n    }\\n\\n    function setInitialized(uint8 version) internal {\\n        if (isInitialized(version)) {\\n            revert IInitializer.InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        _storage().initialized = version;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function disable() internal {\\n        if (isInitializing()) {\\n            revert IInitializer.InitializerContractIsInitializing();\\n        }\\n\\n        if (!isInitialized(type(uint8).max)) {\\n            setInitialized(type(uint8).max);\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd626fbde2606a1d7a0f8a188eaab3e8d8e3056075f11511b03e6ea3f24f972\",\"license\":\"MIT\"},\"contracts/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IMasterChef} from \\\"./interfaces/IMasterChef.sol\\\";\\nimport {IMasterChefAdmin} from \\\"./interfaces/IMasterChefAdmin.sol\\\";\\nimport {IERC20Mintable} from \\\"./interfaces/IERC20Mintable.sol\\\";\\nimport {Initializer} from \\\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\\\";\\nimport {ReentrancyGuard} from \\\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/ReentrancyGuard.sol\\\";\\nimport {PausableFacet, LibPausable} from \\\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\\\";\\nimport {SimpleBlacklistFacet, LibSimpleBlacklist} from \\\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\\\";\\nimport {AccessControlFacet, LibAccessControl} from \\\"@solarprotocol/solidity-modules/contracts/modules/access/AccessControlFacet.sol\\\";\\nimport {LibRoles} from \\\"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract MasterChef is\\n    IMasterChef,\\n    IMasterChefAdmin,\\n    Initializer,\\n    ReentrancyGuard,\\n    PausableFacet,\\n    SimpleBlacklistFacet,\\n    AccessControlFacet\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Mintable;\\n\\n    bytes32 public constant RATES_MANAGER_ROLE =\\n        keccak256(\\\"RATES_MANAGER_ROLE\\\");\\n    bytes32 public constant BURN_MANAGER_ROLE = keccak256(\\\"BURN_MANAGER_ROLE\\\");\\n    bytes32 public constant BOOST_MANAGER_ROLE =\\n        keccak256(\\\"BOOST_MANAGER_ROLE\\\");\\n\\n    IERC20Mintable public kswap;\\n\\n    // Dev address.\\n    address public treasury;\\n\\n    /// @notice The only address can withdraw all the burn KSWAP.\\n    address public DEPRECATED_burnAdmin; // We keep it here,\\n    /// @notice The contract handles the share boosts.\\n    address public DEPRECATED_boostContract;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo[] public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    IERC20[] public lpToken;\\n\\n    /// @notice Info of each pool user.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\n    mapping(address => bool) public whiteList;\\n\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\\n    uint256 public totalRegularAllocPoint;\\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\\n    uint256 public totalSpecialAllocPoint;\\n    ///  @notice 40 KSWAP per block in MC\\n    uint256 public constant MASTERCHEF_KSWAP_PER_BLOCK = 40 * 1e18;\\n    uint256 public constant ACC_KSWAP_PRECISION = 1e18;\\n\\n    /// @notice Basic boost factor, none boosted user's boost factor\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\n    /// @notice total kswap rate = toBurn + toRegular + toSpecial\\n    uint256 public constant KSWAP_RATE_TOTAL_PRECISION = 1e12;\\n    /// @notice The last block number of KSWAP burn action being executed.\\n\\n    uint256 public kswapRateToBurn;\\n    uint256 public kswapRateToRegularFarm;\\n    uint256 public kswapRateToSpecialFarm;\\n\\n    uint256 public lastBurnedBlock;\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _isRegular,\\n        uint256 _startBlockNumber,\\n        bool _withUpdate\\n    ) external {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        _add(_allocPoint, _lpToken, _isRegular, _startBlockNumber, _withUpdate);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function set(\\n        SetPoolAllocationInfo[] calldata poolAlocations,\\n        bool _withUpdate\\n    ) external {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 index = 0;\\n        uint256 poolAlocationsLength = poolAlocations.length;\\n\\n        while (index < poolAlocationsLength) {\\n            _set(poolAlocations[index].pid, poolAlocations[index].allocPoint);\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        _set(_pid, _allocPoint);\\n    }\\n\\n    function updateRatesAndPools(\\n        SetPoolAllocationInfo[] calldata poolAlocations,\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external {\\n        LibAccessControl.enforceRole(RATES_MANAGER_ROLE);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 index = 0;\\n        uint256 poolAlocationsLength = poolAlocations.length;\\n\\n        while (index < poolAlocationsLength) {\\n            _set(poolAlocations[index].pid, poolAlocations[index].allocPoint);\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        _updateKswapRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function pendingKswap(\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accKswapPerShare = pool.accKswapPerShare;\\n        uint256 lpSupply = pool.totalBoostedShare;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n\\n            uint256 kswapReward = multiplier\\n                .mul(kswapPerBlock(pool.isRegular))\\n                .mul(pool.allocPoint)\\n                .div(\\n                    (\\n                        pool.isRegular\\n                            ? totalRegularAllocPoint\\n                            : totalSpecialAllocPoint\\n                    )\\n                );\\n            accKswapPerShare = accKswapPerShare.add(\\n                kswapReward.mul(ACC_KSWAP_PRECISION).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 boostedAmount = user\\n            .amount\\n            .mul(getBoostMultiplier(_user, _pid))\\n            .div(BOOST_PRECISION);\\n        return\\n            boostedAmount.mul(accKswapPerShare).div(ACC_KSWAP_PRECISION).sub(\\n                user.rewardDebt\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo memory pool = poolInfo[pid];\\n            if (pool.allocPoint != 0) {\\n                updatePool(pid);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function kswapPerBlock(\\n        bool _isRegular\\n    ) public view returns (uint256 amount) {\\n        if (_isRegular) {\\n            amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToRegularFarm).div(\\n                KSWAP_RATE_TOTAL_PRECISION\\n            );\\n        } else {\\n            amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToSpecialFarm).div(\\n                KSWAP_RATE_TOTAL_PRECISION\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function kswapPerBlockToBurn() public view returns (uint256 amount) {\\n        amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToBurn).div(\\n            KSWAP_RATE_TOTAL_PRECISION\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.totalBoostedShare;\\n            uint256 totalAllocPoint = (\\n                pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint\\n            );\\n\\n            if (lpSupply > 0 && totalAllocPoint > 0) {\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n                uint256 kswapReward = multiplier\\n                    .mul(kswapPerBlock(pool.isRegular))\\n                    .mul(pool.allocPoint)\\n                    .div(totalAllocPoint);\\n                pool.accKswapPerShare = pool.accKswapPerShare.add(\\n                    (kswapReward.mul(ACC_KSWAP_PRECISION).div(lpSupply))\\n                );\\n                kswap.mint(treasury, kswapReward.div(10));\\n                kswap.mint(address(this), kswapReward);\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n            emit UpdatePool(\\n                _pid,\\n                pool.lastRewardBlock,\\n                lpSupply,\\n                pool.accKswapPerShare\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // solhint-disable-next-line reason-string\\n        require(\\n            pool.isRegular || whiteList[msg.sender],\\n            \\\"MasterChef: The address is not available to deposit in this pool\\\"\\n        );\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        if (user.amount > 0) {\\n            settlePendingKswap(msg.sender, _pid, multiplier);\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\n            user.amount = user.amount.add(_amount);\\n\\n            // Update total boosted share.\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(\\n                _amount.mul(multiplier).div(BOOST_PRECISION)\\n            );\\n        }\\n\\n        user.rewardDebt = user\\n            .amount\\n            .mul(multiplier)\\n            .div(BOOST_PRECISION)\\n            .mul(pool.accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        poolInfo[_pid] = pool;\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient\\\");\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        settlePendingKswap(msg.sender, _pid, multiplier);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt = user\\n            .amount\\n            .mul(multiplier)\\n            .div(BOOST_PRECISION)\\n            .mul(pool.accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\n        );\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        uint256 boostedAmount = amount\\n            .mul(getBoostMultiplier(msg.sender, _pid))\\n            .div(BOOST_PRECISION);\\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount\\n            ? pool.totalBoostedShare.sub(boostedAmount)\\n            : 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function burnKswap(bool _withUpdate) public {\\n        LibAccessControl.enforceRole(BURN_MANAGER_ROLE);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\n        uint256 pendingKswapToBurn = multiplier.mul(kswapPerBlockToBurn());\\n\\n        // SafeTransfer KSWAP\\n        _safeTransfer(_getOwner(), pendingKswapToBurn);\\n        lastBurnedBlock = block.number;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateKswapRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external {\\n        LibAccessControl.enforceRole(RATES_MANAGER_ROLE);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        _updateKswapRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateWhiteList(address _user, bool _isValid) external {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _user != address(0),\\n            \\\"MasterChef: The white list address must be valid\\\"\\n        );\\n\\n        whiteList[_user] = _isValid;\\n        emit UpdateWhiteList(_user, _isValid);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external nonReentrant {\\n        LibAccessControl.enforceRole(BOOST_MANAGER_ROLE);\\n\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _user != address(0),\\n            \\\"MasterChef: The user address must be valid\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            poolInfo[_pid].isRegular,\\n            \\\"MasterChef: Only regular farm could be boosted\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newMultiplier >= BOOST_PRECISION &&\\n                _newMultiplier <= MAX_BOOST_PRECISION,\\n            \\\"MasterChef: Invalid new boost multiplier\\\"\\n        );\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\n        settlePendingKswap(_user, _pid, prevMultiplier);\\n\\n        user.rewardDebt = user\\n            .amount\\n            .mul(_newMultiplier)\\n            .div(BOOST_PRECISION)\\n            .mul(pool.accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        pool.totalBoostedShare = pool\\n            .totalBoostedShare\\n            .sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION))\\n            .add(user.amount.mul(_newMultiplier).div(BOOST_PRECISION));\\n        poolInfo[_pid] = pool;\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\n\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function getBoostMultiplier(\\n        address _user,\\n        uint256 _pid\\n    ) public view returns (uint256) {\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function setTreasuryAddress(address _treasury) external {\\n        require(msg.sender == treasury, \\\"dev: wut?\\\");\\n        treasury = _treasury;\\n        emit SetTreasuryAddress(msg.sender, _treasury);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256 _pid,\\n        uint256 newLastRewardBlock\\n    ) public {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        uint256 oldLastRewardBlock = poolInfo[_pid].lastRewardBlock;\\n        require(\\n            oldLastRewardBlock > block.number &&\\n                newLastRewardBlock >= block.number,\\n            \\\"Can't modify history\\\"\\n        );\\n        poolInfo[_pid].lastRewardBlock = newLastRewardBlock;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256[] memory _pids,\\n        uint256 newLastRewardBlock\\n    ) external {\\n        LibAccessControl.enforceRole(LibRoles.MANAGER_ROLE);\\n\\n        if (newLastRewardBlock == 0) {\\n            newLastRewardBlock = block.number + 200;\\n        }\\n\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            setPoolLastRewardBlock(_pids[index], newLastRewardBlock);\\n        }\\n    }\\n\\n    /// @notice Settles, distribute the pending KSWAP rewards for given user.\\n    /// @param _user The user address for settling rewards.\\n    /// @param _pid The pool id.\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\n    function settlePendingKswap(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _boostMultiplier\\n    ) internal {\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(\\n            BOOST_PRECISION\\n        );\\n        uint256 accKswap = boostedAmount\\n            .mul(poolInfo[_pid].accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        uint256 pending = accKswap.sub(user.rewardDebt);\\n        // SafeTransfer KSWAP\\n        _safeTransfer(_user, pending);\\n    }\\n\\n    /**\\n     * @notice Add a new pool. Can only be called by the owner.\\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n     * @param _allocPoint Number of allocation points for the new pool.\\n     * @param _lpToken Address of the LP BEP-20 token.\\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     * only for KSWAP distributions within Kyoto Swap products.\\n     */\\n    function _add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _isRegular,\\n        uint256 _startBlockNumber,\\n        bool _withUpdate\\n    ) internal {\\n        require(_lpToken.balanceOf(address(this)) >= 0, \\\"None BEP20 tokens\\\");\\n        // stake KSWAP token will cause staked token and reward token mixed up,\\n        // may cause staked tokens withdraw as reward token,never do it.\\n        // solhint-disable-next-line reason-string\\n        require(_lpToken != kswap, \\\"KSWAP token can't be added to farm pools\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (_isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\n        }\\n        lpToken.push(_lpToken);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlockNumber > block.number\\n                    ? _startBlockNumber\\n                    : (block.number + 200),\\n                accKswapPerShare: 0,\\n                isRegular: _isRegular,\\n                totalBoostedShare: 0\\n            })\\n        );\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\n    }\\n\\n    /**\\n     * @notice Update the given pool's KSWAP allocation point. Can only be called by the owner.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _allocPoint New number of allocation points for the pool.\\n     */\\n    function _set(uint256 _pid, uint256 _allocPoint) internal {\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\n        updatePool(_pid);\\n\\n        if (poolInfo[_pid].isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint\\n                .sub(poolInfo[_pid].allocPoint)\\n                .add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint\\n                .sub(poolInfo[_pid].allocPoint)\\n                .add(_allocPoint);\\n        }\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit SetPool(_pid, _allocPoint);\\n    }\\n\\n    /**\\n     * @notice Update the % of KSWAP distributions for burn, regular pools and special pools.\\n     *\\n     * @param _burnRate The % of KSWAP to burn each block.\\n     * @param _regularFarmRate The % of KSWAP to regular pools each block.\\n     * @param _specialFarmRate The % of KSWAP to special pools each block.\\n     */\\n    function _updateKswapRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate\\n    ) internal {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\\n            \\\"MasterChef: Kswap rate must be greater than 0\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) ==\\n                KSWAP_RATE_TOTAL_PRECISION,\\n            \\\"MasterChef: Total rate must be 1e12\\\"\\n        );\\n        // burn kswap base on old burn kswap rate\\n        burnKswap(false);\\n\\n        kswapRateToBurn = _burnRate;\\n        kswapRateToRegularFarm = _regularFarmRate;\\n        kswapRateToSpecialFarm = _specialFarmRate;\\n\\n        emit UpdateCakeRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /// @notice Safe Transfer KSWAP.\\n    /// @param _to The KSWAP receiver address.\\n    /// @param _amount transfer KSWAP amounts.\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            uint256 balance = kswap.balanceOf(address(this));\\n            if (balance < _amount) {\\n                _amount = balance;\\n            }\\n            kswap.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _getOwner(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _getOwner() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n\\n    function reinitialize3(\\n        address aprManager\\n    ) external onlyOwner reinitializer(3) {\\n        address owner = _getOwner();\\n\\n        require(msg.sender == owner, \\\"Only owner can initialize\\\");\\n\\n        LibAccessControl.grantRole(BURN_MANAGER_ROLE, owner);\\n        LibAccessControl.grantRole(BOOST_MANAGER_ROLE, owner);\\n        LibAccessControl.grantRole(BURN_MANAGER_ROLE, aprManager);\\n        LibAccessControl.grantRole(RATES_MANAGER_ROLE, aprManager);\\n    }\\n\\n    function reinitialize2() external onlyOwner reinitializer(2) {\\n        address owner = _getOwner();\\n\\n        LibAccessControl.grantRole(LibRoles.DEFAULT_ADMIN_ROLE, owner);\\n        LibAccessControl.grantRole(LibRoles.MANAGER_ROLE, owner);\\n        LibAccessControl.grantRole(RATES_MANAGER_ROLE, owner);\\n    }\\n\\n    /*function initialize(\\n        IERC20Mintable kswap_,\\n        address treasury_,\\n        address burnAdmin_,\\n        AddNewPoolInfo[] calldata newPools\\n    ) external onlyOwner initializer {\\n        kswap = kswap_;\\n        treasury = treasury_;\\n        burnAdmin = burnAdmin_;\\n\\n        /// @notice KSWAP distribute % for burn\\n        kswapRateToBurn = 989202815829;\\n        /// @notice KSWAP distribute % for regular farm pool\\n        kswapRateToRegularFarm = 10797184170;\\n        /// @notice KSWAP distribute % for special pools\\n        kswapRateToSpecialFarm = 1;\\n\\n        uint256 index = 0;\\n        uint256 newPoolsLength = newPools.length;\\n\\n        while (index < newPoolsLength) {\\n            _add(\\n                newPools[index].allocPoint,\\n                newPools[index].lpToken,\\n                newPools[index].isRegular,\\n                newPools[index].startBlockNumber,\\n                false\\n            );\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        LibPausable.unpause();\\n    }/**/\\n}\\n\",\"keccak256\":\"0x092b7518e8467e4a74e2f4d79f07f0eec7aa85a1f16e9e201af7f1d9b29b357a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IERC20Mintable is IERC20, IERC20Metadata {\\n    function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x67301cdb95ceb5c95ba6aebe3c3e4a541e9424b80e8c3b97fde5b49da013c84c\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChef {\\n    /**\\n     * @notice Info of each MC user.\\n     * `amount` LP token amount the user has provided.\\n     * `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\\n     *\\n     * We do some fancy math here. Basically, any point in time, the amount of KSWAP\\n     * entitled to a user but is pending to be distributed is:\\n     *\\n     *   pending reward = (user share * pool.accKswapPerShare) - user.rewardDebt\\n     *\\n     *   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n     *   1. The pool's `accKswapPerShare` (and `lastRewardBlock`) gets updated.\\n     *   2. User receives the pending reward sent to his/her address.\\n     *   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\\n     *   4. User's `rewardDebt` gets updated.\\n     */\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 boostMultiplier;\\n    }\\n\\n    /**\\n     * @notice Info of each MC pool.\\n     * `allocPoint` The amount of allocation points assigned to the pool.\\n     *     Also known as the amount of \\\"multipliers\\\". Combined with `totalXAllocPoint`, it defines the % of\\n     *     KSWAP rewards each pool gets.\\n     * `accKswapPerShare` Accumulated KSWAPs per share, times 1e12.\\n     * `lastRewardBlock` Last block number that pool update action is executed.\\n     * `isRegular` The flag to set pool is regular or special. See below:\\n     *     In MasterChef farms are \\\"regular pools\\\". \\\"special pools\\\", which use a different sets of\\n     *     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\\n     *     the KSWAP rewards to all the Kyoto Swap products.\\n     * `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\\n     */\\n    struct PoolInfo {\\n        uint256 accKswapPerShare;\\n        uint256 lastRewardBlock;\\n        uint256 allocPoint;\\n        uint256 totalBoostedShare;\\n        bool isRegular;\\n    }\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Returns the number of MC pools.\\n     */\\n    function poolLength() external view returns (uint256 pools);\\n\\n    /**\\n     * @notice View function for checking pending KSWAP rewards.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _user Address of the user.\\n     */\\n    function pendingKswap(\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Update kswap reward for all the active pools.\\n     * Be careful of gas spending!\\n     */\\n    function massUpdatePools() external;\\n\\n    /**\\n     * @notice Calculates and returns the `amount` of KSWAP per block.\\n     *\\n     * @param _isRegular If the pool belongs to regular or special.\\n     */\\n    function kswapPerBlock(\\n        bool _isRegular\\n    ) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Calculates and returns the `amount` of KSWAP per block to burn.\\n     */\\n    function kswapPerBlockToBurn() external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Update reward variables for the given pool.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @return pool Returns the pool that was updated.\\n     */\\n    function updatePool(uint256 _pid) external returns (PoolInfo memory pool);\\n\\n    /**\\n     * @notice Deposit LP tokens to pool.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _amount Amount of LP tokens to deposit.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw LP tokens from pool.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _amount Amount of LP tokens to withdraw.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     */\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    /**\\n     * @notice Get user boost multiplier for specific pool id.\\n     *\\n     * @param _user The user address.\\n     * @param _pid The pool id.\\n     */\\n    function getBoostMultiplier(\\n        address _user,\\n        uint256 _pid\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d38a01bd8c981fc85f2362229164f59e4ae0d8b5779987c39b18c43755b6dee\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IMasterChef} from \\\"./IMasterChef.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefAdmin {\\n    struct AddNewPoolInfo {\\n        IERC20 lpToken;\\n        uint256 allocPoint;\\n        uint256 startBlockNumber;\\n        bool isRegular;\\n    }\\n\\n    struct SetPoolAllocationInfo {\\n        uint256 pid;\\n        uint256 allocPoint;\\n    }\\n\\n    event AddPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        bool isRegular\\n    );\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardBlock,\\n        uint256 lpSupply,\\n        uint256 accKswapPerShare\\n    );\\n\\n    event UpdateCakeRate(\\n        uint256 burnRate,\\n        uint256 regularFarmRate,\\n        uint256 specialFarmRate\\n    );\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\n    event UpdateWhiteList(address indexed user, bool isValid);\\n    event UpdateBoostContract(address indexed boostContract);\\n    event UpdateBoostMultiplier(\\n        address indexed user,\\n        uint256 pid,\\n        uint256 oldMultiplier,\\n        uint256 newMultiplier\\n    );\\n    event SetTreasuryAddress(address indexed user, address treasury);\\n\\n    /**\\n     * @notice Add a new pool. Can only be called by the owner.\\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n     * @param _allocPoint Number of allocation points for the new pool.\\n     * @param _lpToken Address of the LP BEP-20 token.\\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     * only for KSWAP distributions within Kyoto Swap products.\\n     */\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _isRegular,\\n        uint256 _startBlockNumber,\\n        bool _withUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Update the given pool's KSWAP allocation point. Can only be called by the owner.\\n     *\\n     * @param poolAlocations List of SetPoolAllocationInfo to update\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function set(\\n        SetPoolAllocationInfo[] calldata poolAlocations,\\n        bool _withUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Update the given pool's KSWAP allocation point. Can only be called by the owner.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _allocPoint New number of allocation points for the pool.\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n\\n    /**\\n     * @notice Updates the given pool's allocations and the pool rates.\\n     *\\n     * @param poolAlocations List of SetPoolAllocationInfo to update\\n     * @param _burnRate The % of KSWAP to burn each block.\\n     * @param _regularFarmRate The % of KSWAP to regular pools each block.\\n     * @param _specialFarmRate The % of KSWAP to special pools each block.\\n     */\\n    function updateRatesAndPools(\\n        SetPoolAllocationInfo[] calldata poolAlocations,\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Send KSWAP pending for burn to `burnAdmin`.\\n     *\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function burnKswap(bool _withUpdate) external;\\n\\n    /**\\n     * @notice Update the % of KSWAP distributions for burn, regular pools and special pools.\\n     *\\n     * @param _burnRate The % of KSWAP to burn each block.\\n     * @param _regularFarmRate The % of KSWAP to regular pools each block.\\n     * @param _specialFarmRate The % of KSWAP to special pools each block.\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function updateKswapRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Update whitelisted addresses for special pools.\\n     *\\n     * @param _user The address to be updated.\\n     * @param _isValid The flag for valid or invalid.\\n     */\\n    function updateWhiteList(address _user, bool _isValid) external;\\n\\n    /**\\n     * @notice Update user boost factor.\\n     *\\n     * @param _user The user address for boost factor updates.\\n     * @param _pid The pool id for the boost factor updates.\\n     * @param _newMultiplier New boost multiplier.\\n     */\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external;\\n\\n    /**\\n     * @notice Update the treasury address.\\n     */\\n    function setTreasuryAddress(address _treasury) external;\\n\\n    /**\\n     * @notice Updates the lastRewardBlock for a pool.\\n     *         Both the new and old values must be future blocks!\\n     *         If the new value is 0, it will be set to `block.number + 200`.\\n     *\\n     * @param _pid The pool id to update.\\n     * @param newLastRewardBlock The new value.\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256 _pid,\\n        uint256 newLastRewardBlock\\n    ) external;\\n\\n    /**\\n     * @notice Updates the lastRewardBlock for a list of pools.\\n     *         Both the new and old values must be future blocks!\\n     *         If the new value is 0, it will be set to `block.number + 200`.\\n     *\\n     * @param _pids The list of pool ids to update.\\n     * @param newLastRewardBlock The new value.\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256[] memory _pids,\\n        uint256 newLastRewardBlock\\n    ) external;\\n}\\n\",\"keccak256\":\"0x71aea567dc669f345647e5f342098610f757afbb4039fefa2c02712492963694\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061566f80620000216000396000f3fe608060405234801561001057600080fd5b50600436106103ba5760003560e01c80637577e2c3116101f4578063ac6568891161011a578063e1187d4e116100ad578063f41c8d961161007c578063f41c8d96146108e2578063fb3b6c2a146108f5578063fe4a004514610908578063fe575a871461091057600080fd5b8063e1187d4e1461086e578063e2bbb15814610895578063e3396735146108a8578063e671e5fc146108cf57600080fd5b8063ce5da407116100e9578063ce5da40714610822578063d1e6c30c14610835578063d547741f14610848578063ddf579ff1461085b57600080fd5b8063ac656889146107f6578063c40d337b14610806578063ca15c8731461080f578063cc6db2da1461051757600080fd5b80638dca75db1161019257806399d7e84a1161016157806399d7e84a146107b4578063a3cc8adb146107bd578063a8c28259146107d0578063ac1d0609146107e357600080fd5b80638dca75db146107265780639010d07c1461073957806391d148541461074c57806393f1a40b1461075f57600080fd5b806378ed5d1f116101ce57806378ed5d1f146106e25780637a994efd146106f55780638456cb59146106fe57806389320c4a1461070657600080fd5b80637577e2c3146106b357806378d28781146106c657806378db4c34146106d957600080fd5b8063372c12b1116102e45780635a7894181161027757806364482f791161024657806364482f791461066d5780636605bfda1461068057806369b02128146106935780636ebb16d3146106a057600080fd5b80635a7894181461062a5780635c975abb1461063d57806361d027b314610645578063630b5ba11461066557600080fd5b80634c0e5a59116102b35780634c0e5a591461058d57806351eb05a6146105a05780635312ea8e146105f757806357b46f881461060a57600080fd5b8063372c12b1146105365780633e0ca005146105695780633f4ba83a14610572578063441a3e701461057a57600080fd5b8063186d38301161035c578063297bf35b1161032b578063297bf35b146104dd5780632f2ff15d14610504578063325d186d1461051757806336568abe1461052357600080fd5b8063186d38301461045f5780631c748775146104725780631e4e0091146104b7578063248a9ca3146104ca57600080fd5b8063081e3eda11610398578063081e3eda146104035780630ee520581461040b57806311223c321461041a5780631526fe271461042257600080fd5b8063033186e8146103bf578063041a84c9146103e55780630433985b146103fa575b600080fd5b6103d26103cd366004614c85565b610923565b6040519081526020015b60405180910390f35b6103f86103f3366004614cb1565b610979565b005b6103d2600b5481565b6004546103d2565b6103d2670de0b6b3a764000081565b6103f8610e39565b610435610430366004614ce6565b6110ea565b6040805195865260208601949094529284019190915260608301521515608082015260a0016103dc565b6103f861046d366004614d4b565b61112e565b6003546104929073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016103dc565b6103f86104c5366004614db7565b6112fb565b6103d26104d8366004614ce6565b611343565b6103d27f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df81565b6103f8610512366004614dd9565b611379565b6103d264e8d4a5100081565b6103f8610531366004614dd9565b6113bd565b610559610544366004614e09565b60076020526000908152604090205460ff1681565b60405190151581526020016103dc565b6103d2600a5481565b6103f861146c565b6103f8610588366004614db7565b6114a7565b6103f861059b366004614e79565b61176a565b6105b36105ae366004614ce6565b6117f8565b6040516103dc9190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b6103f8610605366004614ce6565b611b4b565b6000546104929073ffffffffffffffffffffffffffffffffffffffff1681565b6103d2610638366004614ed0565b611cf5565b610559611d4b565b6001546104929073ffffffffffffffffffffffffffffffffffffffff1681565b6103f8611d7d565b6103f861067b366004614eed565b611e15565b6103f861068e366004614e09565b611e56565b6103d26501d1a94a200081565b6105596106ae366004614fbd565b611f52565b6103f86106c1366004615051565b611f5d565b6103d26106d4366004614dd9565b611f93565b6103d2600d5481565b6104926106f0366004614ce6565b61212a565b6103d2600c5481565b6103f8612161565b6002546104929073ffffffffffffffffffffffffffffffffffffffff1681565b6103f8610734366004614e09565b61219a565b610492610747366004614db7565b612514565b61055961075a366004614dd9565b612527565b61079961076d366004614dd9565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016103dc565b6103d260095481565b6103f86107cb3660046150b0565b612533565b6103f86107de366004615123565b6125c7565b6103f86107f1366004615164565b612609565b6103d268022b1c8c1227a0000081565b6103d260085481565b6103d261081d366004614ce6565b612760565b6103f8610830366004614d4b565b61276b565b6103f8610843366004615192565b61292a565b6103f8610856366004614dd9565b612993565b6103f8610869366004615192565b6129cd565b6103d27f479f15b0e08868e42ef233090518d51c94299977f5d2c05187e9393b22eace4e81565b6103f86108a3366004614db7565b612a36565b6103d27f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e81565b6103f86108dd366004614db7565b612e95565b6103f86108f0366004614ed0565b612f8a565b6103f8610903366004615217565b61302a565b6103d26130a8565b61055961091e366004614e09565b6130d1565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a51000811161096d5764e8d4a5100061096f565b805b9150505b92915050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee59546002036109d4576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109fd60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b610a267f479f15b0e08868e42ef233090518d51c94299977f5d2c05187e9393b22eace4e61311e565b73ffffffffffffffffffffffffffffffffffffffff8316610ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4d6173746572436865663a2054686520757365722061646472657373206d757360448201527f742062652076616c69640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60048281548110610ae157610ae16152ae565b600091825260209091206004600590920201015460ff16610b84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4d6173746572436865663a204f6e6c7920726567756c6172206661726d20636f60448201527f756c6420626520626f6f737465640000000000000000000000000000000000006064820152608401610ac5565b64e8d4a510008110158015610b9f57506501d1a94a20008111155b610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6173746572436865663a20496e76616c6964206e657720626f6f7374206d7560448201527f6c7469706c6965720000000000000000000000000000000000000000000000006064820152608401610ac5565b6000610c36836117f8565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091528120919250610c728686610923565b9050610c7f868683613128565b610cbf670de0b6b3a7640000610cb38560000151610cb964e8d4a51000610cb38a896000015461320290919063ffffffff16565b9061320e565b90613202565b60018301558154610d0b90610cdf9064e8d4a5100090610cb39088613202565b8354610d0590610cfa9064e8d4a5100090610cb39087613202565b60608701519061321a565b90613226565b60608401526004805484919087908110610d2757610d276152ae565b600091825260208083208451600593909302019182558381015160018301556040808501516002808501919091556060808701516003860155608090960151600490940180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093558984526006825280842073ffffffffffffffffffffffffffffffffffffffff8c1680865290835293819020909201889055815189815290810185905290810187905290917f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba910160405180910390a2505050610e3460017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610ac5565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600290610100900460ff1680610f4e57507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610155b15610f8a576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610ac5565b610f9381613232565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905560006110087fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506110156000826132ea565b61103f7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08826132ea565b6110697f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e826132ea565b507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600481815481106110fa57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b6111577ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b8015611297578281146111ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610ac5565b60005b838110156112915761127f85858381811061120c5761120c6152ae565b90506020020160208101906112219190614e09565b848484818110611233576112336152ae565b905060200281019061124591906152dd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ec92505050565b8061128981615371565b9150506111ef565b506112f5565b60005b838110156112f3576112e18585838181106112b7576112b76152ae565b90506020020160208101906112cc9190614e09565b604051806020016040528060008152506133ec565b806112eb81615371565b91505061129a565b505b50505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260205260409020600101546113359061311e565b61133f82826134fd565b5050565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040812060010154610973565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260205260409020600101546113b39061311e565b61133f82826132ea565b73ffffffffffffffffffffffffffffffffffffffff81163314611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ac5565b61133f8282613567565b6114957f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a2661311e565b61149d613667565b6114a5613722565b565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203611502576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61152b60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b61153361379f565b61153c3361385b565b6000611547836117f8565b600084815260066020908152604080832033845290915290208054919250908311156115cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f77697468647261773a20496e73756666696369656e74000000000000000000006044820152606401610ac5565b60006115db3386610923565b90506115e8338683613128565b83156116435781546115fa908561321a565b826000018190555061164333856005888154811061161a5761161a6152ae565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190613864565b611677670de0b6b3a7640000610cb38560000151610cb964e8d4a51000610cb387896000015461320290919063ffffffff16565b60018301556116c561169264e8d4a51000610cb38785613202565b600487815481106116a5576116a56152ae565b90600052602060002090600502016003015461321a90919063ffffffff16565b600486815481106116d8576116d86152ae565b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161173691815260200190565b60405180910390a350505061133f60017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b6117937f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b80156117a1576117a1611d7d565b6000825b808210156112f3576117ed8585848181106117c2576117c26152ae565b905060400201600001358686858181106117de576117de6152ae565b90506040020160200135613938565b8160010191506117a5565b61182c6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b6004828154811061183f5761183f6152ae565b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff16151560808201529150431115611b4657606081015160808201516000906118b1576009546118b5565b6008545b90506000821180156118c75750600081115b15611a725760006118e584602001514361321a90919063ffffffff16565b9050600061190c83610cb38760400151610cb96119058a60800151611cf5565b8790613202565b905061192f61192785610cb384670de0b6b3a7640000613202565b865190613226565b855260005460015473ffffffffffffffffffffffffffffffffffffffff918216916340c10f19911661196284600a61320e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156119cd57600080fd5b505af11580156119e1573d6000803e3d6000fd5b50506000546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b158015611a5757600080fd5b505af1158015611a6b573d6000803e3d6000fd5b5050505050505b4360208401526004805484919086908110611a8f57611a8f6152ae565b600091825260209182902083516005929092020190815582820151600182015560408084015160028301556060808501516003840155608090940151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915585820151865182519182529281018690529081019190915285917f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46910160405180910390a250505b919050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203611ba6576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bcf60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b611bd761379f565b611be03361385b565b600060048281548110611bf557611bf56152ae565b600091825260208083208584526006825260408085203380875293528420805485825560018201869055600590940290910194509290611c4b9064e8d4a5100090610cb390611c449089610923565b8590613202565b905080846003015411611c5f576000611c6e565b6003840154611c6e908261321a565b8460030181905550611c8e33836005888154811061161a5761161a6152ae565b604051828152859033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a350505050611cf260017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b50565b60008115611d245761097364e8d4a51000610cb3600b5468022b1c8c1227a0000061320290919063ffffffff16565b61097364e8d4a51000610cb3600c5468022b1c8c1227a0000061320290919063ffffffff16565b6000611d787fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75460ff1690565b905090565b60045460005b8181101561133f57600060048281548110611da057611da06152ae565b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff1615156080820152915015611e0457611e02826117f8565b505b50611e0e81615371565b9050611d83565b611e3e7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b8015611e4c57611e4c611d7d565b610e348383613938565b60015473ffffffffffffffffffffffffffffffffffffffff163314611ed7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6465763a207775743f00000000000000000000000000000000000000000000006044820152606401610ac5565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405190815233907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a835109060200160405180910390a250565b600061097382613a52565b611f867f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b6112f38585858585613aef565b60008060048481548110611fa957611fa96152ae565b600091825260208083206040805160a081018252600590940290910180548452600180820154858501908152600280840154878601526003840154606080890191825260049095015460ff16151560808901528c89526006875285892073ffffffffffffffffffffffffffffffffffffffff8d168a52875297859020855194850186528054855292830154958401959095529301549181019190915282519351915192945092914311801561205d57508015155b156120d657600061207b85602001514361321a90919063ffffffff16565b905060006120af866080015161209357600954612097565b6008545b610cb38860400151610cb96119058b60800151611cf5565b90506120d16120ca84610cb384670de0b6b3a7640000613202565b8590613226565b935050505b60006120f664e8d4a51000610cb36120ee8a8c610923565b875190613202565b602085015190915061211e90612118670de0b6b3a7640000610cb38588613202565b9061321a565b98975050505050505050565b6005818154811061213a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61218a7f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a2661311e565b61219261379f565b6114a5613e5a565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610ac5565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600390610100900460ff16806122af57507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610155b156122eb576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610ac5565b6122f481613232565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905560006123697fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90503373ffffffffffffffffffffffffffffffffffffffff8216146123ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f6e6c79206f776e65722063616e20696e697469616c697a65000000000000006044820152606401610ac5565b6124147f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df826132ea565b61243e7f479f15b0e08868e42ef233090518d51c94299977f5d2c05187e9393b22eace4e826132ea565b6124687f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df846132ea565b6124927f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e846132ea565b507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60006125208383613ed4565b9392505050565b60006125208383613f0b565b61255c7f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e61311e565b801561256a5761256a611d7d565b6000855b808210156125b2576125a788888481811061258b5761258b6152ae565b905060400201600001358989858181106117de576117de6152ae565b81600101915061256e565b6125bd868686613ffe565b5050505050505050565b6125f07f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e61311e565b80156125fe576125fe611d7d565b6112f5848484613ffe565b6126327f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b73ffffffffffffffffffffffffffffffffffffffff82166126d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d6173746572436865663a20546865207768697465206c69737420616464726560448201527f7373206d7573742062652076616c6964000000000000000000000000000000006064820152608401610ac5565b73ffffffffffffffffffffffffffffffffffffffff821660008181526007602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d5191015b60405180910390a25050565b6000610973826141a6565b6127947ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b80156128ce57828114612829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610ac5565b60005b83811015611291576128bc858583818110612849576128496152ae565b905060200201602081019061285e9190614e09565b848484818110612870576128706152ae565b905060200281019061288291906152dd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141dc92505050565b806128c681615371565b91505061282c565b60005b838110156112f3576129188585838181106128ee576128ee6152ae565b90506020020160208101906129039190614e09565b604051806020016040528060008152506141dc565b8061292281615371565b9150506128d1565b6129537ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b610e348383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ec92505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260205260409020600101546114629061311e565b6129f67ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b610e348383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141dc92505050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203612a91576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612aba60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b612ac261379f565b612acb3361385b565b6000612ad6836117f8565b6000848152600660209081526040808320338452909152902060808201519192509080612b1257503360009081526007602052604090205460ff165b612ba057604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f4d6173746572436865663a205468652061646472657373206973206e6f74206160448201527f7661696c61626c6520746f206465706f73697420696e207468697320706f6f6c6064820152608401610ac5565b6000612bac3386610923565b825490915015612bc157612bc1338683613128565b8315612da757600060058681548110612bdc57612bdc6152ae565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7791906153a9565b9050612cbc33308760058a81548110612c9257612c926152ae565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169291906142ef565b612d6e8160058881548110612cd357612cd36152ae565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612d4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211891906153a9565b8354909550612d7d9086613226565b8355612da0612d9564e8d4a51000610cb38886613202565b606086015190613226565b6060850152505b612ddb670de0b6b3a7640000610cb38560000151610cb964e8d4a51000610cb387896000015461320290919063ffffffff16565b82600101819055508260048681548110612df757612df76152ae565b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559051858152869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101611736565b612ebe7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b600060048381548110612ed357612ed36152ae565b90600052602060002090600502016001015490504381118015612ef65750438210155b612f5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43616e2774206d6f6469667920686973746f72790000000000000000000000006044820152606401610ac5565b8160048481548110612f7057612f706152ae565b906000526020600020906005020160010181905550505050565b612fb37f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df61311e565b8015612fc157612fc1611d7d565b6000612fd8600d544361321a90919063ffffffff16565b90506000612fee612fe76130a8565b8390613202565b905061302161301b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b8261434d565b505043600d5550565b6130537f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b80600003613069576130664360c86153c2565b90505b60005b8251811015610e345761309883828151811061308a5761308a6152ae565b602002602001015183612e95565b6130a181615371565b905061306c565b6000611d7864e8d4a51000610cb3600a5468022b1c8c1227a0000061320290919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff16610973565b611cf28133614418565b600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320815160608101835281548082526001830154948201949094526002909101549181019190915291906131949064e8d4a5100090610cb39086613202565b905060006131d2670de0b6b3a7640000610cb3600488815481106131ba576131ba6152ae565b60009182526020909120600590910201548590613202565b905060006131ed84602001518361321a90919063ffffffff16565b90506131f9878261434d565b50505050505050565b600061252082846153d5565b600061252082846153ec565b60006125208284615427565b600061252082846153c2565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610613297576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610ac5565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b6132f48282613f0b565b61133f5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d390915290206133a290826144c1565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff161561133f5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055516134b190829061545e565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6135718282613f0b565b1561133f5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d3909152902061361d90826144e3565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75460ff16806136bc57506136bc7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33613f0b565b6114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ac5565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75460ff1615806137f557506137f57fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33613f0b565b6114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ac5565b611cf281614505565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610e349084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614583565b613941826117f8565b5060048281548110613955576139556152ae565b600091825260209091206004600590920201015460ff16156139b6576139ae81610d056004858154811061398b5761398b6152ae565b90600052602060002090600502016002015460085461321a90919063ffffffff16565b6008556139f7565b6139f381610d05600485815481106139d0576139d06152ae565b90600052602060002090600502016002015460095461321a90919063ffffffff16565b6009555b8060048381548110613a0b57613a0b6152ae565b906000526020600020906005020160020181905550817fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f88260405161275491815260200190565b6000805b8251811015613ae657613ac6838281518110613a7457613a746152ae565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b15613ad45750600192915050565b80613ade81615371565b915050613a56565b50600092915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8091906153a9565b1015613be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f6e6520424550323020746f6b656e730000000000000000000000000000006044820152606401610ac5565b60005473ffffffffffffffffffffffffffffffffffffffff90811690851603613c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4b5357415020746f6b656e2063616e277420626520616464656420746f20666160448201527f726d20706f6f6c730000000000000000000000000000000000000000000000006064820152608401610ac5565b8015613ca157613ca1611d7d565b8215613cbc57600854613cb49086613226565b600855613ccd565b600954613cc99086613226565b6009555b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790556040805160a0810190915290815260049060208101438511613d6857613d634360c86153c2565b613d6a565b845b8152602080820189905260006040808401829052881515606094850152855460018082018855968352918390208551600593840290910190815592850151838701558401516002830155918301516003820155608090920151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091555473ffffffffffffffffffffffffffffffffffffffff861691613e19919061321a565b6040805188815286151560208201527f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa910160405180910390a35050505050565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001613795565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d360205260408120612520908361468f565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff168061252057507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26000613fbf8560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b60008311801561400e5750600082115b801561401a5750600081115b6140a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4d6173746572436865663a204b737761702072617465206d757374206265206760448201527f726561746572207468616e2030000000000000000000000000000000000000006064820152608401610ac5565b64e8d4a510006140ba82610d058686613226565b14614147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d6173746572436865663a20546f74616c2072617465206d757374206265203160448201527f65313200000000000000000000000000000000000000000000000000000000006064820152608401610ac5565b6141516000612f8a565b600a839055600b829055600c81905560408051848152602081018490529081018290527fae2d2e7d1ae84564fc72227253ce0f36a007209f7fd5ec414dea80e5af2fb5b09060600160405180910390a1505050565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d3602052604081206109739061469b565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1661133f5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055516142a390829061545e565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526112f59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016138b6565b801561133f57600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156143c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e691906153a9565b9050818110156143f4578091505b600054610e349073ffffffffffffffffffffffffffffffffffffffff168484613864565b6144228282613f0b565b61133f576144478173ffffffffffffffffffffffffffffffffffffffff1660146146a5565b6144528360206146a5565b60405160200161446392919061547a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610ac5916004016154fb565b60006125208373ffffffffffffffffffffffffffffffffffffffff84166148e8565b60006125208373ffffffffffffffffffffffffffffffffffffffff8416614937565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1615611cf2576145738173ffffffffffffffffffffffffffffffffffffffff1660146146a5565b604051602001614463919061554c565b60006145e5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614a2a9092919063ffffffff16565b805190915015610e34578080602001905181019061460391906155b8565b610e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ac5565b60006125208383614a41565b6000610973825490565b606060006146b48360026153d5565b6146bf9060026153c2565b67ffffffffffffffff8111156146d7576146d7614f1b565b6040519080825280601f01601f191660200182016040528015614701576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110614738576147386152ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061479b5761479b6152ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006147d78460026153d5565b6147e29060016153c2565b90505b600181111561487f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614823576148236152ae565b1a60f81b828281518110614839576148396152ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93614878816155d5565b90506147e5565b50831561096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ac5565b600081815260018301602052604081205461492f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610973565b506000610973565b60008181526001830160205260408120548015614a2057600061495b600183615427565b855490915060009061496f90600190615427565b90508181146149d457600086600001828154811061498f5761498f6152ae565b90600052602060002001549050808760000184815481106149b2576149b26152ae565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806149e5576149e561560a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610973565b6000915050610973565b6060614a398484600085614a6b565b949350505050565b6000826000018281548110614a5857614a586152ae565b9060005260206000200154905092915050565b606082471015614afd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ac5565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051614b26919061545e565b60006040518083038185875af1925050503d8060008114614b63576040519150601f19603f3d011682016040523d82523d6000602084013e614b68565b606091505b5091509150614b7987838387614b84565b979650505050505050565b60608315614c1a578251600003614c135773ffffffffffffffffffffffffffffffffffffffff85163b614c13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ac5565b5081614a39565b614a398383815115614c2f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac591906154fb565b73ffffffffffffffffffffffffffffffffffffffff81168114611cf257600080fd5b60008060408385031215614c9857600080fd5b8235614ca381614c63565b946020939093013593505050565b600080600060608486031215614cc657600080fd5b8335614cd181614c63565b95602085013595506040909401359392505050565b600060208284031215614cf857600080fd5b5035919050565b60008083601f840112614d1157600080fd5b50813567ffffffffffffffff811115614d2957600080fd5b6020830191508360208260051b8501011115614d4457600080fd5b9250929050565b60008060008060408587031215614d6157600080fd5b843567ffffffffffffffff80821115614d7957600080fd5b614d8588838901614cff565b90965094506020870135915080821115614d9e57600080fd5b50614dab87828801614cff565b95989497509550505050565b60008060408385031215614dca57600080fd5b50508035926020909101359150565b60008060408385031215614dec57600080fd5b823591506020830135614dfe81614c63565b809150509250929050565b600060208284031215614e1b57600080fd5b813561096d81614c63565b60008083601f840112614e3857600080fd5b50813567ffffffffffffffff811115614e5057600080fd5b6020830191508360208260061b8501011115614d4457600080fd5b8015158114611cf257600080fd5b600080600060408486031215614e8e57600080fd5b833567ffffffffffffffff811115614ea557600080fd5b614eb186828701614e26565b9094509250506020840135614ec581614e6b565b809150509250925092565b600060208284031215614ee257600080fd5b813561096d81614e6b565b600080600060608486031215614f0257600080fd5b83359250602084013591506040840135614ec581614e6b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614f9157614f91614f1b565b604052919050565b600067ffffffffffffffff821115614fb357614fb3614f1b565b5060051b60200190565b60006020808385031215614fd057600080fd5b823567ffffffffffffffff811115614fe757600080fd5b8301601f81018513614ff857600080fd5b803561500b61500682614f99565b614f4a565b81815260059190911b8201830190838101908783111561502a57600080fd5b928401925b82841015614b7957833561504281614c63565b8252928401929084019061502f565b600080600080600060a0868803121561506957600080fd5b85359450602086013561507b81614c63565b9350604086013561508b81614e6b565b92506060860135915060808601356150a281614e6b565b809150509295509295909350565b60008060008060008060a087890312156150c957600080fd5b863567ffffffffffffffff8111156150e057600080fd5b6150ec89828a01614e26565b909750955050602087013593506040870135925060608701359150608087013561511581614e6b565b809150509295509295509295565b6000806000806080858703121561513957600080fd5b843593506020850135925060408501359150606085013561515981614e6b565b939692955090935050565b6000806040838503121561517757600080fd5b823561518281614c63565b91506020830135614dfe81614e6b565b6000806000604084860312156151a757600080fd5b83356151b281614c63565b9250602084013567ffffffffffffffff808211156151cf57600080fd5b818601915086601f8301126151e357600080fd5b8135818111156151f257600080fd5b87602082850101111561520457600080fd5b6020830194508093505050509250925092565b6000806040838503121561522a57600080fd5b823567ffffffffffffffff81111561524157600080fd5b8301601f8101851361525257600080fd5b8035602061526261500683614f99565b82815260059290921b8301810191818101908884111561528157600080fd5b938201935b8385101561529f57843582529382019390820190615286565b98969091013596505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261531257600080fd5b83018035915067ffffffffffffffff82111561532d57600080fd5b602001915036819003821315614d4457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036153a2576153a2615342565b5060010190565b6000602082840312156153bb57600080fd5b5051919050565b8082018082111561097357610973615342565b808202811582820484141761097357610973615342565b600082615422577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561097357610973615342565b60005b8381101561545557818101518382015260200161543d565b50506000910152565b6000825161547081846020870161543a565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516154b281601785016020880161543a565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516154ef81602884016020880161543a565b01602801949350505050565b602081526000825180602084015261551a81604085016020870161543a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f53696d706c65426c61636b6c6973743a206163636f756e74200000000000000081526000825161558481601985016020870161543a565b7f20697320626c61636b6c697374656400000000000000000000000000000000006019939091019283015250602801919050565b6000602082840312156155ca57600080fd5b815161096d81614e6b565b6000816155e4576155e4615342565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212203b79d42fcdc047d3d86b4fd45ffbbd443b6226b4ab2ec498ef16bfe01428553b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ba5760003560e01c80637577e2c3116101f4578063ac6568891161011a578063e1187d4e116100ad578063f41c8d961161007c578063f41c8d96146108e2578063fb3b6c2a146108f5578063fe4a004514610908578063fe575a871461091057600080fd5b8063e1187d4e1461086e578063e2bbb15814610895578063e3396735146108a8578063e671e5fc146108cf57600080fd5b8063ce5da407116100e9578063ce5da40714610822578063d1e6c30c14610835578063d547741f14610848578063ddf579ff1461085b57600080fd5b8063ac656889146107f6578063c40d337b14610806578063ca15c8731461080f578063cc6db2da1461051757600080fd5b80638dca75db1161019257806399d7e84a1161016157806399d7e84a146107b4578063a3cc8adb146107bd578063a8c28259146107d0578063ac1d0609146107e357600080fd5b80638dca75db146107265780639010d07c1461073957806391d148541461074c57806393f1a40b1461075f57600080fd5b806378ed5d1f116101ce57806378ed5d1f146106e25780637a994efd146106f55780638456cb59146106fe57806389320c4a1461070657600080fd5b80637577e2c3146106b357806378d28781146106c657806378db4c34146106d957600080fd5b8063372c12b1116102e45780635a7894181161027757806364482f791161024657806364482f791461066d5780636605bfda1461068057806369b02128146106935780636ebb16d3146106a057600080fd5b80635a7894181461062a5780635c975abb1461063d57806361d027b314610645578063630b5ba11461066557600080fd5b80634c0e5a59116102b35780634c0e5a591461058d57806351eb05a6146105a05780635312ea8e146105f757806357b46f881461060a57600080fd5b8063372c12b1146105365780633e0ca005146105695780633f4ba83a14610572578063441a3e701461057a57600080fd5b8063186d38301161035c578063297bf35b1161032b578063297bf35b146104dd5780632f2ff15d14610504578063325d186d1461051757806336568abe1461052357600080fd5b8063186d38301461045f5780631c748775146104725780631e4e0091146104b7578063248a9ca3146104ca57600080fd5b8063081e3eda11610398578063081e3eda146104035780630ee520581461040b57806311223c321461041a5780631526fe271461042257600080fd5b8063033186e8146103bf578063041a84c9146103e55780630433985b146103fa575b600080fd5b6103d26103cd366004614c85565b610923565b6040519081526020015b60405180910390f35b6103f86103f3366004614cb1565b610979565b005b6103d2600b5481565b6004546103d2565b6103d2670de0b6b3a764000081565b6103f8610e39565b610435610430366004614ce6565b6110ea565b6040805195865260208601949094529284019190915260608301521515608082015260a0016103dc565b6103f861046d366004614d4b565b61112e565b6003546104929073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016103dc565b6103f86104c5366004614db7565b6112fb565b6103d26104d8366004614ce6565b611343565b6103d27f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df81565b6103f8610512366004614dd9565b611379565b6103d264e8d4a5100081565b6103f8610531366004614dd9565b6113bd565b610559610544366004614e09565b60076020526000908152604090205460ff1681565b60405190151581526020016103dc565b6103d2600a5481565b6103f861146c565b6103f8610588366004614db7565b6114a7565b6103f861059b366004614e79565b61176a565b6105b36105ae366004614ce6565b6117f8565b6040516103dc9190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b6103f8610605366004614ce6565b611b4b565b6000546104929073ffffffffffffffffffffffffffffffffffffffff1681565b6103d2610638366004614ed0565b611cf5565b610559611d4b565b6001546104929073ffffffffffffffffffffffffffffffffffffffff1681565b6103f8611d7d565b6103f861067b366004614eed565b611e15565b6103f861068e366004614e09565b611e56565b6103d26501d1a94a200081565b6105596106ae366004614fbd565b611f52565b6103f86106c1366004615051565b611f5d565b6103d26106d4366004614dd9565b611f93565b6103d2600d5481565b6104926106f0366004614ce6565b61212a565b6103d2600c5481565b6103f8612161565b6002546104929073ffffffffffffffffffffffffffffffffffffffff1681565b6103f8610734366004614e09565b61219a565b610492610747366004614db7565b612514565b61055961075a366004614dd9565b612527565b61079961076d366004614dd9565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016103dc565b6103d260095481565b6103f86107cb3660046150b0565b612533565b6103f86107de366004615123565b6125c7565b6103f86107f1366004615164565b612609565b6103d268022b1c8c1227a0000081565b6103d260085481565b6103d261081d366004614ce6565b612760565b6103f8610830366004614d4b565b61276b565b6103f8610843366004615192565b61292a565b6103f8610856366004614dd9565b612993565b6103f8610869366004615192565b6129cd565b6103d27f479f15b0e08868e42ef233090518d51c94299977f5d2c05187e9393b22eace4e81565b6103f86108a3366004614db7565b612a36565b6103d27f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e81565b6103f86108dd366004614db7565b612e95565b6103f86108f0366004614ed0565b612f8a565b6103f8610903366004615217565b61302a565b6103d26130a8565b61055961091e366004614e09565b6130d1565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a51000811161096d5764e8d4a5100061096f565b805b9150505b92915050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee59546002036109d4576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109fd60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b610a267f479f15b0e08868e42ef233090518d51c94299977f5d2c05187e9393b22eace4e61311e565b73ffffffffffffffffffffffffffffffffffffffff8316610ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4d6173746572436865663a2054686520757365722061646472657373206d757360448201527f742062652076616c69640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60048281548110610ae157610ae16152ae565b600091825260209091206004600590920201015460ff16610b84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4d6173746572436865663a204f6e6c7920726567756c6172206661726d20636f60448201527f756c6420626520626f6f737465640000000000000000000000000000000000006064820152608401610ac5565b64e8d4a510008110158015610b9f57506501d1a94a20008111155b610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6173746572436865663a20496e76616c6964206e657720626f6f7374206d7560448201527f6c7469706c6965720000000000000000000000000000000000000000000000006064820152608401610ac5565b6000610c36836117f8565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091528120919250610c728686610923565b9050610c7f868683613128565b610cbf670de0b6b3a7640000610cb38560000151610cb964e8d4a51000610cb38a896000015461320290919063ffffffff16565b9061320e565b90613202565b60018301558154610d0b90610cdf9064e8d4a5100090610cb39088613202565b8354610d0590610cfa9064e8d4a5100090610cb39087613202565b60608701519061321a565b90613226565b60608401526004805484919087908110610d2757610d276152ae565b600091825260208083208451600593909302019182558381015160018301556040808501516002808501919091556060808701516003860155608090960151600490940180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093558984526006825280842073ffffffffffffffffffffffffffffffffffffffff8c1680865290835293819020909201889055815189815290810185905290810187905290917f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba910160405180910390a2505050610e3460017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610ac5565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600290610100900460ff1680610f4e57507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610155b15610f8a576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610ac5565b610f9381613232565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905560006110087fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506110156000826132ea565b61103f7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08826132ea565b6110697f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e826132ea565b507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600481815481106110fa57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b6111577ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b8015611297578281146111ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610ac5565b60005b838110156112915761127f85858381811061120c5761120c6152ae565b90506020020160208101906112219190614e09565b848484818110611233576112336152ae565b905060200281019061124591906152dd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ec92505050565b8061128981615371565b9150506111ef565b506112f5565b60005b838110156112f3576112e18585838181106112b7576112b76152ae565b90506020020160208101906112cc9190614e09565b604051806020016040528060008152506133ec565b806112eb81615371565b91505061129a565b505b50505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260205260409020600101546113359061311e565b61133f82826134fd565b5050565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040812060010154610973565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260205260409020600101546113b39061311e565b61133f82826132ea565b73ffffffffffffffffffffffffffffffffffffffff81163314611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ac5565b61133f8282613567565b6114957f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a2661311e565b61149d613667565b6114a5613722565b565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203611502576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61152b60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b61153361379f565b61153c3361385b565b6000611547836117f8565b600084815260066020908152604080832033845290915290208054919250908311156115cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f77697468647261773a20496e73756666696369656e74000000000000000000006044820152606401610ac5565b60006115db3386610923565b90506115e8338683613128565b83156116435781546115fa908561321a565b826000018190555061164333856005888154811061161a5761161a6152ae565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190613864565b611677670de0b6b3a7640000610cb38560000151610cb964e8d4a51000610cb387896000015461320290919063ffffffff16565b60018301556116c561169264e8d4a51000610cb38785613202565b600487815481106116a5576116a56152ae565b90600052602060002090600502016003015461321a90919063ffffffff16565b600486815481106116d8576116d86152ae565b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161173691815260200190565b60405180910390a350505061133f60017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b6117937f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b80156117a1576117a1611d7d565b6000825b808210156112f3576117ed8585848181106117c2576117c26152ae565b905060400201600001358686858181106117de576117de6152ae565b90506040020160200135613938565b8160010191506117a5565b61182c6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b6004828154811061183f5761183f6152ae565b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff16151560808201529150431115611b4657606081015160808201516000906118b1576009546118b5565b6008545b90506000821180156118c75750600081115b15611a725760006118e584602001514361321a90919063ffffffff16565b9050600061190c83610cb38760400151610cb96119058a60800151611cf5565b8790613202565b905061192f61192785610cb384670de0b6b3a7640000613202565b865190613226565b855260005460015473ffffffffffffffffffffffffffffffffffffffff918216916340c10f19911661196284600a61320e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156119cd57600080fd5b505af11580156119e1573d6000803e3d6000fd5b50506000546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b158015611a5757600080fd5b505af1158015611a6b573d6000803e3d6000fd5b5050505050505b4360208401526004805484919086908110611a8f57611a8f6152ae565b600091825260209182902083516005929092020190815582820151600182015560408084015160028301556060808501516003840155608090940151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915585820151865182519182529281018690529081019190915285917f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46910160405180910390a250505b919050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203611ba6576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bcf60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b611bd761379f565b611be03361385b565b600060048281548110611bf557611bf56152ae565b600091825260208083208584526006825260408085203380875293528420805485825560018201869055600590940290910194509290611c4b9064e8d4a5100090610cb390611c449089610923565b8590613202565b905080846003015411611c5f576000611c6e565b6003840154611c6e908261321a565b8460030181905550611c8e33836005888154811061161a5761161a6152ae565b604051828152859033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a350505050611cf260017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b50565b60008115611d245761097364e8d4a51000610cb3600b5468022b1c8c1227a0000061320290919063ffffffff16565b61097364e8d4a51000610cb3600c5468022b1c8c1227a0000061320290919063ffffffff16565b6000611d787fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75460ff1690565b905090565b60045460005b8181101561133f57600060048281548110611da057611da06152ae565b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff1615156080820152915015611e0457611e02826117f8565b505b50611e0e81615371565b9050611d83565b611e3e7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b8015611e4c57611e4c611d7d565b610e348383613938565b60015473ffffffffffffffffffffffffffffffffffffffff163314611ed7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6465763a207775743f00000000000000000000000000000000000000000000006044820152606401610ac5565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405190815233907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a835109060200160405180910390a250565b600061097382613a52565b611f867f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b6112f38585858585613aef565b60008060048481548110611fa957611fa96152ae565b600091825260208083206040805160a081018252600590940290910180548452600180820154858501908152600280840154878601526003840154606080890191825260049095015460ff16151560808901528c89526006875285892073ffffffffffffffffffffffffffffffffffffffff8d168a52875297859020855194850186528054855292830154958401959095529301549181019190915282519351915192945092914311801561205d57508015155b156120d657600061207b85602001514361321a90919063ffffffff16565b905060006120af866080015161209357600954612097565b6008545b610cb38860400151610cb96119058b60800151611cf5565b90506120d16120ca84610cb384670de0b6b3a7640000613202565b8590613226565b935050505b60006120f664e8d4a51000610cb36120ee8a8c610923565b875190613202565b602085015190915061211e90612118670de0b6b3a7640000610cb38588613202565b9061321a565b98975050505050505050565b6005818154811061213a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61218a7f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a2661311e565b61219261379f565b6114a5613e5a565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610ac5565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600390610100900460ff16806122af57507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610155b156122eb576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610ac5565b6122f481613232565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010017905560006123697fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90503373ffffffffffffffffffffffffffffffffffffffff8216146123ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f6e6c79206f776e65722063616e20696e697469616c697a65000000000000006044820152606401610ac5565b6124147f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df826132ea565b61243e7f479f15b0e08868e42ef233090518d51c94299977f5d2c05187e9393b22eace4e826132ea565b6124687f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df846132ea565b6124927f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e846132ea565b507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60006125208383613ed4565b9392505050565b60006125208383613f0b565b61255c7f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e61311e565b801561256a5761256a611d7d565b6000855b808210156125b2576125a788888481811061258b5761258b6152ae565b905060400201600001358989858181106117de576117de6152ae565b81600101915061256e565b6125bd868686613ffe565b5050505050505050565b6125f07f64b4740f54156feb06b7a9f424e5bce966a52344cf27635887cf63c0ebf2a61e61311e565b80156125fe576125fe611d7d565b6112f5848484613ffe565b6126327f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b73ffffffffffffffffffffffffffffffffffffffff82166126d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d6173746572436865663a20546865207768697465206c69737420616464726560448201527f7373206d7573742062652076616c6964000000000000000000000000000000006064820152608401610ac5565b73ffffffffffffffffffffffffffffffffffffffff821660008181526007602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d5191015b60405180910390a25050565b6000610973826141a6565b6127947ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b80156128ce57828114612829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610ac5565b60005b83811015611291576128bc858583818110612849576128496152ae565b905060200201602081019061285e9190614e09565b848484818110612870576128706152ae565b905060200281019061288291906152dd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141dc92505050565b806128c681615371565b91505061282c565b60005b838110156112f3576129188585838181106128ee576128ee6152ae565b90506020020160208101906129039190614e09565b604051806020016040528060008152506141dc565b8061292281615371565b9150506128d1565b6129537ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b610e348383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ec92505050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260205260409020600101546114629061311e565b6129f67ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee61311e565b610e348383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141dc92505050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203612a91576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612aba60027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b612ac261379f565b612acb3361385b565b6000612ad6836117f8565b6000848152600660209081526040808320338452909152902060808201519192509080612b1257503360009081526007602052604090205460ff165b612ba057604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f4d6173746572436865663a205468652061646472657373206973206e6f74206160448201527f7661696c61626c6520746f206465706f73697420696e207468697320706f6f6c6064820152608401610ac5565b6000612bac3386610923565b825490915015612bc157612bc1338683613128565b8315612da757600060058681548110612bdc57612bdc6152ae565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7791906153a9565b9050612cbc33308760058a81548110612c9257612c926152ae565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169291906142ef565b612d6e8160058881548110612cd357612cd36152ae565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612d4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211891906153a9565b8354909550612d7d9086613226565b8355612da0612d9564e8d4a51000610cb38886613202565b606086015190613226565b6060850152505b612ddb670de0b6b3a7640000610cb38560000151610cb964e8d4a51000610cb387896000015461320290919063ffffffff16565b82600101819055508260048681548110612df757612df76152ae565b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559051858152869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101611736565b612ebe7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b600060048381548110612ed357612ed36152ae565b90600052602060002090600502016001015490504381118015612ef65750438210155b612f5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43616e2774206d6f6469667920686973746f72790000000000000000000000006044820152606401610ac5565b8160048481548110612f7057612f706152ae565b906000526020600020906005020160010181905550505050565b612fb37f603ae08765bc5fad7a971952007e4e84ddd8001052efaad946bd8a191e1870df61311e565b8015612fc157612fc1611d7d565b6000612fd8600d544361321a90919063ffffffff16565b90506000612fee612fe76130a8565b8390613202565b905061302161301b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b8261434d565b505043600d5550565b6130537f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0861311e565b80600003613069576130664360c86153c2565b90505b60005b8251811015610e345761309883828151811061308a5761308a6152ae565b602002602001015183612e95565b6130a181615371565b905061306c565b6000611d7864e8d4a51000610cb3600a5468022b1c8c1227a0000061320290919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff16610973565b611cf28133614418565b600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320815160608101835281548082526001830154948201949094526002909101549181019190915291906131949064e8d4a5100090610cb39086613202565b905060006131d2670de0b6b3a7640000610cb3600488815481106131ba576131ba6152ae565b60009182526020909120600590910201548590613202565b905060006131ed84602001518361321a90919063ffffffff16565b90506131f9878261434d565b50505050505050565b600061252082846153d5565b600061252082846153ec565b60006125208284615427565b600061252082846153c2565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610613297576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610ac5565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b6132f48282613f0b565b61133f5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d390915290206133a290826144c1565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff161561133f5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055516134b190829061545e565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35050565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6135718282613f0b565b1561133f5760008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558483527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d3909152902061361d90826144e3565b50604051339073ffffffffffffffffffffffffffffffffffffffff83169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75460ff16806136bc57506136bc7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33613f0b565b6114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ac5565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75460ff1615806137f557506137f57fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e33613f0b565b6114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ac5565b611cf281614505565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610e349084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614583565b613941826117f8565b5060048281548110613955576139556152ae565b600091825260209091206004600590920201015460ff16156139b6576139ae81610d056004858154811061398b5761398b6152ae565b90600052602060002090600502016002015460085461321a90919063ffffffff16565b6008556139f7565b6139f381610d05600485815481106139d0576139d06152ae565b90600052602060002090600502016002015460095461321a90919063ffffffff16565b6009555b8060048381548110613a0b57613a0b6152ae565b906000526020600020906005020160020181905550817fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f88260405161275491815260200190565b6000805b8251811015613ae657613ac6838281518110613a7457613a746152ae565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b15613ad45750600192915050565b80613ade81615371565b915050613a56565b50600092915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b8091906153a9565b1015613be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f6e6520424550323020746f6b656e730000000000000000000000000000006044820152606401610ac5565b60005473ffffffffffffffffffffffffffffffffffffffff90811690851603613c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4b5357415020746f6b656e2063616e277420626520616464656420746f20666160448201527f726d20706f6f6c730000000000000000000000000000000000000000000000006064820152608401610ac5565b8015613ca157613ca1611d7d565b8215613cbc57600854613cb49086613226565b600855613ccd565b600954613cc99086613226565b6009555b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790556040805160a0810190915290815260049060208101438511613d6857613d634360c86153c2565b613d6a565b845b8152602080820189905260006040808401829052881515606094850152855460018082018855968352918390208551600593840290910190815592850151838701558401516002830155918301516003820155608090920151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091555473ffffffffffffffffffffffffffffffffffffffff861691613e19919061321a565b6040805188815286151560208201527f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa910160405180910390a35050505050565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001613795565b60008281527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d360205260408120612520908361468f565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff168061252057507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d26000613fbf8560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b60008311801561400e5750600082115b801561401a5750600081115b6140a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4d6173746572436865663a204b737761702072617465206d757374206265206760448201527f726561746572207468616e2030000000000000000000000000000000000000006064820152608401610ac5565b64e8d4a510006140ba82610d058686613226565b14614147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d6173746572436865663a20546f74616c2072617465206d757374206265203160448201527f65313200000000000000000000000000000000000000000000000000000000006064820152608401610ac5565b6141516000612f8a565b600a839055600b829055600c81905560408051848152602081018490529081018290527fae2d2e7d1ae84564fc72227253ce0f36a007209f7fd5ec414dea80e5af2fb5b09060600160405180910390a1505050565b60008181527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d3602052604081206109739061469b565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1661133f5773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055516142a390829061545e565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526112f59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016138b6565b801561133f57600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156143c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e691906153a9565b9050818110156143f4578091505b600054610e349073ffffffffffffffffffffffffffffffffffffffff168484613864565b6144228282613f0b565b61133f576144478173ffffffffffffffffffffffffffffffffffffffff1660146146a5565b6144528360206146a5565b60405160200161446392919061547a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610ac5916004016154fb565b60006125208373ffffffffffffffffffffffffffffffffffffffff84166148e8565b60006125208373ffffffffffffffffffffffffffffffffffffffff8416614937565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1615611cf2576145738173ffffffffffffffffffffffffffffffffffffffff1660146146a5565b604051602001614463919061554c565b60006145e5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614a2a9092919063ffffffff16565b805190915015610e34578080602001905181019061460391906155b8565b610e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ac5565b60006125208383614a41565b6000610973825490565b606060006146b48360026153d5565b6146bf9060026153c2565b67ffffffffffffffff8111156146d7576146d7614f1b565b6040519080825280601f01601f191660200182016040528015614701576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110614738576147386152ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061479b5761479b6152ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006147d78460026153d5565b6147e29060016153c2565b90505b600181111561487f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614823576148236152ae565b1a60f81b828281518110614839576148396152ae565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93614878816155d5565b90506147e5565b50831561096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ac5565b600081815260018301602052604081205461492f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610973565b506000610973565b60008181526001830160205260408120548015614a2057600061495b600183615427565b855490915060009061496f90600190615427565b90508181146149d457600086600001828154811061498f5761498f6152ae565b90600052602060002001549050808760000184815481106149b2576149b26152ae565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806149e5576149e561560a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610973565b6000915050610973565b6060614a398484600085614a6b565b949350505050565b6000826000018281548110614a5857614a586152ae565b9060005260206000200154905092915050565b606082471015614afd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ac5565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051614b26919061545e565b60006040518083038185875af1925050503d8060008114614b63576040519150601f19603f3d011682016040523d82523d6000602084013e614b68565b606091505b5091509150614b7987838387614b84565b979650505050505050565b60608315614c1a578251600003614c135773ffffffffffffffffffffffffffffffffffffffff85163b614c13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ac5565b5081614a39565b614a398383815115614c2f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac591906154fb565b73ffffffffffffffffffffffffffffffffffffffff81168114611cf257600080fd5b60008060408385031215614c9857600080fd5b8235614ca381614c63565b946020939093013593505050565b600080600060608486031215614cc657600080fd5b8335614cd181614c63565b95602085013595506040909401359392505050565b600060208284031215614cf857600080fd5b5035919050565b60008083601f840112614d1157600080fd5b50813567ffffffffffffffff811115614d2957600080fd5b6020830191508360208260051b8501011115614d4457600080fd5b9250929050565b60008060008060408587031215614d6157600080fd5b843567ffffffffffffffff80821115614d7957600080fd5b614d8588838901614cff565b90965094506020870135915080821115614d9e57600080fd5b50614dab87828801614cff565b95989497509550505050565b60008060408385031215614dca57600080fd5b50508035926020909101359150565b60008060408385031215614dec57600080fd5b823591506020830135614dfe81614c63565b809150509250929050565b600060208284031215614e1b57600080fd5b813561096d81614c63565b60008083601f840112614e3857600080fd5b50813567ffffffffffffffff811115614e5057600080fd5b6020830191508360208260061b8501011115614d4457600080fd5b8015158114611cf257600080fd5b600080600060408486031215614e8e57600080fd5b833567ffffffffffffffff811115614ea557600080fd5b614eb186828701614e26565b9094509250506020840135614ec581614e6b565b809150509250925092565b600060208284031215614ee257600080fd5b813561096d81614e6b565b600080600060608486031215614f0257600080fd5b83359250602084013591506040840135614ec581614e6b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614f9157614f91614f1b565b604052919050565b600067ffffffffffffffff821115614fb357614fb3614f1b565b5060051b60200190565b60006020808385031215614fd057600080fd5b823567ffffffffffffffff811115614fe757600080fd5b8301601f81018513614ff857600080fd5b803561500b61500682614f99565b614f4a565b81815260059190911b8201830190838101908783111561502a57600080fd5b928401925b82841015614b7957833561504281614c63565b8252928401929084019061502f565b600080600080600060a0868803121561506957600080fd5b85359450602086013561507b81614c63565b9350604086013561508b81614e6b565b92506060860135915060808601356150a281614e6b565b809150509295509295909350565b60008060008060008060a087890312156150c957600080fd5b863567ffffffffffffffff8111156150e057600080fd5b6150ec89828a01614e26565b909750955050602087013593506040870135925060608701359150608087013561511581614e6b565b809150509295509295509295565b6000806000806080858703121561513957600080fd5b843593506020850135925060408501359150606085013561515981614e6b565b939692955090935050565b6000806040838503121561517757600080fd5b823561518281614c63565b91506020830135614dfe81614e6b565b6000806000604084860312156151a757600080fd5b83356151b281614c63565b9250602084013567ffffffffffffffff808211156151cf57600080fd5b818601915086601f8301126151e357600080fd5b8135818111156151f257600080fd5b87602082850101111561520457600080fd5b6020830194508093505050509250925092565b6000806040838503121561522a57600080fd5b823567ffffffffffffffff81111561524157600080fd5b8301601f8101851361525257600080fd5b8035602061526261500683614f99565b82815260059290921b8301810191818101908884111561528157600080fd5b938201935b8385101561529f57843582529382019390820190615286565b98969091013596505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261531257600080fd5b83018035915067ffffffffffffffff82111561532d57600080fd5b602001915036819003821315614d4457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036153a2576153a2615342565b5060010190565b6000602082840312156153bb57600080fd5b5051919050565b8082018082111561097357610973615342565b808202811582820484141761097357610973615342565b600082615422577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561097357610973615342565b60005b8381101561545557818101518382015260200161543d565b50506000910152565b6000825161547081846020870161543a565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516154b281601785016020880161543a565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516154ef81602884016020880161543a565b01602801949350505050565b602081526000825180602084015261551a81604085016020870161543a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f53696d706c65426c61636b6c6973743a206163636f756e74200000000000000081526000825161558481601985016020870161543a565b7f20697320626c61636b6c697374656400000000000000000000000000000000006019939091019283015250602801919050565b6000602082840312156155ca57600080fd5b815161096d81614e6b565b6000816155e4576155e4615342565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212203b79d42fcdc047d3d86b4fd45ffbbd443b6226b4ab2ec498ef16bfe01428553b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,bool,uint256,bool)": {
        "params": {
          "_allocPoint": "Number of allocation points for the new pool.",
          "_isRegular": "Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are",
          "_lpToken": "Address of the LP BEP-20 token.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation. only for KSWAP distributions within Kyoto Swap products."
        }
      },
      "blacklist(address,string)": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "blacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "burnKswap(bool)": {
        "params": {
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to deposit.",
          "_pid": "The id of the pool. See `poolInfo`."
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`."
        }
      },
      "getBoostMultiplier(address,uint256)": {
        "params": {
          "_pid": "The pool id.",
          "_user": "The user address."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isBlacklisted(address)": {
        "details": "Returns `true` if `account` is blacklisted."
      },
      "isBlacklisted(address[])": {
        "details": "Returns `true` if any address in `accounts` is on the blacklist."
      },
      "kswapPerBlock(bool)": {
        "params": {
          "_isRegular": "If the pool belongs to regular or special."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingKswap(uint256,address)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`.",
          "_user": "Address of the user."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "set((uint256,uint256)[],bool)": {
        "params": {
          "_withUpdate": "Whether call \"massUpdatePools\" operation.",
          "poolAlocations": "List of SetPoolAllocationInfo to update"
        }
      },
      "set(uint256,uint256,bool)": {
        "params": {
          "_allocPoint": "New number of allocation points for the pool.",
          "_pid": "The id of the pool. See `poolInfo`.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "setPoolLastRewardBlock(uint256,uint256)": {
        "params": {
          "_pid": "The pool id to update.",
          "newLastRewardBlock": "The new value."
        }
      },
      "setPoolLastRewardBlock(uint256[],uint256)": {
        "params": {
          "_pids": "The list of pool ids to update.",
          "newLastRewardBlock": "The new value."
        }
      },
      "setRoleAdmin(bytes32,bytes32)": {
        "details": "Sets `adminRole` as ``role``'s admin role. Emits a {RoleAdminChanged} event."
      },
      "unblacklist(address,string)": {
        "details": "External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}"
      },
      "unblacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - The contract must be paused."
      },
      "updateBoostMultiplier(address,uint256,uint256)": {
        "params": {
          "_newMultiplier": "New boost multiplier.",
          "_pid": "The pool id for the boost factor updates.",
          "_user": "The user address for boost factor updates."
        }
      },
      "updateKswapRate(uint256,uint256,uint256,bool)": {
        "params": {
          "_burnRate": "The % of KSWAP to burn each block.",
          "_regularFarmRate": "The % of KSWAP to regular pools each block.",
          "_specialFarmRate": "The % of KSWAP to special pools each block.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      },
      "updateRatesAndPools((uint256,uint256)[],uint256,uint256,uint256,bool)": {
        "params": {
          "_burnRate": "The % of KSWAP to burn each block.",
          "_regularFarmRate": "The % of KSWAP to regular pools each block.",
          "_specialFarmRate": "The % of KSWAP to special pools each block.",
          "poolAlocations": "List of SetPoolAllocationInfo to update"
        }
      },
      "updateWhiteList(address,bool)": {
        "params": {
          "_isValid": "The flag for valid or invalid.",
          "_user": "The address to be updated."
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to withdraw.",
          "_pid": "The id of the pool. See `poolInfo`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BOOST_PRECISION()": {
        "notice": "Basic boost factor, none boosted user's boost factor"
      },
      "DEPRECATED_boostContract()": {
        "notice": "The contract handles the share boosts."
      },
      "DEPRECATED_burnAdmin()": {
        "notice": "The only address can withdraw all the burn KSWAP."
      },
      "KSWAP_RATE_TOTAL_PRECISION()": {
        "notice": "total kswap rate = toBurn + toRegular + toSpecial"
      },
      "MASTERCHEF_KSWAP_PER_BLOCK()": {
        "notice": "40 KSWAP per block in MC"
      },
      "MAX_BOOST_PRECISION()": {
        "notice": "Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION"
      },
      "add(uint256,address,bool,uint256,bool)": {
        "notice": "Add a new pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "burnKswap(bool)": {
        "notice": "Send KSWAP pending for burn to `burnAdmin`."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to pool."
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about the rewards. EMERGENCY ONLY."
      },
      "getBoostMultiplier(address,uint256)": {
        "notice": "Get user boost multiplier for specific pool id."
      },
      "kswapPerBlock(bool)": {
        "notice": "Calculates and returns the `amount` of KSWAP per block."
      },
      "kswapPerBlockToBurn()": {
        "notice": "Calculates and returns the `amount` of KSWAP per block to burn."
      },
      "kswapRateToBurn()": {
        "notice": "The last block number of KSWAP burn action being executed."
      },
      "lpToken(uint256)": {
        "notice": "Address of the LP token for each MCV2 pool."
      },
      "massUpdatePools()": {
        "notice": "Update kswap reward for all the active pools. Be careful of gas spending!"
      },
      "pendingKswap(uint256,address)": {
        "notice": "View function for checking pending KSWAP rewards."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each MCV2 pool."
      },
      "poolLength()": {
        "notice": "Returns the number of MC pools."
      },
      "set((uint256,uint256)[],bool)": {
        "notice": "Update the given pool's KSWAP allocation point. Can only be called by the owner."
      },
      "set(uint256,uint256,bool)": {
        "notice": "Update the given pool's KSWAP allocation point. Can only be called by the owner."
      },
      "setPoolLastRewardBlock(uint256,uint256)": {
        "notice": "Updates the lastRewardBlock for a pool.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`."
      },
      "setPoolLastRewardBlock(uint256[],uint256)": {
        "notice": "Updates the lastRewardBlock for a list of pools.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`."
      },
      "setTreasuryAddress(address)": {
        "notice": "Update the treasury address."
      },
      "totalRegularAllocPoint()": {
        "notice": "Total regular allocation points. Must be the sum of all regular pools' allocation points."
      },
      "totalSpecialAllocPoint()": {
        "notice": "Total special allocation points. Must be the sum of all special pools' allocation points."
      },
      "updateBoostMultiplier(address,uint256,uint256)": {
        "notice": "Update user boost factor."
      },
      "updateKswapRate(uint256,uint256,uint256,bool)": {
        "notice": "Update the % of KSWAP distributions for burn, regular pools and special pools."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables for the given pool."
      },
      "updateRatesAndPools((uint256,uint256)[],uint256,uint256,uint256,bool)": {
        "notice": "Updates the given pool's allocations and the pool rates."
      },
      "updateWhiteList(address,bool)": {
        "notice": "Update whitelisted addresses for special pools."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each pool user."
      },
      "whiteList(address)": {
        "notice": "The whitelist of addresses allowed to deposit in special pools."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4607,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswap",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20Mintable)6461"
      },
      {
        "astId": 4609,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4612,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "DEPRECATED_burnAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4615,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "DEPRECATED_boostContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4620,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)6483_storage)dyn_storage"
      },
      {
        "astId": 4625,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "lpToken",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IERC20)175)dyn_storage"
      },
      {
        "astId": 4633,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6472_storage))"
      },
      {
        "astId": 4638,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "whiteList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4641,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "totalRegularAllocPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4644,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "totalSpecialAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4672,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswapRateToBurn",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4674,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswapRateToRegularFarm",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4676,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswapRateToSpecialFarm",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4678,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "lastBurnedBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)175)dyn_storage": {
        "base": "t_contract(IERC20)175",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)6483_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6483_storage",
        "encoding": "dynamic_array",
        "label": "struct IMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)175": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Mintable)6461": {
        "encoding": "inplace",
        "label": "contract IERC20Mintable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)6472_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6472_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6472_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6472_storage)"
      },
      "t_struct(PoolInfo)6483_storage": {
        "encoding": "inplace",
        "label": "struct IMasterChef.PoolInfo",
        "members": [
          {
            "astId": 6474,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "accKswapPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6476,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6478,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6480,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "totalBoostedShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6482,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "isRegular",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)6472_storage": {
        "encoding": "inplace",
        "label": "struct IMasterChef.UserInfo",
        "members": [
          {
            "astId": 6467,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6469,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6471,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "boostMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}