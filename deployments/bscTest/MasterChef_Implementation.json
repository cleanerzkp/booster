{
  "address": "0x10A901416163b791338E0CDaa4D1a59cf6212394",
  "abi": [
    {
      "inputs": [],
      "name": "InitializerContractAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializerContractIsNotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "InitializerVersionAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRegular",
          "type": "bool"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "boostContract",
          "type": "address"
        }
      ],
      "name": "UpdateBoostContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "UpdateBoostMultiplier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "UpdateBurnAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "regularFarmRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "specialFarmRate",
          "type": "uint256"
        }
      ],
      "name": "UpdateCakeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accKswapPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "UpdateWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_KSWAP_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOST_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KSWAP_RATE_TOTAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTERCHEF_KSWAP_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BOOST_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isRegular",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_startBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "burnKswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getBoostMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "kswap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "burnAdmin_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isRegular",
              "type": "bool"
            }
          ],
          "internalType": "struct IMasterChefAdmin.AddNewPoolInfo[]",
          "name": "newPools",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswap",
      "outputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRegular",
          "type": "bool"
        }
      ],
      "name": "kswapPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapPerBlockToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapRateToBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapRateToRegularFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kswapRateToSpecialFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBurnedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingKswap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accKswapPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBoostedShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegular",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newLastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "setPoolLastRewardBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "newLastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "setPoolLastRewardBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRegularAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSpecialAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "reasons",
          "type": "string[]"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "unblacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBoostContract",
          "type": "address"
        }
      ],
      "name": "updateBoostContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateBoostMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updateBurnAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_regularFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_specialFarmRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateKswapRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accKswapPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBoostedShare",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isRegular",
              "type": "bool"
            }
          ],
          "internalType": "struct IMasterChef.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isValid",
          "type": "bool"
        }
      ],
      "name": "updateWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bcc95d318ee239934e9193b6e88ac40d502a0c7f5e1d96563eb33e41546adb6",
  "receipt": {
    "to": null,
    "from": "0x8465B78e3308bCDE4b72ab9B3CD1a51bEc954f01",
    "contractAddress": "0x10A901416163b791338E0CDaa4D1a59cf6212394",
    "transactionIndex": 69,
    "gasUsed": "4562776",
    "logsBloom": "0x
    "blockHash": "0x7f635fc5471dacc98b982c2dc78688faf673938a5e3c1b4d3079475abed08f82",
    "transactionHash": "0x4bcc95d318ee239934e9193b6e88ac40d502a0c7f5e1d96563eb33e41546adb6",
    "logs": [],
    "blockNumber": 23662874,
    "cumulativeGasUsed": "13503008",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "066e7e17ed6143df1a5b3813686b840e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InitializerContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializerContractIsNotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"InitializerVersionAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"UpdateBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateBoostMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateBurnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regularFarmRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFarmRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCakeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accKswapPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_KSWAP_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KSWAP_RATE_TOTAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_KSWAP_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"burnKswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"kswap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnAdmin_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct IMasterChefAdmin.AddNewPoolInfo[]\",\"name\":\"newPools\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswap\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"}],\"name\":\"kswapPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapPerBlockToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapRateToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapRateToRegularFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswapRateToSpecialFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingKswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accKswapPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolLastRewardBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"newLastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolLastRewardBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRegularAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpecialAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"reasons\",\"type\":\"string[]\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBoostContract\",\"type\":\"address\"}],\"name\":\"updateBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateBurnAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateKswapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accKswapPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct IMasterChef.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,bool,uint256,bool)\":{\"params\":{\"_allocPoint\":\"Number of allocation points for the new pool.\",\"_isRegular\":\"Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\",\"_lpToken\":\"Address of the LP BEP-20 token.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation. only for KSWAP distributions within Kyoto Swap products.\"}},\"blacklist(address,string)\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"blacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"burnKswap(bool)\":{\"params\":{\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"deposit(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to deposit.\",\"_pid\":\"The id of the pool. See `poolInfo`.\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\"}},\"getBoostMultiplier(address,uint256)\":{\"params\":{\"_pid\":\"The pool id.\",\"_user\":\"The user address.\"}},\"isBlacklisted(address)\":{\"details\":\"Returns `true` if `account` is blacklisted.\"},\"isBlacklisted(address[])\":{\"details\":\"Returns `true` if any address in `accounts` is on the blacklist.\"},\"kswapPerBlock(bool)\":{\"params\":{\"_isRegular\":\"If the pool belongs to regular or special.\"}},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingKswap(uint256,address)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\",\"_user\":\"Address of the user.\"}},\"set(uint256,uint256,bool)\":{\"params\":{\"_allocPoint\":\"New number of allocation points for the pool.\",\"_pid\":\"The id of the pool. See `poolInfo`.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"setPoolLastRewardBlock(uint256,uint256)\":{\"params\":{\"_pid\":\"The pool id to update.\",\"newLastRewardBlock\":\"The new value.\"}},\"setPoolLastRewardBlock(uint256[],uint256)\":{\"params\":{\"_pids\":\"The list of pool ids to update.\",\"newLastRewardBlock\":\"The new value.\"}},\"unblacklist(address,string)\":{\"details\":\"External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}\"},\"unblacklist(address[],string[])\":{\"details\":\"External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - The contract must be paused.\"},\"updateBoostContract(address)\":{\"params\":{\"_newBoostContract\":\"The new address for handling all the share boosts.\"}},\"updateBoostMultiplier(address,uint256,uint256)\":{\"params\":{\"_newMultiplier\":\"New boost multiplier.\",\"_pid\":\"The pool id for the boost factor updates.\",\"_user\":\"The user address for boost factor updates.\"}},\"updateBurnAdmin(address)\":{\"params\":{\"_newAdmin\":\"The new burn admin address.\"}},\"updateKswapRate(uint256,uint256,uint256,bool)\":{\"params\":{\"_burnRate\":\"The % of KSWAP to burn each block.\",\"_regularFarmRate\":\"The % of KSWAP to regular pools each block.\",\"_specialFarmRate\":\"The % of KSWAP to special pools each block.\",\"_withUpdate\":\"Whether call \\\"massUpdatePools\\\" operation.\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"The id of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"updateWhiteList(address,bool)\":{\"params\":{\"_isValid\":\"The flag for valid or invalid.\",\"_user\":\"The address to be updated.\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to withdraw.\",\"_pid\":\"The id of the pool. See `poolInfo`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BOOST_PRECISION()\":{\"notice\":\"Basic boost factor, none boosted user's boost factor\"},\"KSWAP_RATE_TOTAL_PRECISION()\":{\"notice\":\"total kswap rate = toBurn + toRegular + toSpecial\"},\"MASTERCHEF_KSWAP_PER_BLOCK()\":{\"notice\":\"40 KSWAP per block in MC\"},\"MAX_BOOST_PRECISION()\":{\"notice\":\"Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\"},\"add(uint256,address,bool,uint256,bool)\":{\"notice\":\"Add a new pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"boostContract()\":{\"notice\":\"The contract handles the share boosts.\"},\"burnAdmin()\":{\"notice\":\"The only address can withdraw all the burn KSWAP.\"},\"burnKswap(bool)\":{\"notice\":\"Send KSWAP pending for burn to `burnAdmin`.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to pool.\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about the rewards. EMERGENCY ONLY.\"},\"getBoostMultiplier(address,uint256)\":{\"notice\":\"Get user boost multiplier for specific pool id.\"},\"kswapPerBlock(bool)\":{\"notice\":\"Calculates and returns the `amount` of KSWAP per block.\"},\"kswapPerBlockToBurn()\":{\"notice\":\"Calculates and returns the `amount` of KSWAP per block to burn.\"},\"kswapRateToBurn()\":{\"notice\":\"The last block number of KSWAP burn action being executed.\"},\"lpToken(uint256)\":{\"notice\":\"Address of the LP token for each MCV2 pool.\"},\"massUpdatePools()\":{\"notice\":\"Update kswap reward for all the active pools. Be careful of gas spending!\"},\"pendingKswap(uint256,address)\":{\"notice\":\"View function for checking pending KSWAP rewards.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each MCV2 pool.\"},\"poolLength()\":{\"notice\":\"Returns the number of MC pools.\"},\"set(uint256,uint256,bool)\":{\"notice\":\"Update the given pool's KSWAP allocation point. Can only be called by the owner.\"},\"setPoolLastRewardBlock(uint256,uint256)\":{\"notice\":\"Updates the lastRewardBlock for a pool.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`.\"},\"setPoolLastRewardBlock(uint256[],uint256)\":{\"notice\":\"Updates the lastRewardBlock for a list of pools.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`.\"},\"setTreasuryAddress(address)\":{\"notice\":\"Update the treasury address.\"},\"totalRegularAllocPoint()\":{\"notice\":\"Total regular allocation points. Must be the sum of all regular pools' allocation points.\"},\"totalSpecialAllocPoint()\":{\"notice\":\"Total special allocation points. Must be the sum of all special pools' allocation points.\"},\"updateBoostContract(address)\":{\"notice\":\"Update boost contract address and max boost factor.\"},\"updateBoostMultiplier(address,uint256,uint256)\":{\"notice\":\"Update user boost factor.\"},\"updateBurnAdmin(address)\":{\"notice\":\"Update burn admin address.\"},\"updateKswapRate(uint256,uint256,uint256,bool)\":{\"notice\":\"Update the % of KSWAP distributions for burn, regular pools and special pools.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables for the given pool.\"},\"updateWhiteList(address,bool)\":{\"notice\":\"Update whitelisted addresses for special pools.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each pool user.\"},\"whiteList(address)\":{\"notice\":\"The whitelist of addresses allowed to deposit in special pools.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin AccessControlEnumerable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControl\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControlEnumerable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\\n */\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Storage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.access.LibAccessControl\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _storage().roles[role].members[account] ||\\n            _storage().roles[getRoleAdmin(role)].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * @notice This function is identical to {checkRole} but is following the naming convention.\\n     */\\n    function enforceRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return _storage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _storage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _storage().roles[role].members[account] = true;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].add(account);\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _storage().roles[role].members[account] = false;\\n            // slither-disable-next-line unused-return\\n            _storage().roleMembers[role].remove(account);\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return _storage().roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return _storage().roleMembers[role].length();\\n    }\\n}\\n\",\"keccak256\":\"0x4ed5e921ffcea325dd43880c20ad89149bf959132eb32a137efd94dc645d51bf\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library with a set of default roles to use across different other contracts.\\n */\\nlibrary LibRoles {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant BLACKLIST_MANAGER_ROLE =\\n        keccak256(\\\"BLACKLIST_MANAGER_ROLE\\\");\\n    bytes32 public constant PAUSE_MANAGER_ROLE =\\n        keccak256(\\\"PAUSE_MANAGER_ROLE\\\");\\n    bytes32 public constant STABLE_PRICE_MANAGER_ROLE =\\n        keccak256(\\\"STABLE_PRICE_MANAGER_ROLE\\\");\\n    bytes32 public constant TESTER_ROLE = keccak256(\\\"TESTER_ROLE\\\");\\n    bytes32 public constant TOKEN_TAXES_MANAGER =\\n        keccak256(\\\"TOKEN_TAXES_MANAGER\\\");\\n    bytes32 public constant TOKEN_REFLECTION_MANAGER =\\n        keccak256(\\\"TOKEN_REFLECTION_MANAGER\\\");\\n}\\n\",\"keccak256\":\"0x216d4885ce42ca57b0ee30117078d724af39c4aaf8d114c1253ccf29a3e5a6ef\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/ISimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/*\\n * @dev External interface of a simple blacklist.\\n */\\ninterface ISimpleBlacklist {\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Check if `account` is on the blacklist.\\n     */\\n    function isBlacklisted(address account) external view returns (bool);\\n\\n    /*\\n     * @dev Check if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        returns (bool);\\n\\n    /*\\n     * @dev Adds `account` to the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {Blacklisted} event, if `account` was added to the blacklist.\\n     */\\n    function blacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Adds `accounts` to the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {Blacklisted} events, for each account that was added to the blacklist\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n\\n    /*\\n     * @dev Removes `account` from the blacklist with `reason`.\\n     *\\n     * The `reason` is optional and can be an empty string.\\n     *\\n     * Emits {UnBlacklisted} event, if `account` was removed from the blacklist\\n     */\\n    function unblacklist(address account, string calldata reason) external;\\n\\n    /*\\n     * @dev Removes multiple `accounts` from the blacklist with `reasons`.\\n     *\\n     * The `reasons` is optional and can be an array of empty strings.\\n     * Length of the `accounts`and `reasons` arrays must be equal.\\n     *\\n     * Emits {UnBlacklisted} events, for each account that was removed from the blacklist\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external;\\n}\\n\",\"keccak256\":\"0xa8e74fdac0740629f464bfc2f7a6a54ee804e5ab98b0fe35e4d36c27889913a0\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/LibSimpleBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibSimpleBlacklist {\\n    struct Storage {\\n        mapping(address => bool) accounts;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.blacklist.LibSimpleBlacklist\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /*\\n     * @dev Emitted when an address was added to the blacklist\\n     * @param account The address of the account added to the blacklist\\n     * @param reason The reason string\\n     */\\n    event Blacklisted(address indexed account, string indexed reason);\\n\\n    /*\\n     * @dev Emitted when an address was removed from the blacklist\\n     * @param account The address of the account removed from the blacklist\\n     * @param reason The reason string\\n     */\\n    event UnBlacklisted(address indexed account, string indexed reason);\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is blacklisted.\\n     */\\n    function enforceNotBlacklisted() internal view {\\n        checkBlacklisted(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     */\\n    function enforceNotBlacklisted(address account) internal view {\\n        checkBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account) internal view returns (bool) {\\n        return _storage().accounts[account];\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            if (isBlacklisted(accounts[index])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is blacklisted.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^SimpleBlacklist: account (0x[0-9a-f]{40}) is blacklisted$/\\n     */\\n    function checkBlacklisted(address account) internal view {\\n        if (isBlacklisted(account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"SimpleBlacklist: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is blacklisted\\\"\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds `account` to the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function blacklist(address account, string memory reason) internal {\\n        if (!isBlacklisted(account)) {\\n            _storage().accounts[account] = true;\\n            emit Blacklisted(account, reason);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes `account` from the blacklist.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function unblacklist(address account, string memory reason) internal {\\n        if (isBlacklisted(account)) {\\n            _storage().accounts[account] = false;\\n            emit UnBlacklisted(account, reason);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc32cb035e0ff42973d8637b736f3c51eacbfac1db557b1dae3cd583194d4015c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibSimpleBlacklist} from \\\"./LibSimpleBlacklist.sol\\\";\\nimport {ISimpleBlacklist} from \\\"./ISimpleBlacklist.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Contract module that exposes athe interface for a simple blacklist.\\n */\\ncontract SimpleBlacklistFacet is ISimpleBlacklist {\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.blacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.blacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.blacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev External function to remove `account` from the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-unblacklist}\\n     *\\n     */\\n    function unblacklist(address account, string calldata reason)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        LibSimpleBlacklist.unblacklist(account, reason);\\n    }\\n\\n    /**\\n     * @dev External function to add `account` to the blacklist.\\n     *\\n     * WARNING: This function is abstract, to enforce it's implementation\\n     *          in the final contract. This is important to make sure\\n     *          the final contraqct's access control mechanism will be used!\\n     *\\n     * See {ISimpleBlacklist-blacklist}\\n     *\\n     */\\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\\n        external\\n        virtual\\n        override\\n    {\\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\\n\\n        if (reasons.length > 0) {\\n            // solhint-disable-next-line reason-string\\n            require(\\n                accounts.length == reasons.length,\\n                \\\"SimpleBlacklist: Not enough reasons\\\"\\n            );\\n\\n            for (uint256 index = 0; index < accounts.length; index++) {\\n                LibSimpleBlacklist.unblacklist(accounts[index], reasons[index]);\\n            }\\n\\n            return;\\n        }\\n\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            LibSimpleBlacklist.unblacklist(accounts[index], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` is blacklisted.\\n     */\\n    function isBlacklisted(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\\n     */\\n    function isBlacklisted(address[] memory accounts)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return LibSimpleBlacklist.isBlacklisted(accounts);\\n    }\\n}\\n\",\"keccak256\":\"0x0c9ef37a0a0c9024300f286d379229e9805d7ae01feea1eba6f06249d0a0ad54\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Simple interface for pausable contracts.\\n */\\ninterface IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x957a95f5c424cda473f53fcec5fe3f01cd5a650bb11e2281c0314fa3fe8c2dc6\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\n/**\\n * @dev Library version of the OpenZeppelin Pausable contract with Diamond storage.\\n * See: https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable\\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n */\\nlibrary LibPausable {\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.pausable.LibPausable\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused() internal view {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when paused.\\n     */\\n    function enforceNotPaused(address address1, address address2)\\n        internal\\n        view\\n    {\\n        require(\\n            !paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address1) ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address2),\\n            \\\"Pausable: paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Reverts when not paused.\\n     */\\n    function enforcePaused() internal view {\\n        require(\\n            paused() ||\\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\\n            \\\"Pausable: not paused\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() internal view returns (bool) {\\n        return _storage().paused;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function pause() internal {\\n        _storage().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function unpause() internal {\\n        _storage().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x3c0dca0212cf1994b4005ace39c6a29bb2e258f12d5845eca9cb3608f90b8a1c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IPausable} from \\\"./IPausable.sol\\\";\\nimport {LibPausable} from \\\"./LibPausable.sol\\\";\\nimport {LibAccessControl} from \\\"../access/LibAccessControl.sol\\\";\\nimport {LibRoles} from \\\"../access/LibRoles.sol\\\";\\n\\ncontract PausableFacet is IPausable {\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool) {\\n        return LibPausable.paused();\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforceNotPaused();\\n\\n        LibPausable.pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external {\\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\\n        LibPausable.enforcePaused();\\n\\n        LibPausable.unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x3d7ad0ce3f15bcd9d9b30580037448ac57eebfd4f60303da4e348fe2811a12df\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/IReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IReentrancyGuard {\\n    error ReentrancyGuardReentrantCall();\\n}\\n\",\"keccak256\":\"0xe43f60aa79117012c1e307acbbbc078f153e33d6c546bbf94c242dc4b0eae168\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/LibReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibReentrancyGuard {\\n    uint256 internal constant NOT_ENTERED = 1;\\n    uint256 internal constant ENTERED = 2;\\n\\n    struct Storage {\\n        uint256 status;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarlabs.modules.reentrancy-guard.LibReentrancyGuard\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    function isEntered() internal view returns (bool) {\\n        return _storage().status == ENTERED;\\n    }\\n\\n    function enter() internal {\\n        _storage().status = ENTERED;\\n    }\\n\\n    function exit() internal {\\n        _storage().status = NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xaae9840e5d5ce8f5d1a56c5dd03548c2cea6e3e90b28caf177b5963b87d439be\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IReentrancyGuard} from \\\"./IReentrancyGuard.sol\\\";\\nimport {LibReentrancyGuard} from \\\"./LibReentrancyGuard.sol\\\";\\n\\nabstract contract ReentrancyGuard is IReentrancyGuard {\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, isEntered will be false\\n        if (LibReentrancyGuard.isEntered()) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        LibReentrancyGuard.enter();\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        LibReentrancyGuard.exit();\\n    }\\n}\\n\",\"keccak256\":\"0xf809444ff3b71695a5442412b5a3cdbb747f818de85fc99517c0d2292644b7bc\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/IInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\ninterface IInitializer {\\n    error InitializerContractIsInitializing();\\n    error InitializerContractIsNotInitializing();\\n    error InitializerContractAlreadyInitialized();\\n    error InitializerVersionAlreadyInitialized(uint8 version);\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n}\\n\",\"keccak256\":\"0x08e2f2250d1a61bf4cfb07b788cdf0f1e838c068c72f5bb6acc9a20b5acab88c\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\nimport {LibInitializer} from \\\"./LibInitializer.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Initializer is IInitializer {\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !LibInitializer.isInitializing();\\n\\n        if (\\n            (isTopLevelCall && !LibInitializer.isInitialized(1)) ||\\n            (!Address.isContract(address(this)) &&\\n                LibInitializer.getInitializedVersion() == 1)\\n        ) {\\n            LibInitializer.setInitialized(1);\\n\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(true);\\n            }\\n            _;\\n            if (isTopLevelCall) {\\n                LibInitializer.setInitializing(false);\\n                emit Initialized(1);\\n            }\\n        } else {\\n            revert InitializerContractAlreadyInitialized();\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        if (\\n            LibInitializer.isInitializing() ||\\n            LibInitializer.isInitialized(version)\\n        ) {\\n            revert InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        LibInitializer.setInitialized(1);\\n        LibInitializer.setInitializing(true);\\n        _;\\n        LibInitializer.setInitializing(false);\\n        emit Initialized(version);\\n    }\\n}\\n\",\"keccak256\":\"0x99a1507d250301b2fee05d22894d54e97a8373dcf8cffc21bb280a00544e8d04\",\"license\":\"MIT\"},\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/LibInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IInitializer} from \\\"./IInitializer.sol\\\";\\n\\nlibrary LibInitializer {\\n    struct Storage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint8 initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool initializing;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256(\\\"solarprotocol.contracts.utils.initializer.LibInitializer\\\");\\n\\n    /**\\n     * @dev Returns the storage.\\n     */\\n    function _storage() private pure returns (Storage storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            s.slot := slot\\n        }\\n        // solhint-enable\\n    }\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    function enforceIsInitializing() internal view {\\n        if (!isInitializing()) {\\n            revert IInitializer.InitializerContractIsNotInitializing();\\n        }\\n    }\\n\\n    function isInitializing() internal view returns (bool) {\\n        return _storage().initializing;\\n    }\\n\\n    function setInitializing(bool value) internal {\\n        _storage().initializing = value;\\n    }\\n\\n    function isInitialized() internal view returns (bool) {\\n        return isInitialized(1);\\n    }\\n\\n    function isInitialized(uint8 version) internal view returns (bool) {\\n        return _storage().initialized >= version;\\n    }\\n\\n    function getInitializedVersion() internal view returns (uint8) {\\n        return _storage().initialized;\\n    }\\n\\n    function setInitialized(uint8 version) internal {\\n        if (isInitialized(version)) {\\n            revert IInitializer.InitializerVersionAlreadyInitialized(version);\\n        }\\n\\n        _storage().initialized = version;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function disable() internal {\\n        if (isInitializing()) {\\n            revert IInitializer.InitializerContractIsInitializing();\\n        }\\n\\n        if (!isInitialized(type(uint8).max)) {\\n            setInitialized(type(uint8).max);\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd626fbde2606a1d7a0f8a188eaab3e8d8e3056075f11511b03e6ea3f24f972\",\"license\":\"MIT\"},\"contracts/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IMasterChef} from \\\"./interfaces/IMasterChef.sol\\\";\\nimport {IMasterChefAdmin} from \\\"./interfaces/IMasterChefAdmin.sol\\\";\\nimport {IERC20Mintable} from \\\"./interfaces/IERC20Mintable.sol\\\";\\nimport {Initializer} from \\\"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\\\";\\nimport {ReentrancyGuard} from \\\"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/ReentrancyGuard.sol\\\";\\nimport {PausableFacet, LibPausable} from \\\"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\\\";\\nimport {SimpleBlacklistFacet, LibSimpleBlacklist} from \\\"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract MasterChef is\\n    IMasterChef,\\n    IMasterChefAdmin,\\n    Initializer,\\n    ReentrancyGuard,\\n    PausableFacet,\\n    SimpleBlacklistFacet\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Mintable;\\n\\n    IERC20Mintable public kswap;\\n\\n    // Dev address.\\n    address public treasury;\\n\\n    /// @notice The only address can withdraw all the burn KSWAP.\\n    address public burnAdmin;\\n    /// @notice The contract handles the share boosts.\\n    address public boostContract;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo[] public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    IERC20[] public lpToken;\\n\\n    /// @notice Info of each pool user.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\n    mapping(address => bool) public whiteList;\\n\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\\n    uint256 public totalRegularAllocPoint;\\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\\n    uint256 public totalSpecialAllocPoint;\\n    ///  @notice 40 KSWAP per block in MC\\n    uint256 public constant MASTERCHEF_KSWAP_PER_BLOCK = 40 * 1e18;\\n    uint256 public constant ACC_KSWAP_PRECISION = 1e18;\\n\\n    /// @notice Basic boost factor, none boosted user's boost factor\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\n    /// @notice total kswap rate = toBurn + toRegular + toSpecial\\n    uint256 public constant KSWAP_RATE_TOTAL_PRECISION = 1e12;\\n    /// @notice The last block number of KSWAP burn action being executed.\\n\\n    uint256 public kswapRateToBurn;\\n    uint256 public kswapRateToRegularFarm;\\n    uint256 public kswapRateToSpecialFarm;\\n\\n    uint256 public lastBurnedBlock;\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _isRegular,\\n        uint256 _startBlockNumber,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        _add(_allocPoint, _lpToken, _isRegular, _startBlockNumber, _withUpdate);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\n        updatePool(_pid);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (poolInfo[_pid].isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint\\n                .sub(poolInfo[_pid].allocPoint)\\n                .add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint\\n                .sub(poolInfo[_pid].allocPoint)\\n                .add(_allocPoint);\\n        }\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit SetPool(_pid, _allocPoint);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function pendingKswap(\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accKswapPerShare = pool.accKswapPerShare;\\n        uint256 lpSupply = pool.totalBoostedShare;\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n\\n            uint256 kswapReward = multiplier\\n                .mul(kswapPerBlock(pool.isRegular))\\n                .mul(pool.allocPoint)\\n                .div(\\n                    (\\n                        pool.isRegular\\n                            ? totalRegularAllocPoint\\n                            : totalSpecialAllocPoint\\n                    )\\n                );\\n            accKswapPerShare = accKswapPerShare.add(\\n                kswapReward.mul(ACC_KSWAP_PRECISION).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 boostedAmount = user\\n            .amount\\n            .mul(getBoostMultiplier(_user, _pid))\\n            .div(BOOST_PRECISION);\\n        return\\n            boostedAmount.mul(accKswapPerShare).div(ACC_KSWAP_PRECISION).sub(\\n                user.rewardDebt\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo memory pool = poolInfo[pid];\\n            if (pool.allocPoint != 0) {\\n                updatePool(pid);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function kswapPerBlock(\\n        bool _isRegular\\n    ) public view returns (uint256 amount) {\\n        if (_isRegular) {\\n            amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToRegularFarm).div(\\n                KSWAP_RATE_TOTAL_PRECISION\\n            );\\n        } else {\\n            amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToSpecialFarm).div(\\n                KSWAP_RATE_TOTAL_PRECISION\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function kswapPerBlockToBurn() public view returns (uint256 amount) {\\n        amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToBurn).div(\\n            KSWAP_RATE_TOTAL_PRECISION\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.totalBoostedShare;\\n            uint256 totalAllocPoint = (\\n                pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint\\n            );\\n\\n            if (lpSupply > 0 && totalAllocPoint > 0) {\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n                uint256 kswapReward = multiplier\\n                    .mul(kswapPerBlock(pool.isRegular))\\n                    .mul(pool.allocPoint)\\n                    .div(totalAllocPoint);\\n                pool.accKswapPerShare = pool.accKswapPerShare.add(\\n                    (kswapReward.mul(ACC_KSWAP_PRECISION).div(lpSupply))\\n                );\\n                kswap.mint(treasury, kswapReward.div(10));\\n                kswap.mint(address(this), kswapReward);\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n            emit UpdatePool(\\n                _pid,\\n                pool.lastRewardBlock,\\n                lpSupply,\\n                pool.accKswapPerShare\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // solhint-disable-next-line reason-string\\n        require(\\n            pool.isRegular || whiteList[msg.sender],\\n            \\\"MasterChef: The address is not available to deposit in this pool\\\"\\n        );\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        if (user.amount > 0) {\\n            settlePendingKswap(msg.sender, _pid, multiplier);\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\n            user.amount = user.amount.add(_amount);\\n\\n            // Update total boosted share.\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(\\n                _amount.mul(multiplier).div(BOOST_PRECISION)\\n            );\\n        }\\n\\n        user.rewardDebt = user\\n            .amount\\n            .mul(multiplier)\\n            .div(BOOST_PRECISION)\\n            .mul(pool.accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        poolInfo[_pid] = pool;\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient\\\");\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        settlePendingKswap(msg.sender, _pid, multiplier);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt = user\\n            .amount\\n            .mul(multiplier)\\n            .div(BOOST_PRECISION)\\n            .mul(pool.accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\n        );\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        LibPausable.enforceNotPaused();\\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        uint256 boostedAmount = amount\\n            .mul(getBoostMultiplier(msg.sender, _pid))\\n            .div(BOOST_PRECISION);\\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount\\n            ? pool.totalBoostedShare.sub(boostedAmount)\\n            : 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function burnKswap(bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\n        uint256 pendingKswapToBurn = multiplier.mul(kswapPerBlockToBurn());\\n\\n        // SafeTransfer KSWAP\\n        _safeTransfer(burnAdmin, pendingKswapToBurn);\\n        lastBurnedBlock = block.number;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateKswapRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\\n            \\\"MasterChef: Kswap rate must be greater than 0\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) ==\\n                KSWAP_RATE_TOTAL_PRECISION,\\n            \\\"MasterChef: Total rate must be 1e12\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        // burn kswap base on old burn kswap rate\\n        burnKswap(false);\\n\\n        kswapRateToBurn = _burnRate;\\n        kswapRateToRegularFarm = _regularFarmRate;\\n        kswapRateToSpecialFarm = _specialFarmRate;\\n\\n        emit UpdateCakeRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newAdmin != address(0),\\n            \\\"MasterChef: Burn admin address must be valid\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newAdmin != burnAdmin,\\n            \\\"MasterChef: Burn admin address is the same with current address\\\"\\n        );\\n        address _oldAdmin = burnAdmin;\\n        burnAdmin = _newAdmin;\\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _user != address(0),\\n            \\\"MasterChef: The white list address must be valid\\\"\\n        );\\n\\n        whiteList[_user] = _isValid;\\n        emit UpdateWhiteList(_user, _isValid);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newBoostContract != address(0) &&\\n                _newBoostContract != boostContract,\\n            \\\"MasterChef: New boost contract address must be valid\\\"\\n        );\\n\\n        boostContract = _newBoostContract;\\n        emit UpdateBoostContract(_newBoostContract);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external nonReentrant {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            boostContract == msg.sender,\\n            \\\"Ownable: caller is not the boost contract\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _user != address(0),\\n            \\\"MasterChef: The user address must be valid\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            poolInfo[_pid].isRegular,\\n            \\\"MasterChef: Only regular farm could be boosted\\\"\\n        );\\n        // solhint-disable-next-line reason-string\\n        require(\\n            _newMultiplier >= BOOST_PRECISION &&\\n                _newMultiplier <= MAX_BOOST_PRECISION,\\n            \\\"MasterChef: Invalid new boost multiplier\\\"\\n        );\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\n        settlePendingKswap(_user, _pid, prevMultiplier);\\n\\n        user.rewardDebt = user\\n            .amount\\n            .mul(_newMultiplier)\\n            .div(BOOST_PRECISION)\\n            .mul(pool.accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        pool.totalBoostedShare = pool\\n            .totalBoostedShare\\n            .sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION))\\n            .add(user.amount.mul(_newMultiplier).div(BOOST_PRECISION));\\n        poolInfo[_pid] = pool;\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\n\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChef\\n     */\\n    function getBoostMultiplier(\\n        address _user,\\n        uint256 _pid\\n    ) public view returns (uint256) {\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function setTreasuryAddress(address _treasury) external {\\n        require(msg.sender == treasury, \\\"dev: wut?\\\");\\n        treasury = _treasury;\\n        emit SetTreasuryAddress(msg.sender, _treasury);\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256 _pid,\\n        uint256 newLastRewardBlock\\n    ) public onlyOwner {\\n        uint256 oldLastRewardBlock = poolInfo[_pid].lastRewardBlock;\\n        require(\\n            oldLastRewardBlock > block.number &&\\n                newLastRewardBlock >= block.number,\\n            \\\"Can't modify history\\\"\\n        );\\n        poolInfo[_pid].lastRewardBlock = newLastRewardBlock;\\n    }\\n\\n    /**\\n     * @inheritdoc IMasterChefAdmin\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256[] memory _pids,\\n        uint256 newLastRewardBlock\\n    ) external onlyOwner {\\n        if (newLastRewardBlock == 0) {\\n            newLastRewardBlock = block.number + 200;\\n        }\\n\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            setPoolLastRewardBlock(_pids[index], newLastRewardBlock);\\n        }\\n    }\\n\\n    function initialize(\\n        IERC20Mintable kswap_,\\n        address treasury_,\\n        address burnAdmin_,\\n        AddNewPoolInfo[] calldata newPools\\n    ) external initializer {\\n        kswap = kswap_;\\n        treasury = treasury_;\\n        burnAdmin = burnAdmin_;\\n\\n        /// @notice KSWAP distribute % for burn\\n        kswapRateToBurn = 989202815829;\\n        /// @notice KSWAP distribute % for regular farm pool\\n        kswapRateToRegularFarm = 10797184170;\\n        /// @notice KSWAP distribute % for special pools\\n        kswapRateToSpecialFarm = 1;\\n\\n        uint256 index = 0;\\n        uint256 newPoolsLength = newPools.length;\\n\\n        while (index < newPoolsLength) {\\n            _add(\\n                newPools[index].allocPoint,\\n                newPools[index].lpToken,\\n                newPools[index].isRegular,\\n                newPools[index].startBlockNumber,\\n                false\\n            );\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        LibPausable.unpause();\\n    }\\n\\n    /// @notice Settles, distribute the pending KSWAP rewards for given user.\\n    /// @param _user The user address for settling rewards.\\n    /// @param _pid The pool id.\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\n    function settlePendingKswap(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _boostMultiplier\\n    ) internal {\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(\\n            BOOST_PRECISION\\n        );\\n        uint256 accKswap = boostedAmount\\n            .mul(poolInfo[_pid].accKswapPerShare)\\n            .div(ACC_KSWAP_PRECISION);\\n        uint256 pending = accKswap.sub(user.rewardDebt);\\n        // SafeTransfer KSWAP\\n        _safeTransfer(_user, pending);\\n    }\\n\\n    /**\\n     * @notice Add a new pool. Can only be called by the owner.\\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n     * @param _allocPoint Number of allocation points for the new pool.\\n     * @param _lpToken Address of the LP BEP-20 token.\\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     * only for KSWAP distributions within Kyoto Swap products.\\n     */\\n    function _add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _isRegular,\\n        uint256 _startBlockNumber,\\n        bool _withUpdate\\n    ) internal {\\n        require(_lpToken.balanceOf(address(this)) >= 0, \\\"None BEP20 tokens\\\");\\n        // stake KSWAP token will cause staked token and reward token mixed up,\\n        // may cause staked tokens withdraw as reward token,never do it.\\n        // solhint-disable-next-line reason-string\\n        require(_lpToken != kswap, \\\"KSWAP token can't be added to farm pools\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (_isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\n        }\\n        lpToken.push(_lpToken);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlockNumber > block.number\\n                    ? _startBlockNumber\\n                    : (block.number + 200),\\n                accKswapPerShare: 0,\\n                isRegular: _isRegular,\\n                totalBoostedShare: 0\\n            })\\n        );\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\n    }\\n\\n    /// @notice Safe Transfer KSWAP.\\n    /// @param _to The KSWAP receiver address.\\n    /// @param _amount transfer KSWAP amounts.\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            uint256 balance = kswap.balanceOf(address(this));\\n            if (balance < _amount) {\\n                _amount = balance;\\n            }\\n            kswap.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _getOwner(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _getOwner() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x575eb4d21fe1bd2245741cfa353cc37f182fc452ac9c14566ba0eda77b089ebd\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IERC20Mintable is IERC20, IERC20Metadata {\\n    function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x67301cdb95ceb5c95ba6aebe3c3e4a541e9424b80e8c3b97fde5b49da013c84c\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChef {\\n    /**\\n     * @notice Info of each MC user.\\n     * `amount` LP token amount the user has provided.\\n     * `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\\n     *\\n     * We do some fancy math here. Basically, any point in time, the amount of KSWAP\\n     * entitled to a user but is pending to be distributed is:\\n     *\\n     *   pending reward = (user share * pool.accKswapPerShare) - user.rewardDebt\\n     *\\n     *   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n     *   1. The pool's `accKswapPerShare` (and `lastRewardBlock`) gets updated.\\n     *   2. User receives the pending reward sent to his/her address.\\n     *   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\\n     *   4. User's `rewardDebt` gets updated.\\n     */\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 boostMultiplier;\\n    }\\n\\n    /**\\n     * @notice Info of each MC pool.\\n     * `allocPoint` The amount of allocation points assigned to the pool.\\n     *     Also known as the amount of \\\"multipliers\\\". Combined with `totalXAllocPoint`, it defines the % of\\n     *     KSWAP rewards each pool gets.\\n     * `accKswapPerShare` Accumulated KSWAPs per share, times 1e12.\\n     * `lastRewardBlock` Last block number that pool update action is executed.\\n     * `isRegular` The flag to set pool is regular or special. See below:\\n     *     In MasterChef farms are \\\"regular pools\\\". \\\"special pools\\\", which use a different sets of\\n     *     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\\n     *     the KSWAP rewards to all the Kyoto Swap products.\\n     * `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\\n     */\\n    struct PoolInfo {\\n        uint256 accKswapPerShare;\\n        uint256 lastRewardBlock;\\n        uint256 allocPoint;\\n        uint256 totalBoostedShare;\\n        bool isRegular;\\n    }\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Returns the number of MC pools.\\n     */\\n    function poolLength() external view returns (uint256 pools);\\n\\n    /**\\n     * @notice View function for checking pending KSWAP rewards.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _user Address of the user.\\n     */\\n    function pendingKswap(\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Update kswap reward for all the active pools.\\n     * Be careful of gas spending!\\n     */\\n    function massUpdatePools() external;\\n\\n    /**\\n     * @notice Calculates and returns the `amount` of KSWAP per block.\\n     *\\n     * @param _isRegular If the pool belongs to regular or special.\\n     */\\n    function kswapPerBlock(\\n        bool _isRegular\\n    ) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Calculates and returns the `amount` of KSWAP per block to burn.\\n     */\\n    function kswapPerBlockToBurn() external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Update reward variables for the given pool.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @return pool Returns the pool that was updated.\\n     */\\n    function updatePool(uint256 _pid) external returns (PoolInfo memory pool);\\n\\n    /**\\n     * @notice Deposit LP tokens to pool.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _amount Amount of LP tokens to deposit.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw LP tokens from pool.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _amount Amount of LP tokens to withdraw.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     */\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    /**\\n     * @notice Get user boost multiplier for specific pool id.\\n     *\\n     * @param _user The user address.\\n     * @param _pid The pool id.\\n     */\\n    function getBoostMultiplier(\\n        address _user,\\n        uint256 _pid\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d38a01bd8c981fc85f2362229164f59e4ae0d8b5779987c39b18c43755b6dee\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\\n//_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____        //\\n// ___/\\\\\\\\\\\\/////////\\\\\\\\\\\\_____/\\\\\\\\\\\\///\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\///////\\\\\\\\\\\\___       //\\n//  __\\\\//\\\\\\\\\\\\______\\\\///____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___      //\\n//   ___\\\\////\\\\\\\\\\\\__________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/____     //\\n//    ______\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////\\\\\\\\\\\\____    //\\n//     _________\\\\////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\___   //\\n//      __/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\____\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__  //\\n//       _\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\///\\\\\\\\\\\\\\\\\\\\/_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\_ //\\n//        ___\\\\///////////__________\\\\/////_______\\\\///////////////__\\\\///________\\\\///__\\\\///________\\\\///__//\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\npragma solidity ^0.8.9;\\n\\nimport {IMasterChef} from \\\"./IMasterChef.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefAdmin {\\n    struct AddNewPoolInfo {\\n        IERC20 lpToken;\\n        uint256 allocPoint;\\n        uint256 startBlockNumber;\\n        bool isRegular;\\n    }\\n\\n    event AddPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        bool isRegular\\n    );\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardBlock,\\n        uint256 lpSupply,\\n        uint256 accKswapPerShare\\n    );\\n\\n    event UpdateCakeRate(\\n        uint256 burnRate,\\n        uint256 regularFarmRate,\\n        uint256 specialFarmRate\\n    );\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\n    event UpdateWhiteList(address indexed user, bool isValid);\\n    event UpdateBoostContract(address indexed boostContract);\\n    event UpdateBoostMultiplier(\\n        address indexed user,\\n        uint256 pid,\\n        uint256 oldMultiplier,\\n        uint256 newMultiplier\\n    );\\n    event SetTreasuryAddress(address indexed user, address treasury);\\n\\n    /**\\n     * @notice Add a new pool. Can only be called by the owner.\\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n     * @param _allocPoint Number of allocation points for the new pool.\\n     * @param _lpToken Address of the LP BEP-20 token.\\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     * only for KSWAP distributions within Kyoto Swap products.\\n     */\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _isRegular,\\n        uint256 _startBlockNumber,\\n        bool _withUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Update the given pool's KSWAP allocation point. Can only be called by the owner.\\n     *\\n     * @param _pid The id of the pool. See `poolInfo`.\\n     * @param _allocPoint New number of allocation points for the pool.\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n\\n    /**\\n     * @notice Send KSWAP pending for burn to `burnAdmin`.\\n     *\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function burnKswap(bool _withUpdate) external;\\n\\n    /**\\n     * @notice Update the % of KSWAP distributions for burn, regular pools and special pools.\\n     *\\n     * @param _burnRate The % of KSWAP to burn each block.\\n     * @param _regularFarmRate The % of KSWAP to regular pools each block.\\n     * @param _specialFarmRate The % of KSWAP to special pools each block.\\n     * @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n     */\\n    function updateKswapRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external;\\n\\n    /**\\n     * @notice Update burn admin address.\\n     *\\n     * @param _newAdmin The new burn admin address.\\n     */\\n    function updateBurnAdmin(address _newAdmin) external;\\n\\n    /**\\n     * @notice Update whitelisted addresses for special pools.\\n     *\\n     * @param _user The address to be updated.\\n     * @param _isValid The flag for valid or invalid.\\n     */\\n    function updateWhiteList(address _user, bool _isValid) external;\\n\\n    /**\\n     * @notice Update boost contract address and max boost factor.\\n     *\\n     * @param _newBoostContract The new address for handling all the share boosts.\\n     */\\n    function updateBoostContract(address _newBoostContract) external;\\n\\n    /**\\n     * @notice Update user boost factor.\\n     *\\n     * @param _user The user address for boost factor updates.\\n     * @param _pid The pool id for the boost factor updates.\\n     * @param _newMultiplier New boost multiplier.\\n     */\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external;\\n\\n    /**\\n     * @notice Update the treasury address.\\n     */\\n    function setTreasuryAddress(address _treasury) external;\\n\\n    /**\\n     * @notice Updates the lastRewardBlock for a pool.\\n     *         Both the new and old values must be future blocks!\\n     *         If the new value is 0, it will be set to `block.number + 200`.\\n     *\\n     * @param _pid The pool id to update.\\n     * @param newLastRewardBlock The new value.\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256 _pid,\\n        uint256 newLastRewardBlock\\n    ) external;\\n\\n    /**\\n     * @notice Updates the lastRewardBlock for a list of pools.\\n     *         Both the new and old values must be future blocks!\\n     *         If the new value is 0, it will be set to `block.number + 200`.\\n     *\\n     * @param _pids The list of pool ids to update.\\n     * @param newLastRewardBlock The new value.\\n     */\\n    function setPoolLastRewardBlock(\\n        uint256[] memory _pids,\\n        uint256 newLastRewardBlock\\n    ) external;\\n}\\n\",\"keccak256\":\"0xffb4c45916353a5093eebcc75bdefe64e4f853bf75fda507ac4750e03fcaa1db\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615209806100206000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c806378d28781116101b2578063ac656889116100f9578063dfcedeee116100a2578063f41c8d961161007c578063f41c8d9614610749578063fb3b6c2a1461075c578063fe4a00451461076f578063fe575a871461077757600080fd5b8063dfcedeee14610703578063e2bbb15814610723578063e671e5fc1461073657600080fd5b8063ce5da407116100d3578063ce5da407146106ca578063d1e6c30c146106dd578063ddf579ff146106f057600080fd5b8063ac656889146106b1578063c40d337b146106c1578063cc6db2da146103f957600080fd5b80638456cb591161015b5780639dd2fcc3116101355780639dd2fcc314610678578063a8c282591461068b578063ac1d06091461069e57600080fd5b80638456cb591461061257806393f1a40b1461061a57806399d7e84a1461066f57600080fd5b80637a994efd1161018c5780637a994efd146105d65780637b51a776146105df57806381bdf98c146105f257600080fd5b806378d28781146105a757806378db4c34146105ba57806378ed5d1f146105c357600080fd5b8063441a3e701161028157806361d027b31161022a5780636605bfda116102045780636605bfda1461056157806369b02128146105745780636ebb16d3146105815780637577e2c31461059457600080fd5b806361d027b314610526578063630b5ba11461054657806364482f791461054e57600080fd5b806357b46f881161025b57806357b46f88146104c65780635a7894181461050b5780635c975abb1461051e57600080fd5b8063441a3e701461044957806351eb05a61461045c5780635312ea8e146104b357600080fd5b80631526fe27116102e3578063372c12b1116102bd578063372c12b1146104055780633e0ca005146104385780633f4ba83a1461044157600080fd5b80631526fe27146103a9578063186d3830146103e6578063325d186d146103f957600080fd5b8063081e3eda11610314578063081e3eda1461037f5780630bb844bc146103875780630ee520581461039a57600080fd5b8063033186e81461033b578063041a84c9146103615780630433985b14610376575b600080fd5b61034e6103493660046148a7565b61078a565b6040519081526020015b60405180910390f35b61037461036f3660046148d3565b6107e0565b005b61034e600b5481565b60045461034e565b610374610395366004614908565b610d1e565b61034e670de0b6b3a764000081565b6103bc6103b7366004614925565b610f99565b6040805195865260208601949094529284019190915260608301521515608082015260a001610358565b6103746103f436600461498a565b610fdd565b61034e64e8d4a5100081565b610428610413366004614908565b60076020526000908152604090205460ff1681565b6040519015158152602001610358565b61034e600a5481565b6103746111aa565b6103746104573660046149f6565b6111e5565b61046f61046a366004614925565b6114ac565b6040516103589190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b6103746104c1366004614925565b6117ff565b6000546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610358565b61034e610519366004614a26565b6119a9565b6104286119ff565b6001546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b610374611a0e565b61037461055c366004614a43565b611aa6565b61037461056f366004614908565b611c91565b61034e6501d1a94a200081565b61042861058f366004614b1e565b611d8d565b6103746105a2366004614bb2565b611d98565b61034e6105b5366004614c11565b611e5b565b61034e600d5481565b6104e66105d1366004614925565b611ff2565b61034e600c5481565b6103746105ed366004614c41565b612029565b6002546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b6103746122f2565b610654610628366004614c11565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610358565b61034e60095481565b610374610686366004614908565b61232b565b610374610699366004614cec565b61251c565b6103746106ac366004614d2d565b612789565b61034e68022b1c8c1227a0000081565b61034e60085481565b6103746106d836600461498a565b61296c565b6103746106eb366004614d5b565b612b2b565b6103746106fe366004614d5b565b612b94565b6003546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b6103746107313660046149f6565b612bfd565b6103746107443660046149f6565b61305c565b610374610757366004614a26565b6131de565b61037461076a366004614de0565b6132fe565b61034e613409565b610428610785366004614908565b613432565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a5100081116107d45764e8d4a510006107d6565b805b9150505b92915050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee595460020361083b576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086460027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b60035473ffffffffffffffffffffffffffffffffffffffff163314610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520626f6f737460448201527f20636f6e7472616374000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166109b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4d6173746572436865663a2054686520757365722061646472657373206d757360448201527f742062652076616c6964000000000000000000000000000000000000000000006064820152608401610907565b600482815481106109c6576109c6614e77565b600091825260209091206004600590920201015460ff16610a69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4d6173746572436865663a204f6e6c7920726567756c6172206661726d20636f60448201527f756c6420626520626f6f737465640000000000000000000000000000000000006064820152608401610907565b64e8d4a510008110158015610a8457506501d1a94a20008111155b610b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6173746572436865663a20496e76616c6964206e657720626f6f7374206d7560448201527f6c7469706c6965720000000000000000000000000000000000000000000000006064820152608401610907565b6000610b1b836114ac565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091528120919250610b57868661078a565b9050610b6486868361347f565b610ba4670de0b6b3a7640000610b988560000151610b9e64e8d4a51000610b988a896000015461355990919063ffffffff16565b9061356c565b90613559565b60018301558154610bf090610bc49064e8d4a5100090610b989088613559565b8354610bea90610bdf9064e8d4a5100090610b989087613559565b606087015190613578565b90613584565b60608401526004805484919087908110610c0c57610c0c614e77565b600091825260208083208451600593909302019182558381015160018301556040808501516002808501919091556060808701516003860155608090960151600490940180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093558984526006825280842073ffffffffffffffffffffffffffffffffffffffff8c1680865290835293819020909201889055815189815290810185905290810187905290917f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba910160405180910390a2505050610d1960017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dd4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b73ffffffffffffffffffffffffffffffffffffffff8116610e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4d6173746572436865663a204275726e2061646d696e2061646472657373206d60448201527f7573742062652076616c696400000000000000000000000000000000000000006064820152608401610907565b60025473ffffffffffffffffffffffffffffffffffffffff90811690821603610f22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f4d6173746572436865663a204275726e2061646d696e2061646472657373206960448201527f73207468652073616d6520776974682063757272656e742061646472657373006064820152608401610907565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fd146fe330fdddf682413850a35b28edfccd4c4b53cfee802fd24950de5be1dbe90600090a35050565b60048181548110610fa957600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b6110067ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b80156111465782811461109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610907565b60005b838110156111405761112e8585838181106110bb576110bb614e77565b90506020020160208101906110d09190614908565b8484848181106110e2576110e2614e77565b90506020028101906110f49190614ea6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061359a92505050565b8061113881614f3a565b91505061109e565b506111a4565b60005b838110156111a25761119085858381811061116657611166614e77565b905060200201602081019061117b9190614908565b6040518060200160405280600081525061359a565b8061119a81614f3a565b915050611149565b505b50505050565b6111d37f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26613590565b6111db6136ab565b6111e3613749565b565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203611240576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126960027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b6112716137c6565b61127a33613865565b6000611285836114ac565b6000848152600660209081526040808320338452909152902080549192509083111561130d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f77697468647261773a20496e73756666696369656e74000000000000000000006044820152606401610907565b6000611319338661078a565b905061132633868361347f565b83156113815781546113389085613578565b826000018190555061138133856005888154811061135857611358614e77565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16919061386e565b6113b5670de0b6b3a7640000610b988560000151610b9e64e8d4a51000610b9887896000015461355990919063ffffffff16565b60018301556114036113d064e8d4a51000610b988785613559565b600487815481106113e3576113e3614e77565b90600052602060002090600502016003015461357890919063ffffffff16565b6004868154811061141657611416614e77565b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161147491815260200190565b60405180910390a35050506114a860017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b5050565b6114e06040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b600482815481106114f3576114f3614e77565b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff161515608082015291504311156117fa576060810151608082015160009061156557600954611569565b6008545b905060008211801561157b5750600081115b1561172657600061159984602001514361357890919063ffffffff16565b905060006115c083610b988760400151610b9e6115b98a608001516119a9565b8790613559565b90506115e36115db85610b9884670de0b6b3a7640000613559565b865190613584565b855260005460015473ffffffffffffffffffffffffffffffffffffffff918216916340c10f19911661161684600a61356c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561168157600080fd5b505af1158015611695573d6000803e3d6000fd5b50506000546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561170b57600080fd5b505af115801561171f573d6000803e3d6000fd5b5050505050505b436020840152600480548491908690811061174357611743614e77565b600091825260209182902083516005929092020190815582820151600182015560408084015160028301556060808501516003840155608090940151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915585820151865182519182529281018690529081019190915285917f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46910160405180910390a250505b919050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee595460020361185a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61188360027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b61188b6137c6565b61189433613865565b6000600482815481106118a9576118a9614e77565b6000918252602080832085845260068252604080852033808752935284208054858255600182018690556005909402909101945092906118ff9064e8d4a5100090610b98906118f8908961078a565b8590613559565b905080846003015411611913576000611922565b60038401546119229082613578565b846003018190555061194233836005888154811061135857611358614e77565b604051828152859033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a3505050506119a660017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b50565b600081156119d8576107da64e8d4a51000610b98600b5468022b1c8c1227a0000061355990919063ffffffff16565b6107da64e8d4a51000610b98600c5468022b1c8c1227a0000061355990919063ffffffff16565b6000611a09613942565b905090565b60045460005b818110156114a857600060048281548110611a3157611a31614e77565b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff1615156080820152915015611a9557611a93826114ac565b505b50611a9f81614f3a565b9050611a14565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b611b65836114ac565b508015611b7457611b74611a0e565b60048381548110611b8757611b87614e77565b600091825260209091206004600590920201015460ff1615611be857611be082610bea60048681548110611bbd57611bbd614e77565b90600052602060002090600502016002015460085461357890919063ffffffff16565b600855611c29565b611c2582610bea60048681548110611c0257611c02614e77565b90600052602060002090600502016002015460095461357890919063ffffffff16565b6009555b8160048481548110611c3d57611c3d614e77565b906000526020600020906005020160020181905550827fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f883604051611c8491815260200190565b60405180910390a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6465763a207775743f00000000000000000000000000000000000000000000006044820152606401610907565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405190815233907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a835109060200160405180910390a250565b60006107da8261396f565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b6111a28585858585613a0c565b60008060048481548110611e7157611e71614e77565b600091825260208083206040805160a081018252600590940290910180548452600180820154858501908152600280840154878601526003840154606080890191825260049095015460ff16151560808901528c89526006875285892073ffffffffffffffffffffffffffffffffffffffff8d168a528752978590208551948501865280548552928301549584019590955293015491810191909152825193519151929450929143118015611f2557508015155b15611f9e576000611f4385602001514361357890919063ffffffff16565b90506000611f778660800151611f5b57600954611f5f565b6008545b610b988860400151610b9e6115b98b608001516119a9565b9050611f99611f9284610b9884670de0b6b3a7640000613559565b8590613584565b935050505b6000611fbe64e8d4a51000610b98611fb68a8c61078a565b875190613559565b6020850151909150611fe690611fe0670de0b6b3a7640000610b988588613559565b90613578565b98975050505050505050565b6005818154811061200257600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354610100900460ff161580801561208757507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600160ff909116105b806120a65750303b1580156120a6575061209f613d77565b60ff166001145b156122b8576120b56001613d9f565b8015612107577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6000805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161783556001805489831690841617815560028054928916929093169190911790915564e651151b55600a556402838ff4aa600b55600c55825b808210156122275761221c85858481811061219d5761219d614e77565b905060800201602001358686858181106121b9576121b9614e77565b6121cf9260206080909202019081019150614908565b8787868181106121e1576121e1614e77565b90506080020160600160208101906121f99190614a26565b88888781811061220b5761220b614e77565b905060800201604001356000613a0c565b816001019150612180565b61222f613749565b505080156122b3577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b6122ea565b6040517f5d99ebd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b61231b7f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26613590565b6123236137c6565b6111e3613e57565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b73ffffffffffffffffffffffffffffffffffffffff811615801590612421575060035473ffffffffffffffffffffffffffffffffffffffff828116911614155b6124ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f4d6173746572436865663a204e657720626f6f737420636f6e7472616374206160448201527f646472657373206d7573742062652076616c69640000000000000000000000006064820152608401610907565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f4c0c07d0b548b824a1b998eb4d11fccf1cfbc1e47edcdb309970ba88315eb30390600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b6000841180156125e25750600083115b80156125ee5750600082115b61267a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4d6173746572436865663a204b737761702072617465206d757374206265206760448201527f726561746572207468616e2030000000000000000000000000000000000000006064820152608401610907565b64e8d4a5100061268e83610bea8787613584565b1461271b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d6173746572436865663a20546f74616c2072617465206d757374206265203160448201527f65313200000000000000000000000000000000000000000000000000000000006064820152608401610907565b801561272957612729611a0e565b61273360006131de565b600a849055600b839055600c82905560408051858152602081018590529081018390527fae2d2e7d1ae84564fc72227253ce0f36a007209f7fd5ec414dea80e5af2fb5b09060600160405180910390a150505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461283f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b73ffffffffffffffffffffffffffffffffffffffff82166128e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d6173746572436865663a20546865207768697465206c69737420616464726560448201527f7373206d7573742062652076616c6964000000000000000000000000000000006064820152608401610907565b73ffffffffffffffffffffffffffffffffffffffff821660008181526007602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d51910160405180910390a25050565b6129957ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b8015612acf57828114612a2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610907565b60005b8381101561114057612abd858583818110612a4a57612a4a614e77565b9050602002016020810190612a5f9190614908565b848484818110612a7157612a71614e77565b9050602002810190612a839190614ea6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ed192505050565b80612ac781614f3a565b915050612a2d565b60005b838110156111a257612b19858583818110612aef57612aef614e77565b9050602002016020810190612b049190614908565b60405180602001604052806000815250613ed1565b80612b2381614f3a565b915050612ad2565b612b547ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b610d198383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061359a92505050565b612bbd7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b610d198383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ed192505050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203612c58576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c8160027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b612c896137c6565b612c9233613865565b6000612c9d836114ac565b6000848152600660209081526040808320338452909152902060808201519192509080612cd957503360009081526007602052604090205460ff165b612d6757604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f4d6173746572436865663a205468652061646472657373206973206e6f74206160448201527f7661696c61626c6520746f206465706f73697420696e207468697320706f6f6c6064820152608401610907565b6000612d73338661078a565b825490915015612d8857612d8833868361347f565b8315612f6e57600060058681548110612da357612da3614e77565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3e9190614f72565b9050612e8333308760058a81548110612e5957612e59614e77565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16929190613fe4565b612f358160058881548110612e9a57612e9a614e77565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe09190614f72565b8354909550612f449086613584565b8355612f67612f5c64e8d4a51000610b988886613559565b606086015190613584565b6060850152505b612fa2670de0b6b3a7640000610b988560000151610b9e64e8d4a51000610b9887896000015461355990919063ffffffff16565b82600101819055508260048681548110612fbe57612fbe614e77565b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559051858152869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101611474565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b60006004838154811061312757613127614e77565b9060005260206000209060050201600101549050438111801561314a5750438210155b6131b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43616e2774206d6f6469667920686973746f72790000000000000000000000006044820152606401610907565b81600484815481106131c4576131c4614e77565b906000526020600020906005020160010181905550505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b80156132a2576132a2611a0e565b60006132b9600d544361357890919063ffffffff16565b905060006132cf6132c8613409565b8390613559565b6002549091506132f59073ffffffffffffffffffffffffffffffffffffffff1682614042565b505043600d5550565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146133b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b806000036133ca576133c74360c8614f8b565b90505b60005b8251811015610d19576133f98382815181106133eb576133eb614e77565b60200260200101518361305c565b61340281614f3a565b90506133cd565b6000611a0964e8d4a51000610b98600a5468022b1c8c1227a0000061355990919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff166107da565b600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320815160608101835281548082526001830154948201949094526002909101549181019190915291906134eb9064e8d4a5100090610b989086613559565b90506000613529670de0b6b3a7640000610b986004888154811061351157613511614e77565b60009182526020909120600590910201548590613559565b9050600061354484602001518361357890919063ffffffff16565b90506135508782614042565b50505050505050565b60006135658284614f9e565b9392505050565b60006135658284614fb5565b60006135658284614ff0565b60006135658284614f8b565b6119a6813361410d565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16156114a85773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555161365f908290615027565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35050565b6136b3613942565b806136e357506136e37fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336141b6565b6111e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610907565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b6137ce613942565b15806137ff57506137ff7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336141b6565b6111e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610907565b6119a6816142a9565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d199084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614327565b60007fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75b5460ff16919050565b6000805b8251811015613a03576139e383828151811061399157613991614e77565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b156139f15750600192915050565b806139fb81614f3a565b915050613973565b50600092915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9d9190614f72565b1015613b05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f6e6520424550323020746f6b656e730000000000000000000000000000006044820152606401610907565b60005473ffffffffffffffffffffffffffffffffffffffff90811690851603613bb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4b5357415020746f6b656e2063616e277420626520616464656420746f20666160448201527f726d20706f6f6c730000000000000000000000000000000000000000000000006064820152608401610907565b8015613bbe57613bbe611a0e565b8215613bd957600854613bd19086613584565b600855613bea565b600954613be69086613584565b6009555b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790556040805160a0810190915290815260049060208101438511613c8557613c804360c8614f8b565b613c87565b845b8152602080820189905260006040808401829052881515606094850152855460018082018855968352918390208551600593840290910190815592850151838701558401516002830155918301516003820155608090920151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091555473ffffffffffffffffffffffffffffffffffffffff861691613d369190613578565b6040805188815286151560208201527f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa910160405180910390a35050505050565b60007f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb3613966565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610613e04576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610907565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016137bc565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff166114a85773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551613f98908290615027565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526111a49085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016138c0565b80156114a857600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156140b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140db9190614f72565b9050818110156140e9578091505b600054610d199073ffffffffffffffffffffffffffffffffffffffff16848461386e565b61411782826141b6565b6114a85761413c8173ffffffffffffffffffffffffffffffffffffffff166014614433565b614147836020614433565b604051602001614158929190615043565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610907916004016150c4565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff168061356557507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2600061426a8560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16156119a6576143178173ffffffffffffffffffffffffffffffffffffffff166014614433565b6040516020016141589190615115565b6000614389826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166146769092919063ffffffff16565b805190915015610d1957808060200190518101906143a79190615181565b610d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610907565b60606000614442836002614f9e565b61444d906002614f8b565b67ffffffffffffffff81111561446557614465614a7c565b6040519080825280601f01601f19166020018201604052801561448f576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106144c6576144c6614e77565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061452957614529614e77565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000614565846002614f9e565b614570906001614f8b565b90505b600181111561460d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106145b1576145b1614e77565b1a60f81b8282815181106145c7576145c7614e77565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936146068161519e565b9050614573565b5083156107d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610907565b6060614685848460008561468d565b949350505050565b60608247101561471f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610907565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516147489190615027565b60006040518083038185875af1925050503d8060008114614785576040519150601f19603f3d011682016040523d82523d6000602084013e61478a565b606091505b509150915061479b878383876147a6565b979650505050505050565b6060831561483c5782516000036148355773ffffffffffffffffffffffffffffffffffffffff85163b614835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610907565b5081614685565b61468583838151156148515781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090791906150c4565b73ffffffffffffffffffffffffffffffffffffffff811681146119a657600080fd5b600080604083850312156148ba57600080fd5b82356148c581614885565b946020939093013593505050565b6000806000606084860312156148e857600080fd5b83356148f381614885565b95602085013595506040909401359392505050565b60006020828403121561491a57600080fd5b81356107d481614885565b60006020828403121561493757600080fd5b5035919050565b60008083601f84011261495057600080fd5b50813567ffffffffffffffff81111561496857600080fd5b6020830191508360208260051b850101111561498357600080fd5b9250929050565b600080600080604085870312156149a057600080fd5b843567ffffffffffffffff808211156149b857600080fd5b6149c48883890161493e565b909650945060208701359150808211156149dd57600080fd5b506149ea8782880161493e565b95989497509550505050565b60008060408385031215614a0957600080fd5b50508035926020909101359150565b80151581146119a657600080fd5b600060208284031215614a3857600080fd5b81356107d481614a18565b600080600060608486031215614a5857600080fd5b83359250602084013591506040840135614a7181614a18565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614af257614af2614a7c565b604052919050565b600067ffffffffffffffff821115614b1457614b14614a7c565b5060051b60200190565b60006020808385031215614b3157600080fd5b823567ffffffffffffffff811115614b4857600080fd5b8301601f81018513614b5957600080fd5b8035614b6c614b6782614afa565b614aab565b81815260059190911b82018301908381019087831115614b8b57600080fd5b928401925b8284101561479b578335614ba381614885565b82529284019290840190614b90565b600080600080600060a08688031215614bca57600080fd5b853594506020860135614bdc81614885565b93506040860135614bec81614a18565b9250606086013591506080860135614c0381614a18565b809150509295509295909350565b60008060408385031215614c2457600080fd5b823591506020830135614c3681614885565b809150509250929050565b600080600080600060808688031215614c5957600080fd5b8535614c6481614885565b94506020860135614c7481614885565b93506040860135614c8481614885565b9250606086013567ffffffffffffffff80821115614ca157600080fd5b818801915088601f830112614cb557600080fd5b813581811115614cc457600080fd5b8960208260071b8501011115614cd957600080fd5b9699959850939650602001949392505050565b60008060008060808587031215614d0257600080fd5b8435935060208501359250604085013591506060850135614d2281614a18565b939692955090935050565b60008060408385031215614d4057600080fd5b8235614d4b81614885565b91506020830135614c3681614a18565b600080600060408486031215614d7057600080fd5b8335614d7b81614885565b9250602084013567ffffffffffffffff80821115614d9857600080fd5b818601915086601f830112614dac57600080fd5b813581811115614dbb57600080fd5b876020828501011115614dcd57600080fd5b6020830194508093505050509250925092565b60008060408385031215614df357600080fd5b823567ffffffffffffffff811115614e0a57600080fd5b8301601f81018513614e1b57600080fd5b80356020614e2b614b6783614afa565b82815260059290921b83018101918181019088841115614e4a57600080fd5b938201935b83851015614e6857843582529382019390820190614e4f565b98969091013596505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614edb57600080fd5b83018035915067ffffffffffffffff821115614ef657600080fd5b60200191503681900382131561498357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f6b57614f6b614f0b565b5060010190565b600060208284031215614f8457600080fd5b5051919050565b808201808211156107da576107da614f0b565b80820281158282048414176107da576107da614f0b565b600082614feb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b818103818111156107da576107da614f0b565b60005b8381101561501e578181015183820152602001615006565b50506000910152565b60008251615039818460208701615003565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161507b816017850160208801615003565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516150b8816028840160208801615003565b01602801949350505050565b60208152600082518060208401526150e3816040850160208701615003565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f53696d706c65426c61636b6c6973743a206163636f756e74200000000000000081526000825161514d816019850160208701615003565b7f20697320626c61636b6c697374656400000000000000000000000000000000006019939091019283015250602801919050565b60006020828403121561519357600080fd5b81516107d481614a18565b6000816151ad576151ad614f0b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212206c2740d9e14526a7b56dc1b554f623af205a7d4ed730690438b6cfd3ec5d69f064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c806378d28781116101b2578063ac656889116100f9578063dfcedeee116100a2578063f41c8d961161007c578063f41c8d9614610749578063fb3b6c2a1461075c578063fe4a00451461076f578063fe575a871461077757600080fd5b8063dfcedeee14610703578063e2bbb15814610723578063e671e5fc1461073657600080fd5b8063ce5da407116100d3578063ce5da407146106ca578063d1e6c30c146106dd578063ddf579ff146106f057600080fd5b8063ac656889146106b1578063c40d337b146106c1578063cc6db2da146103f957600080fd5b80638456cb591161015b5780639dd2fcc3116101355780639dd2fcc314610678578063a8c282591461068b578063ac1d06091461069e57600080fd5b80638456cb591461061257806393f1a40b1461061a57806399d7e84a1461066f57600080fd5b80637a994efd1161018c5780637a994efd146105d65780637b51a776146105df57806381bdf98c146105f257600080fd5b806378d28781146105a757806378db4c34146105ba57806378ed5d1f146105c357600080fd5b8063441a3e701161028157806361d027b31161022a5780636605bfda116102045780636605bfda1461056157806369b02128146105745780636ebb16d3146105815780637577e2c31461059457600080fd5b806361d027b314610526578063630b5ba11461054657806364482f791461054e57600080fd5b806357b46f881161025b57806357b46f88146104c65780635a7894181461050b5780635c975abb1461051e57600080fd5b8063441a3e701461044957806351eb05a61461045c5780635312ea8e146104b357600080fd5b80631526fe27116102e3578063372c12b1116102bd578063372c12b1146104055780633e0ca005146104385780633f4ba83a1461044157600080fd5b80631526fe27146103a9578063186d3830146103e6578063325d186d146103f957600080fd5b8063081e3eda11610314578063081e3eda1461037f5780630bb844bc146103875780630ee520581461039a57600080fd5b8063033186e81461033b578063041a84c9146103615780630433985b14610376575b600080fd5b61034e6103493660046148a7565b61078a565b6040519081526020015b60405180910390f35b61037461036f3660046148d3565b6107e0565b005b61034e600b5481565b60045461034e565b610374610395366004614908565b610d1e565b61034e670de0b6b3a764000081565b6103bc6103b7366004614925565b610f99565b6040805195865260208601949094529284019190915260608301521515608082015260a001610358565b6103746103f436600461498a565b610fdd565b61034e64e8d4a5100081565b610428610413366004614908565b60076020526000908152604090205460ff1681565b6040519015158152602001610358565b61034e600a5481565b6103746111aa565b6103746104573660046149f6565b6111e5565b61046f61046a366004614925565b6114ac565b6040516103589190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b6103746104c1366004614925565b6117ff565b6000546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610358565b61034e610519366004614a26565b6119a9565b6104286119ff565b6001546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b610374611a0e565b61037461055c366004614a43565b611aa6565b61037461056f366004614908565b611c91565b61034e6501d1a94a200081565b61042861058f366004614b1e565b611d8d565b6103746105a2366004614bb2565b611d98565b61034e6105b5366004614c11565b611e5b565b61034e600d5481565b6104e66105d1366004614925565b611ff2565b61034e600c5481565b6103746105ed366004614c41565b612029565b6002546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b6103746122f2565b610654610628366004614c11565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610358565b61034e60095481565b610374610686366004614908565b61232b565b610374610699366004614cec565b61251c565b6103746106ac366004614d2d565b612789565b61034e68022b1c8c1227a0000081565b61034e60085481565b6103746106d836600461498a565b61296c565b6103746106eb366004614d5b565b612b2b565b6103746106fe366004614d5b565b612b94565b6003546104e69073ffffffffffffffffffffffffffffffffffffffff1681565b6103746107313660046149f6565b612bfd565b6103746107443660046149f6565b61305c565b610374610757366004614a26565b6131de565b61037461076a366004614de0565b6132fe565b61034e613409565b610428610785366004614908565b613432565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a5100081116107d45764e8d4a510006107d6565b805b9150505b92915050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee595460020361083b576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086460027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b60035473ffffffffffffffffffffffffffffffffffffffff163314610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520626f6f737460448201527f20636f6e7472616374000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166109b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4d6173746572436865663a2054686520757365722061646472657373206d757360448201527f742062652076616c6964000000000000000000000000000000000000000000006064820152608401610907565b600482815481106109c6576109c6614e77565b600091825260209091206004600590920201015460ff16610a69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4d6173746572436865663a204f6e6c7920726567756c6172206661726d20636f60448201527f756c6420626520626f6f737465640000000000000000000000000000000000006064820152608401610907565b64e8d4a510008110158015610a8457506501d1a94a20008111155b610b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6173746572436865663a20496e76616c6964206e657720626f6f7374206d7560448201527f6c7469706c6965720000000000000000000000000000000000000000000000006064820152608401610907565b6000610b1b836114ac565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091528120919250610b57868661078a565b9050610b6486868361347f565b610ba4670de0b6b3a7640000610b988560000151610b9e64e8d4a51000610b988a896000015461355990919063ffffffff16565b9061356c565b90613559565b60018301558154610bf090610bc49064e8d4a5100090610b989088613559565b8354610bea90610bdf9064e8d4a5100090610b989087613559565b606087015190613578565b90613584565b60608401526004805484919087908110610c0c57610c0c614e77565b600091825260208083208451600593909302019182558381015160018301556040808501516002808501919091556060808701516003860155608090960151600490940180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093558984526006825280842073ffffffffffffffffffffffffffffffffffffffff8c1680865290835293819020909201889055815189815290810185905290810187905290917f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba910160405180910390a2505050610d1960017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dd4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b73ffffffffffffffffffffffffffffffffffffffff8116610e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4d6173746572436865663a204275726e2061646d696e2061646472657373206d60448201527f7573742062652076616c696400000000000000000000000000000000000000006064820152608401610907565b60025473ffffffffffffffffffffffffffffffffffffffff90811690821603610f22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f4d6173746572436865663a204275726e2061646d696e2061646472657373206960448201527f73207468652073616d6520776974682063757272656e742061646472657373006064820152608401610907565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fd146fe330fdddf682413850a35b28edfccd4c4b53cfee802fd24950de5be1dbe90600090a35050565b60048181548110610fa957600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b6110067ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b80156111465782811461109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610907565b60005b838110156111405761112e8585838181106110bb576110bb614e77565b90506020020160208101906110d09190614908565b8484848181106110e2576110e2614e77565b90506020028101906110f49190614ea6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061359a92505050565b8061113881614f3a565b91505061109e565b506111a4565b60005b838110156111a25761119085858381811061116657611166614e77565b905060200201602081019061117b9190614908565b6040518060200160405280600081525061359a565b8061119a81614f3a565b915050611149565b505b50505050565b6111d37f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26613590565b6111db6136ab565b6111e3613749565b565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203611240576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126960027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b6112716137c6565b61127a33613865565b6000611285836114ac565b6000848152600660209081526040808320338452909152902080549192509083111561130d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f77697468647261773a20496e73756666696369656e74000000000000000000006044820152606401610907565b6000611319338661078a565b905061132633868361347f565b83156113815781546113389085613578565b826000018190555061138133856005888154811061135857611358614e77565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16919061386e565b6113b5670de0b6b3a7640000610b988560000151610b9e64e8d4a51000610b9887896000015461355990919063ffffffff16565b60018301556114036113d064e8d4a51000610b988785613559565b600487815481106113e3576113e3614e77565b90600052602060002090600502016003015461357890919063ffffffff16565b6004868154811061141657611416614e77565b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161147491815260200190565b60405180910390a35050506114a860017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b5050565b6114e06040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b600482815481106114f3576114f3614e77565b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff161515608082015291504311156117fa576060810151608082015160009061156557600954611569565b6008545b905060008211801561157b5750600081115b1561172657600061159984602001514361357890919063ffffffff16565b905060006115c083610b988760400151610b9e6115b98a608001516119a9565b8790613559565b90506115e36115db85610b9884670de0b6b3a7640000613559565b865190613584565b855260005460015473ffffffffffffffffffffffffffffffffffffffff918216916340c10f19911661161684600a61356c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561168157600080fd5b505af1158015611695573d6000803e3d6000fd5b50506000546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561170b57600080fd5b505af115801561171f573d6000803e3d6000fd5b5050505050505b436020840152600480548491908690811061174357611743614e77565b600091825260209182902083516005929092020190815582820151600182015560408084015160028301556060808501516003840155608090940151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915585820151865182519182529281018690529081019190915285917f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46910160405180910390a250505b919050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee595460020361185a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61188360027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b61188b6137c6565b61189433613865565b6000600482815481106118a9576118a9614e77565b6000918252602080832085845260068252604080852033808752935284208054858255600182018690556005909402909101945092906118ff9064e8d4a5100090610b98906118f8908961078a565b8590613559565b905080846003015411611913576000611922565b60038401546119229082613578565b846003018190555061194233836005888154811061135857611358614e77565b604051828152859033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a3505050506119a660017fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b50565b600081156119d8576107da64e8d4a51000610b98600b5468022b1c8c1227a0000061355990919063ffffffff16565b6107da64e8d4a51000610b98600c5468022b1c8c1227a0000061355990919063ffffffff16565b6000611a09613942565b905090565b60045460005b818110156114a857600060048281548110611a3157611a31614e77565b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff1615156080820152915015611a9557611a93826114ac565b505b50611a9f81614f3a565b9050611a14565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b611b65836114ac565b508015611b7457611b74611a0e565b60048381548110611b8757611b87614e77565b600091825260209091206004600590920201015460ff1615611be857611be082610bea60048681548110611bbd57611bbd614e77565b90600052602060002090600502016002015460085461357890919063ffffffff16565b600855611c29565b611c2582610bea60048681548110611c0257611c02614e77565b90600052602060002090600502016002015460095461357890919063ffffffff16565b6009555b8160048481548110611c3d57611c3d614e77565b906000526020600020906005020160020181905550827fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f883604051611c8491815260200190565b60405180910390a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6465763a207775743f00000000000000000000000000000000000000000000006044820152606401610907565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405190815233907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a835109060200160405180910390a250565b60006107da8261396f565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b6111a28585858585613a0c565b60008060048481548110611e7157611e71614e77565b600091825260208083206040805160a081018252600590940290910180548452600180820154858501908152600280840154878601526003840154606080890191825260049095015460ff16151560808901528c89526006875285892073ffffffffffffffffffffffffffffffffffffffff8d168a528752978590208551948501865280548552928301549584019590955293015491810191909152825193519151929450929143118015611f2557508015155b15611f9e576000611f4385602001514361357890919063ffffffff16565b90506000611f778660800151611f5b57600954611f5f565b6008545b610b988860400151610b9e6115b98b608001516119a9565b9050611f99611f9284610b9884670de0b6b3a7640000613559565b8590613584565b935050505b6000611fbe64e8d4a51000610b98611fb68a8c61078a565b875190613559565b6020850151909150611fe690611fe0670de0b6b3a7640000610b988588613559565b90613578565b98975050505050505050565b6005818154811061200257600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354610100900460ff161580801561208757507f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb354600160ff909116105b806120a65750303b1580156120a6575061209f613d77565b60ff166001145b156122b8576120b56001613d9f565b8015612107577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6000805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161783556001805489831690841617815560028054928916929093169190911790915564e651151b55600a556402838ff4aa600b55600c55825b808210156122275761221c85858481811061219d5761219d614e77565b905060800201602001358686858181106121b9576121b9614e77565b6121cf9260206080909202019081019150614908565b8787868181106121e1576121e1614e77565b90506080020160600160208101906121f99190614a26565b88888781811061220b5761220b614e77565b905060800201604001356000613a0c565b816001019150612180565b61222f613749565b505080156122b3577f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b6122ea565b6040517f5d99ebd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b61231b7f356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26613590565b6123236137c6565b6111e3613e57565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b73ffffffffffffffffffffffffffffffffffffffff811615801590612421575060035473ffffffffffffffffffffffffffffffffffffffff828116911614155b6124ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f4d6173746572436865663a204e657720626f6f737420636f6e7472616374206160448201527f646472657373206d7573742062652076616c69640000000000000000000000006064820152608401610907565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f4c0c07d0b548b824a1b998eb4d11fccf1cfbc1e47edcdb309970ba88315eb30390600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b6000841180156125e25750600083115b80156125ee5750600082115b61267a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4d6173746572436865663a204b737761702072617465206d757374206265206760448201527f726561746572207468616e2030000000000000000000000000000000000000006064820152608401610907565b64e8d4a5100061268e83610bea8787613584565b1461271b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d6173746572436865663a20546f74616c2072617465206d757374206265203160448201527f65313200000000000000000000000000000000000000000000000000000000006064820152608401610907565b801561272957612729611a0e565b61273360006131de565b600a849055600b839055600c82905560408051858152602081018590529081018390527fae2d2e7d1ae84564fc72227253ce0f36a007209f7fd5ec414dea80e5af2fb5b09060600160405180910390a150505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461283f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b73ffffffffffffffffffffffffffffffffffffffff82166128e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4d6173746572436865663a20546865207768697465206c69737420616464726560448201527f7373206d7573742062652076616c6964000000000000000000000000000000006064820152608401610907565b73ffffffffffffffffffffffffffffffffffffffff821660008181526007602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d51910160405180910390a25050565b6129957ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b8015612acf57828114612a2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f53696d706c65426c61636b6c6973743a204e6f7420656e6f756768207265617360448201527f6f6e7300000000000000000000000000000000000000000000000000000000006064820152608401610907565b60005b8381101561114057612abd858583818110612a4a57612a4a614e77565b9050602002016020810190612a5f9190614908565b848484818110612a7157612a71614e77565b9050602002810190612a839190614ea6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ed192505050565b80612ac781614f3a565b915050612a2d565b60005b838110156111a257612b19858583818110612aef57612aef614e77565b9050602002016020810190612b049190614908565b60405180602001604052806000815250613ed1565b80612b2381614f3a565b915050612ad2565b612b547ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b610d198383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061359a92505050565b612bbd7ff988e4fb62b8e14f4820fed03192306ddf4d7dbfa215595ba1c6ba4b76b369ee613590565b610d198383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ed192505050565b7fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5954600203612c58576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c8160027fd370c446e45a741b5961ac03f05d57d1a5768014420ffedc28dbab09fedaee5955565b612c896137c6565b612c9233613865565b6000612c9d836114ac565b6000848152600660209081526040808320338452909152902060808201519192509080612cd957503360009081526007602052604090205460ff165b612d6757604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f4d6173746572436865663a205468652061646472657373206973206e6f74206160448201527f7661696c61626c6520746f206465706f73697420696e207468697320706f6f6c6064820152608401610907565b6000612d73338661078a565b825490915015612d8857612d8833868361347f565b8315612f6e57600060058681548110612da357612da3614e77565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3e9190614f72565b9050612e8333308760058a81548110612e5957612e59614e77565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16929190613fe4565b612f358160058881548110612e9a57612e9a614e77565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe09190614f72565b8354909550612f449086613584565b8355612f67612f5c64e8d4a51000610b988886613559565b606086015190613584565b6060850152505b612fa2670de0b6b3a7640000610b988560000151610b9e64e8d4a51000610b9887896000015461355990919063ffffffff16565b82600101819055508260048681548110612fbe57612fbe614e77565b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559051858152869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101611474565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b60006004838154811061312757613127614e77565b9060005260206000209060050201600101549050438111801561314a5750438210155b6131b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43616e2774206d6f6469667920686973746f72790000000000000000000000006044820152606401610907565b81600484815481106131c4576131c4614e77565b906000526020600020906005020160010181905550505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b80156132a2576132a2611a0e565b60006132b9600d544361357890919063ffffffff16565b905060006132cf6132c8613409565b8390613559565b6002549091506132f59073ffffffffffffffffffffffffffffffffffffffff1682614042565b505043600d5550565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146133b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610907565b806000036133ca576133c74360c8614f8b565b90505b60005b8251811015610d19576133f98382815181106133eb576133eb614e77565b60200260200101518361305c565b61340281614f3a565b90506133cd565b6000611a0964e8d4a51000610b98600a5468022b1c8c1227a0000061355990919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604081205460ff166107da565b600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684528252808320815160608101835281548082526001830154948201949094526002909101549181019190915291906134eb9064e8d4a5100090610b989086613559565b90506000613529670de0b6b3a7640000610b986004888154811061351157613511614e77565b60009182526020909120600590910201548590613559565b9050600061354484602001518361357890919063ffffffff16565b90506135508782614042565b50505050505050565b60006135658284614f9e565b9392505050565b60006135658284614fb5565b60006135658284614ff0565b60006135658284614f8b565b6119a6813361410d565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16156114a85773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555161365f908290615027565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907fe4e3c0e67592981f9042a3df81ea0ee0dfb06be469efdbd2bfc674ab37ab62fe90600090a35050565b6136b3613942565b806136e357506136e37fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336141b6565b6111e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610907565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b6137ce613942565b15806137ff57506137ff7fda6fac9f81a22bb02ed26455dcee2a5f2434c8a3377a2cc986478052c1594f9e336141b6565b6111e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610907565b6119a6816142a9565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d199084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614327565b60007fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea75b5460ff16919050565b6000805b8251811015613a03576139e383828151811061399157613991614e77565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff1690565b156139f15750600192915050565b806139fb81614f3a565b915050613973565b50600092915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9d9190614f72565b1015613b05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f6e6520424550323020746f6b656e730000000000000000000000000000006044820152606401610907565b60005473ffffffffffffffffffffffffffffffffffffffff90811690851603613bb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4b5357415020746f6b656e2063616e277420626520616464656420746f20666160448201527f726d20706f6f6c730000000000000000000000000000000000000000000000006064820152608401610907565b8015613bbe57613bbe611a0e565b8215613bd957600854613bd19086613584565b600855613bea565b600954613be69086613584565b6009555b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790556040805160a0810190915290815260049060208101438511613c8557613c804360c8614f8b565b613c87565b845b8152602080820189905260006040808401829052881515606094850152855460018082018855968352918390208551600593840290910190815592850151838701558401516002830155918301516003820155608090920151600490920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091555473ffffffffffffffffffffffffffffffffffffffff861691613d369190613578565b6040805188815286151560208201527f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa910160405180910390a35050505050565b60007f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb3613966565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb35460ff808316911610613e04576040517fbfdd178500000000000000000000000000000000000000000000000000000000815260ff82166004820152602401610907565b7f0de7f2b0af5ab1aa4eca2b133cdee828bdcfefa98e4927fa304b2ad002ca6eb380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b7fb65939979d77055fe20d21bcb90b95461947bffa39f3588194f5015117626ea780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016137bc565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff166114a85773ffffffffffffffffffffffffffffffffffffffff821660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551613f98908290615027565b6040519081900381209073ffffffffffffffffffffffffffffffffffffffff8416907f71ffd5b2f7b305f2f756c161455e2951077ed1951f9ecbee6252949bc1e13c5a90600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526111a49085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016138c0565b80156114a857600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156140b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140db9190614f72565b9050818110156140e9578091505b600054610d199073ffffffffffffffffffffffffffffffffffffffff16848461386e565b61411782826141b6565b6114a85761413c8173ffffffffffffffffffffffffffffffffffffffff166014614433565b614147836020614433565b604051602001614158929190615043565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610907916004016150c4565b60007fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d260008481526020918252604080822073ffffffffffffffffffffffffffffffffffffffff86168352909252205460ff168061356557507fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2600061426a8560009081527fffaa26784aca465bf23123375047d80ccb2b41102e02e5c4ef5b5aa00624b2d2602052604090206001015490565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fdd021e813d5056b401d30ba505d211a2ca2652076f58ad407a75764b92ed7d9d602052604090205460ff16156119a6576143178173ffffffffffffffffffffffffffffffffffffffff166014614433565b6040516020016141589190615115565b6000614389826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166146769092919063ffffffff16565b805190915015610d1957808060200190518101906143a79190615181565b610d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610907565b60606000614442836002614f9e565b61444d906002614f8b565b67ffffffffffffffff81111561446557614465614a7c565b6040519080825280601f01601f19166020018201604052801561448f576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106144c6576144c6614e77565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061452957614529614e77565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000614565846002614f9e565b614570906001614f8b565b90505b600181111561460d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106145b1576145b1614e77565b1a60f81b8282815181106145c7576145c7614e77565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936146068161519e565b9050614573565b5083156107d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610907565b6060614685848460008561468d565b949350505050565b60608247101561471f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610907565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516147489190615027565b60006040518083038185875af1925050503d8060008114614785576040519150601f19603f3d011682016040523d82523d6000602084013e61478a565b606091505b509150915061479b878383876147a6565b979650505050505050565b6060831561483c5782516000036148355773ffffffffffffffffffffffffffffffffffffffff85163b614835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610907565b5081614685565b61468583838151156148515781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090791906150c4565b73ffffffffffffffffffffffffffffffffffffffff811681146119a657600080fd5b600080604083850312156148ba57600080fd5b82356148c581614885565b946020939093013593505050565b6000806000606084860312156148e857600080fd5b83356148f381614885565b95602085013595506040909401359392505050565b60006020828403121561491a57600080fd5b81356107d481614885565b60006020828403121561493757600080fd5b5035919050565b60008083601f84011261495057600080fd5b50813567ffffffffffffffff81111561496857600080fd5b6020830191508360208260051b850101111561498357600080fd5b9250929050565b600080600080604085870312156149a057600080fd5b843567ffffffffffffffff808211156149b857600080fd5b6149c48883890161493e565b909650945060208701359150808211156149dd57600080fd5b506149ea8782880161493e565b95989497509550505050565b60008060408385031215614a0957600080fd5b50508035926020909101359150565b80151581146119a657600080fd5b600060208284031215614a3857600080fd5b81356107d481614a18565b600080600060608486031215614a5857600080fd5b83359250602084013591506040840135614a7181614a18565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614af257614af2614a7c565b604052919050565b600067ffffffffffffffff821115614b1457614b14614a7c565b5060051b60200190565b60006020808385031215614b3157600080fd5b823567ffffffffffffffff811115614b4857600080fd5b8301601f81018513614b5957600080fd5b8035614b6c614b6782614afa565b614aab565b81815260059190911b82018301908381019087831115614b8b57600080fd5b928401925b8284101561479b578335614ba381614885565b82529284019290840190614b90565b600080600080600060a08688031215614bca57600080fd5b853594506020860135614bdc81614885565b93506040860135614bec81614a18565b9250606086013591506080860135614c0381614a18565b809150509295509295909350565b60008060408385031215614c2457600080fd5b823591506020830135614c3681614885565b809150509250929050565b600080600080600060808688031215614c5957600080fd5b8535614c6481614885565b94506020860135614c7481614885565b93506040860135614c8481614885565b9250606086013567ffffffffffffffff80821115614ca157600080fd5b818801915088601f830112614cb557600080fd5b813581811115614cc457600080fd5b8960208260071b8501011115614cd957600080fd5b9699959850939650602001949392505050565b60008060008060808587031215614d0257600080fd5b8435935060208501359250604085013591506060850135614d2281614a18565b939692955090935050565b60008060408385031215614d4057600080fd5b8235614d4b81614885565b91506020830135614c3681614a18565b600080600060408486031215614d7057600080fd5b8335614d7b81614885565b9250602084013567ffffffffffffffff80821115614d9857600080fd5b818601915086601f830112614dac57600080fd5b813581811115614dbb57600080fd5b876020828501011115614dcd57600080fd5b6020830194508093505050509250925092565b60008060408385031215614df357600080fd5b823567ffffffffffffffff811115614e0a57600080fd5b8301601f81018513614e1b57600080fd5b80356020614e2b614b6783614afa565b82815260059290921b83018101918181019088841115614e4a57600080fd5b938201935b83851015614e6857843582529382019390820190614e4f565b98969091013596505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614edb57600080fd5b83018035915067ffffffffffffffff821115614ef657600080fd5b60200191503681900382131561498357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f6b57614f6b614f0b565b5060010190565b600060208284031215614f8457600080fd5b5051919050565b808201808211156107da576107da614f0b565b80820281158282048414176107da576107da614f0b565b600082614feb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b818103818111156107da576107da614f0b565b60005b8381101561501e578181015183820152602001615006565b50506000910152565b60008251615039818460208701615003565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161507b816017850160208801615003565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516150b8816028840160208801615003565b01602801949350505050565b60208152600082518060208401526150e3816040850160208701615003565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f53696d706c65426c61636b6c6973743a206163636f756e74200000000000000081526000825161514d816019850160208701615003565b7f20697320626c61636b6c697374656400000000000000000000000000000000006019939091019283015250602801919050565b60006020828403121561519357600080fd5b81516107d481614a18565b6000816151ad576151ad614f0b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212206c2740d9e14526a7b56dc1b554f623af205a7d4ed730690438b6cfd3ec5d69f064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,bool,uint256,bool)": {
        "params": {
          "_allocPoint": "Number of allocation points for the new pool.",
          "_isRegular": "Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are",
          "_lpToken": "Address of the LP BEP-20 token.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation. only for KSWAP distributions within Kyoto Swap products."
        }
      },
      "blacklist(address,string)": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "blacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "burnKswap(bool)": {
        "params": {
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to deposit.",
          "_pid": "The id of the pool. See `poolInfo`."
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`."
        }
      },
      "getBoostMultiplier(address,uint256)": {
        "params": {
          "_pid": "The pool id.",
          "_user": "The user address."
        }
      },
      "isBlacklisted(address)": {
        "details": "Returns `true` if `account` is blacklisted."
      },
      "isBlacklisted(address[])": {
        "details": "Returns `true` if any address in `accounts` is on the blacklist."
      },
      "kswapPerBlock(bool)": {
        "params": {
          "_isRegular": "If the pool belongs to regular or special."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingKswap(uint256,address)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`.",
          "_user": "Address of the user."
        }
      },
      "set(uint256,uint256,bool)": {
        "params": {
          "_allocPoint": "New number of allocation points for the pool.",
          "_pid": "The id of the pool. See `poolInfo`.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "setPoolLastRewardBlock(uint256,uint256)": {
        "params": {
          "_pid": "The pool id to update.",
          "newLastRewardBlock": "The new value."
        }
      },
      "setPoolLastRewardBlock(uint256[],uint256)": {
        "params": {
          "_pids": "The list of pool ids to update.",
          "newLastRewardBlock": "The new value."
        }
      },
      "unblacklist(address,string)": {
        "details": "External function to remove `account` from the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-unblacklist}"
      },
      "unblacklist(address[],string[])": {
        "details": "External function to add `account` to the blacklist. WARNING: This function is abstract, to enforce it's implementation          in the final contract. This is important to make sure          the final contraqct's access control mechanism will be used! See {ISimpleBlacklist-blacklist}"
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - The contract must be paused."
      },
      "updateBoostContract(address)": {
        "params": {
          "_newBoostContract": "The new address for handling all the share boosts."
        }
      },
      "updateBoostMultiplier(address,uint256,uint256)": {
        "params": {
          "_newMultiplier": "New boost multiplier.",
          "_pid": "The pool id for the boost factor updates.",
          "_user": "The user address for boost factor updates."
        }
      },
      "updateBurnAdmin(address)": {
        "params": {
          "_newAdmin": "The new burn admin address."
        }
      },
      "updateKswapRate(uint256,uint256,uint256,bool)": {
        "params": {
          "_burnRate": "The % of KSWAP to burn each block.",
          "_regularFarmRate": "The % of KSWAP to regular pools each block.",
          "_specialFarmRate": "The % of KSWAP to special pools each block.",
          "_withUpdate": "Whether call \"massUpdatePools\" operation."
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "The id of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      },
      "updateWhiteList(address,bool)": {
        "params": {
          "_isValid": "The flag for valid or invalid.",
          "_user": "The address to be updated."
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to withdraw.",
          "_pid": "The id of the pool. See `poolInfo`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BOOST_PRECISION()": {
        "notice": "Basic boost factor, none boosted user's boost factor"
      },
      "KSWAP_RATE_TOTAL_PRECISION()": {
        "notice": "total kswap rate = toBurn + toRegular + toSpecial"
      },
      "MASTERCHEF_KSWAP_PER_BLOCK()": {
        "notice": "40 KSWAP per block in MC"
      },
      "MAX_BOOST_PRECISION()": {
        "notice": "Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION"
      },
      "add(uint256,address,bool,uint256,bool)": {
        "notice": "Add a new pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "boostContract()": {
        "notice": "The contract handles the share boosts."
      },
      "burnAdmin()": {
        "notice": "The only address can withdraw all the burn KSWAP."
      },
      "burnKswap(bool)": {
        "notice": "Send KSWAP pending for burn to `burnAdmin`."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to pool."
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about the rewards. EMERGENCY ONLY."
      },
      "getBoostMultiplier(address,uint256)": {
        "notice": "Get user boost multiplier for specific pool id."
      },
      "kswapPerBlock(bool)": {
        "notice": "Calculates and returns the `amount` of KSWAP per block."
      },
      "kswapPerBlockToBurn()": {
        "notice": "Calculates and returns the `amount` of KSWAP per block to burn."
      },
      "kswapRateToBurn()": {
        "notice": "The last block number of KSWAP burn action being executed."
      },
      "lpToken(uint256)": {
        "notice": "Address of the LP token for each MCV2 pool."
      },
      "massUpdatePools()": {
        "notice": "Update kswap reward for all the active pools. Be careful of gas spending!"
      },
      "pendingKswap(uint256,address)": {
        "notice": "View function for checking pending KSWAP rewards."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each MCV2 pool."
      },
      "poolLength()": {
        "notice": "Returns the number of MC pools."
      },
      "set(uint256,uint256,bool)": {
        "notice": "Update the given pool's KSWAP allocation point. Can only be called by the owner."
      },
      "setPoolLastRewardBlock(uint256,uint256)": {
        "notice": "Updates the lastRewardBlock for a pool.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`."
      },
      "setPoolLastRewardBlock(uint256[],uint256)": {
        "notice": "Updates the lastRewardBlock for a list of pools.         Both the new and old values must be future blocks!         If the new value is 0, it will be set to `block.number + 200`."
      },
      "setTreasuryAddress(address)": {
        "notice": "Update the treasury address."
      },
      "totalRegularAllocPoint()": {
        "notice": "Total regular allocation points. Must be the sum of all regular pools' allocation points."
      },
      "totalSpecialAllocPoint()": {
        "notice": "Total special allocation points. Must be the sum of all special pools' allocation points."
      },
      "updateBoostContract(address)": {
        "notice": "Update boost contract address and max boost factor."
      },
      "updateBoostMultiplier(address,uint256,uint256)": {
        "notice": "Update user boost factor."
      },
      "updateBurnAdmin(address)": {
        "notice": "Update burn admin address."
      },
      "updateKswapRate(uint256,uint256,uint256,bool)": {
        "notice": "Update the % of KSWAP distributions for burn, regular pools and special pools."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables for the given pool."
      },
      "updateWhiteList(address,bool)": {
        "notice": "Update whitelisted addresses for special pools."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each pool user."
      },
      "whiteList(address)": {
        "notice": "The whitelist of addresses allowed to deposit in special pools."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4312,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswap",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20Mintable)6052"
      },
      {
        "astId": 4314,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4317,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "burnAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4320,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "boostContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4325,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)6074_storage)dyn_storage"
      },
      {
        "astId": 4330,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "lpToken",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IERC20)77)dyn_storage"
      },
      {
        "astId": 4338,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6063_storage))"
      },
      {
        "astId": 4343,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "whiteList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4346,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "totalRegularAllocPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4349,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "totalSpecialAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4377,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswapRateToBurn",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4379,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswapRateToRegularFarm",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4381,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "kswapRateToSpecialFarm",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4383,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "lastBurnedBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)77)dyn_storage": {
        "base": "t_contract(IERC20)77",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)6074_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6074_storage",
        "encoding": "dynamic_array",
        "label": "struct IMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Mintable)6052": {
        "encoding": "inplace",
        "label": "contract IERC20Mintable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)6063_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6063_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6063_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6063_storage)"
      },
      "t_struct(PoolInfo)6074_storage": {
        "encoding": "inplace",
        "label": "struct IMasterChef.PoolInfo",
        "members": [
          {
            "astId": 6065,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "accKswapPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6067,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6069,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6071,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "totalBoostedShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6073,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "isRegular",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)6063_storage": {
        "encoding": "inplace",
        "label": "struct IMasterChef.UserInfo",
        "members": [
          {
            "astId": 6058,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6060,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6062,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "boostMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}