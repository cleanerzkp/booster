{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/access/AccessControlFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {LibAccessControl} from \"./LibAccessControl.sol\";\nimport {IAccessControlEnumerable} from \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\";\n\ncontract AccessControlFacet is IAccessControlEnumerable {\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return LibAccessControl.hasRole(role, account);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role)\n        external\n        view\n        virtual\n        override\n        returns (bytes32)\n    {\n        return LibAccessControl.getRoleAdmin(role);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external {\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\n\n        LibAccessControl.setRoleAdmin(role, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account)\n        external\n        virtual\n        override\n    {\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\n\n        LibAccessControl.grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account)\n        external\n        virtual\n        override\n    {\n        LibAccessControl.enforceRole(LibAccessControl.getRoleAdmin(role));\n\n        LibAccessControl.revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account)\n        external\n        virtual\n        override\n    {\n        // solhint-disable-next-line reason-string\n        require(\n            account == msg.sender,\n            \"AccessControl: can only renounce roles for self\"\n        );\n\n        LibAccessControl.revokeRole(role, account);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index)\n        external\n        view\n        returns (address)\n    {\n        return LibAccessControl.getRoleMember(role, index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256) {\n        return LibAccessControl.getRoleMemberCount(role);\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/access/LibAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Library version of the OpenZeppelin AccessControlEnumerable contract with Diamond storage.\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControl\n * See: https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControlEnumerable\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\n */\nlibrary LibAccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    struct Storage {\n        mapping(bytes32 => RoleData) roles;\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    bytes32 private constant STORAGE_SLOT =\n        keccak256(\"solarprotocol.contracts.access.LibAccessControl\");\n\n    /**\n     * @dev Returns the storage.\n     */\n    function _storage() private pure returns (Storage storage s) {\n        bytes32 slot = STORAGE_SLOT;\n        // solhint-disable no-inline-assembly\n        // slither-disable-next-line assembly\n        assembly {\n            s.slot := slot\n        }\n        // solhint-enable\n    }\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(\n        bytes32 indexed role,\n        bytes32 indexed previousAdminRole,\n        bytes32 indexed newAdminRole\n    );\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call.\n     */\n    event RoleGranted(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool)\n    {\n        return\n            _storage().roles[role].members[account] ||\n            _storage().roles[getRoleAdmin(role)].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\n     * @notice This function is identical to {checkRole} but is following the naming convention.\n     */\n    function enforceRole(bytes32 role) internal view {\n        checkRole(role, msg.sender);\n    }\n\n    /**\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function checkRole(bytes32 role) internal view {\n        checkRole(role, msg.sender);\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\n        return _storage().roles[role].adminRole;\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _storage().roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function grantRole(bytes32 role, address account) internal {\n        if (!hasRole(role, account)) {\n            _storage().roles[role].members[account] = true;\n            // slither-disable-next-line unused-return\n            _storage().roleMembers[role].add(account);\n            emit RoleGranted(role, account, msg.sender);\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function revokeRole(bytes32 role, address account) internal {\n        if (hasRole(role, account)) {\n            _storage().roles[role].members[account] = false;\n            // slither-disable-next-line unused-return\n            _storage().roleMembers[role].remove(account);\n            emit RoleRevoked(role, account, msg.sender);\n        }\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        return _storage().roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\n        return _storage().roleMembers[role].length();\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\n/**\n * @dev Library with a set of default roles to use across different other contracts.\n */\nlibrary LibRoles {\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant BLACKLIST_MANAGER_ROLE =\n        keccak256(\"BLACKLIST_MANAGER_ROLE\");\n    bytes32 public constant PAUSE_MANAGER_ROLE =\n        keccak256(\"PAUSE_MANAGER_ROLE\");\n    bytes32 public constant STABLE_PRICE_MANAGER_ROLE =\n        keccak256(\"STABLE_PRICE_MANAGER_ROLE\");\n    bytes32 public constant TESTER_ROLE = keccak256(\"TESTER_ROLE\");\n    bytes32 public constant TOKEN_TAXES_MANAGER =\n        keccak256(\"TOKEN_TAXES_MANAGER\");\n    bytes32 public constant TOKEN_REFLECTION_MANAGER =\n        keccak256(\"TOKEN_REFLECTION_MANAGER\");\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/blacklist/ISimpleBlacklist.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\n/*\n * @dev External interface of a simple blacklist.\n */\ninterface ISimpleBlacklist {\n    /*\n     * @dev Emitted when an address was added to the blacklist\n     * @param account The address of the account added to the blacklist\n     * @param reason The reason string\n     */\n    event Blacklisted(address indexed account, string indexed reason);\n\n    /*\n     * @dev Emitted when an address was removed from the blacklist\n     * @param account The address of the account removed from the blacklist\n     * @param reason The reason string\n     */\n    event UnBlacklisted(address indexed account, string indexed reason);\n\n    /*\n     * @dev Check if `account` is on the blacklist.\n     */\n    function isBlacklisted(address account) external view returns (bool);\n\n    /*\n     * @dev Check if any address in `accounts` is on the blacklist.\n     */\n    function isBlacklisted(address[] memory accounts)\n        external\n        view\n        returns (bool);\n\n    /*\n     * @dev Adds `account` to the blacklist with `reason`.\n     *\n     * The `reason` is optional and can be an empty string.\n     *\n     * Emits {Blacklisted} event, if `account` was added to the blacklist.\n     */\n    function blacklist(address account, string calldata reason) external;\n\n    /*\n     * @dev Adds `accounts` to the blacklist with `reasons`.\n     *\n     * The `reasons` is optional and can be an array of empty strings.\n     * Length of the `accounts`and `reasons` arrays must be equal.\n     *\n     * Emits {Blacklisted} events, for each account that was added to the blacklist\n     */\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\n        external;\n\n    /*\n     * @dev Removes `account` from the blacklist with `reason`.\n     *\n     * The `reason` is optional and can be an empty string.\n     *\n     * Emits {UnBlacklisted} event, if `account` was removed from the blacklist\n     */\n    function unblacklist(address account, string calldata reason) external;\n\n    /*\n     * @dev Removes multiple `accounts` from the blacklist with `reasons`.\n     *\n     * The `reasons` is optional and can be an array of empty strings.\n     * Length of the `accounts`and `reasons` arrays must be equal.\n     *\n     * Emits {UnBlacklisted} events, for each account that was removed from the blacklist\n     */\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\n        external;\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/blacklist/LibSimpleBlacklist.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {ISimpleBlacklist} from \"./ISimpleBlacklist.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary LibSimpleBlacklist {\n    struct Storage {\n        mapping(address => bool) accounts;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256(\"solarprotocol.contracts.blacklist.LibSimpleBlacklist\");\n\n    /**\n     * @dev Returns the storage.\n     */\n    function _storage() private pure returns (Storage storage s) {\n        bytes32 slot = STORAGE_SLOT;\n        // solhint-disable no-inline-assembly\n        // slither-disable-next-line assembly\n        assembly {\n            s.slot := slot\n        }\n        // solhint-enable\n    }\n\n    /*\n     * @dev Emitted when an address was added to the blacklist\n     * @param account The address of the account added to the blacklist\n     * @param reason The reason string\n     */\n    event Blacklisted(address indexed account, string indexed reason);\n\n    /*\n     * @dev Emitted when an address was removed from the blacklist\n     * @param account The address of the account removed from the blacklist\n     * @param reason The reason string\n     */\n    event UnBlacklisted(address indexed account, string indexed reason);\n\n    /**\n     * @dev Revert with a standard message if `msg.sender` is blacklisted.\n     */\n    function enforceNotBlacklisted() internal view {\n        checkBlacklisted(msg.sender);\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is blacklisted.\n     */\n    function enforceNotBlacklisted(address account) internal view {\n        checkBlacklisted(account);\n    }\n\n    /**\n     * @dev Returns `true` if `account` is blacklisted.\n     */\n    function isBlacklisted(address account) internal view returns (bool) {\n        return _storage().accounts[account];\n    }\n\n    /**\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\n     */\n    function isBlacklisted(address[] memory accounts)\n        internal\n        view\n        returns (bool)\n    {\n        for (uint256 index = 0; index < accounts.length; index++) {\n            if (isBlacklisted(accounts[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is blacklisted.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^SimpleBlacklist: account (0x[0-9a-f]{40}) is blacklisted$/\n     */\n    function checkBlacklisted(address account) internal view {\n        if (isBlacklisted(account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"SimpleBlacklist: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is blacklisted\"\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Adds `account` to the blacklist.\n     *\n     * Internal function without access restriction.\n     */\n    function blacklist(address account, string memory reason) internal {\n        if (!isBlacklisted(account)) {\n            _storage().accounts[account] = true;\n            emit Blacklisted(account, reason);\n        }\n    }\n\n    /**\n     * @dev Removes `account` from the blacklist.\n     *\n     * Internal function without access restriction.\n     */\n    function unblacklist(address account, string memory reason) internal {\n        if (isBlacklisted(account)) {\n            _storage().accounts[account] = false;\n            emit UnBlacklisted(account, reason);\n        }\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {LibSimpleBlacklist} from \"./LibSimpleBlacklist.sol\";\nimport {ISimpleBlacklist} from \"./ISimpleBlacklist.sol\";\nimport {LibAccessControl} from \"../access/LibAccessControl.sol\";\nimport {LibRoles} from \"../access/LibRoles.sol\";\n\n/**\n * @dev Contract module that exposes athe interface for a simple blacklist.\n */\ncontract SimpleBlacklistFacet is ISimpleBlacklist {\n    /**\n     * @dev External function to add `account` to the blacklist.\n     *\n     * WARNING: This function is abstract, to enforce it's implementation\n     *          in the final contract. This is important to make sure\n     *          the final contraqct's access control mechanism will be used!\n     *\n     * See {ISimpleBlacklist-blacklist}\n     *\n     */\n    function blacklist(address account, string calldata reason)\n        external\n        virtual\n        override\n    {\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\n\n        LibSimpleBlacklist.blacklist(account, reason);\n    }\n\n    /**\n     * @dev External function to add `account` to the blacklist.\n     *\n     * WARNING: This function is abstract, to enforce it's implementation\n     *          in the final contract. This is important to make sure\n     *          the final contraqct's access control mechanism will be used!\n     *\n     * See {ISimpleBlacklist-blacklist}\n     *\n     */\n    function blacklist(address[] calldata accounts, string[] calldata reasons)\n        external\n        virtual\n        override\n    {\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\n\n        if (reasons.length > 0) {\n            // solhint-disable-next-line reason-string\n            require(\n                accounts.length == reasons.length,\n                \"SimpleBlacklist: Not enough reasons\"\n            );\n\n            for (uint256 index = 0; index < accounts.length; index++) {\n                LibSimpleBlacklist.blacklist(accounts[index], reasons[index]);\n            }\n\n            return;\n        }\n\n        for (uint256 index = 0; index < accounts.length; index++) {\n            LibSimpleBlacklist.blacklist(accounts[index], \"\");\n        }\n    }\n\n    /**\n     * @dev External function to remove `account` from the blacklist.\n     *\n     * WARNING: This function is abstract, to enforce it's implementation\n     *          in the final contract. This is important to make sure\n     *          the final contraqct's access control mechanism will be used!\n     *\n     * See {ISimpleBlacklist-unblacklist}\n     *\n     */\n    function unblacklist(address account, string calldata reason)\n        external\n        virtual\n        override\n    {\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\n\n        LibSimpleBlacklist.unblacklist(account, reason);\n    }\n\n    /**\n     * @dev External function to add `account` to the blacklist.\n     *\n     * WARNING: This function is abstract, to enforce it's implementation\n     *          in the final contract. This is important to make sure\n     *          the final contraqct's access control mechanism will be used!\n     *\n     * See {ISimpleBlacklist-blacklist}\n     *\n     */\n    function unblacklist(address[] calldata accounts, string[] calldata reasons)\n        external\n        virtual\n        override\n    {\n        LibAccessControl.enforceRole(LibRoles.BLACKLIST_MANAGER_ROLE);\n\n        if (reasons.length > 0) {\n            // solhint-disable-next-line reason-string\n            require(\n                accounts.length == reasons.length,\n                \"SimpleBlacklist: Not enough reasons\"\n            );\n\n            for (uint256 index = 0; index < accounts.length; index++) {\n                LibSimpleBlacklist.unblacklist(accounts[index], reasons[index]);\n            }\n\n            return;\n        }\n\n        for (uint256 index = 0; index < accounts.length; index++) {\n            LibSimpleBlacklist.unblacklist(accounts[index], \"\");\n        }\n    }\n\n    /**\n     * @dev Returns `true` if `account` is blacklisted.\n     */\n    function isBlacklisted(address account)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return LibSimpleBlacklist.isBlacklisted(account);\n    }\n\n    /**\n     * @dev Returns `true` if any address in `accounts` is on the blacklist.\n     */\n    function isBlacklisted(address[] memory accounts)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return LibSimpleBlacklist.isBlacklisted(accounts);\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/pausable/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\n/**\n * @dev Simple interface for pausable contracts.\n */\ninterface IPausable {\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view returns (bool);\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/pausable/LibPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {LibAccessControl} from \"../access/LibAccessControl.sol\";\nimport {LibRoles} from \"../access/LibRoles.sol\";\n\n/**\n * @dev Library version of the OpenZeppelin Pausable contract with Diamond storage.\n * See: https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable\n * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\n */\nlibrary LibPausable {\n    struct Storage {\n        bool paused;\n    }\n\n    bytes32 private constant STORAGE_SLOT =\n        keccak256(\"solarprotocol.contracts.pausable.LibPausable\");\n\n    /**\n     * @dev Returns the storage.\n     */\n    function _storage() private pure returns (Storage storage s) {\n        bytes32 slot = STORAGE_SLOT;\n        // solhint-disable no-inline-assembly\n        // slither-disable-next-line assembly\n        assembly {\n            s.slot := slot\n        }\n        // solhint-enable\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev Reverts when paused.\n     */\n    function enforceNotPaused() internal view {\n        require(\n            !paused() ||\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\n            \"Pausable: paused\"\n        );\n    }\n\n    /**\n     * @dev Reverts when paused.\n     */\n    function enforceNotPaused(address address1, address address2)\n        internal\n        view\n    {\n        require(\n            !paused() ||\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender) ||\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address1) ||\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, address2),\n            \"Pausable: paused\"\n        );\n    }\n\n    /**\n     * @dev Reverts when not paused.\n     */\n    function enforcePaused() internal view {\n        require(\n            paused() ||\n                LibAccessControl.hasRole(LibRoles.TESTER_ROLE, msg.sender),\n            \"Pausable: not paused\"\n        );\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() internal view returns (bool) {\n        return _storage().paused;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function pause() internal {\n        _storage().paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function unpause() internal {\n        _storage().paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IPausable} from \"./IPausable.sol\";\nimport {LibPausable} from \"./LibPausable.sol\";\nimport {LibAccessControl} from \"../access/LibAccessControl.sol\";\nimport {LibRoles} from \"../access/LibRoles.sol\";\n\ncontract PausableFacet is IPausable {\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view returns (bool) {\n        return LibPausable.paused();\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function pause() external {\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\n        LibPausable.enforceNotPaused();\n\n        LibPausable.pause();\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function unpause() external {\n        LibAccessControl.enforceRole(LibRoles.PAUSE_MANAGER_ROLE);\n        LibPausable.enforcePaused();\n\n        LibPausable.unpause();\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/IReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\ninterface IReentrancyGuard {\n    error ReentrancyGuardReentrantCall();\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/LibReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nlibrary LibReentrancyGuard {\n    uint256 internal constant NOT_ENTERED = 1;\n    uint256 internal constant ENTERED = 2;\n\n    struct Storage {\n        uint256 status;\n    }\n\n    bytes32 private constant STORAGE_SLOT =\n        keccak256(\"solarlabs.modules.reentrancy-guard.LibReentrancyGuard\");\n\n    /**\n     * @dev Returns the storage.\n     */\n    function _storage() private pure returns (Storage storage s) {\n        bytes32 slot = STORAGE_SLOT;\n        // solhint-disable no-inline-assembly\n        // slither-disable-next-line assembly\n        assembly {\n            s.slot := slot\n        }\n        // solhint-enable\n    }\n\n    function isEntered() internal view returns (bool) {\n        return _storage().status == ENTERED;\n    }\n\n    function enter() internal {\n        _storage().status = ENTERED;\n    }\n\n    function exit() internal {\n        _storage().status = NOT_ENTERED;\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IReentrancyGuard} from \"./IReentrancyGuard.sol\";\nimport {LibReentrancyGuard} from \"./LibReentrancyGuard.sol\";\n\nabstract contract ReentrancyGuard is IReentrancyGuard {\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, isEntered will be false\n        if (LibReentrancyGuard.isEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        LibReentrancyGuard.enter();\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        LibReentrancyGuard.exit();\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/token/ERC20/errors/IERC20Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\ninterface IERC20Errors {\n    error ERC20TransferFromZeroAddress();\n    error ERC20TransferToZeroAddress();\n    error ERC20TransferAmountExceedsBalance(uint256 amount, uint256 balance);\n    error ERC20MintToZeroAddress();\n    error ERC20BurnFromZeroAddress();\n    error ERC20BurnAmountExceedsBalance(uint256 amount, uint256 balance);\n    error ERC20ApproveFromZeroAddress();\n    error ERC20ApproveToZeroAddress();\n    error ERC20InsufficientAllowance(uint256 amount, uint256 allowance);\n    error ERC20DecreasedAllowanceBelowZero(uint256 value, uint256 allowance);\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/token/ERC20/facets/ERC20Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {LibERC20} from \"../LibERC20.sol\";\nimport {IERC20Errors} from \"../errors/IERC20Errors.sol\";\nimport {LibSimpleBlacklist} from \"../../../blacklist/LibSimpleBlacklist.sol\";\nimport {LibPausable} from \"../../../pausable/LibPausable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract ERC20Facet is IERC20, IERC20Metadata, IERC20Errors {\n    /**\n     * @inheritdoc IERC20\n     */\n    function transfer(address to, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        LibPausable.enforceNotPaused(to, address(0));\n\n        LibSimpleBlacklist.enforceNotBlacklisted();\n        LibSimpleBlacklist.enforceNotBlacklisted(to);\n\n        LibERC20.transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        LibPausable.enforceNotPaused(from, to);\n\n        LibSimpleBlacklist.enforceNotBlacklisted();\n        LibSimpleBlacklist.enforceNotBlacklisted(from);\n        LibSimpleBlacklist.enforceNotBlacklisted(to);\n\n        LibERC20.spendAllowance(from, msg.sender, amount);\n        LibERC20.transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function balanceOf(address account)\n        external\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return LibERC20.balanceOf(account);\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return LibERC20.allowance(owner, spender);\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function approve(address spender, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        LibERC20.approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        LibERC20.approve(\n            msg.sender,\n            spender,\n            LibERC20.allowance(msg.sender, spender) + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = LibERC20.allowance(msg.sender, spender);\n        if (subtractedValue > currentAllowance) {\n            revert IERC20Errors.ERC20DecreasedAllowanceBelowZero(\n                subtractedValue,\n                currentAllowance\n            );\n        }\n\n        unchecked {\n            LibERC20.approve(\n                msg.sender,\n                spender,\n                currentAllowance - subtractedValue\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc IERC20\n     */\n    function totalSupply() external view virtual override returns (uint256) {\n        return LibERC20.totalSupply();\n    }\n\n    /**\n     * @inheritdoc IERC20Metadata\n     */\n    function name() external view virtual override returns (string memory) {\n        return LibERC20.getName();\n    }\n\n    /**\n     * @inheritdoc IERC20Metadata\n     */\n    function symbol() external view virtual override returns (string memory) {\n        return LibERC20.getSymbol();\n    }\n\n    /**\n     * @inheritdoc IERC20Metadata\n     */\n    function decimals() external view virtual override returns (uint8) {\n        return 18;\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/token/ERC20/LibERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IERC20Errors} from \"./errors/IERC20Errors.sol\";\n\nlibrary LibERC20 {\n    struct Storage {\n        uint256 totalSupply;\n        string name;\n        string symbol;\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n    }\n\n    bytes32 private constant STORAGE_SLOT =\n        keccak256(\"solarlabs.modules.ERC20.LibERC20\");\n\n    /**\n     * @dev Returns the storage.\n     */\n    function _storage() private pure returns (Storage storage s) {\n        bytes32 slot = STORAGE_SLOT;\n        // solhint-disable no-inline-assembly\n        // slither-disable-next-line assembly\n        assembly {\n            s.slot := slot\n        }\n        // solhint-enable\n    }\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        if (from == address(0)) {\n            revert IERC20Errors.ERC20TransferFromZeroAddress();\n        }\n        if (to == address(0)) revert IERC20Errors.ERC20TransferToZeroAddress();\n\n        Storage storage s = _storage();\n\n        uint256 fromBalance = _storage().balances[from];\n        if (amount > fromBalance) {\n            revert IERC20Errors.ERC20TransferAmountExceedsBalance(\n                amount,\n                fromBalance\n            );\n        }\n\n        unchecked {\n            s.balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            s.balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function mint(address account, uint256 amount) internal {\n        if (account == address(0)) revert IERC20Errors.ERC20MintToZeroAddress();\n\n        Storage storage s = _storage();\n\n        s.totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            s.balances[account] += amount;\n        }\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function burn(address account, uint256 amount) internal {\n        if (account == address(0))\n            revert IERC20Errors.ERC20BurnFromZeroAddress();\n\n        Storage storage s = _storage();\n\n        uint256 accountBalance = s.balances[account];\n        if (amount > accountBalance)\n            revert IERC20Errors.ERC20BurnAmountExceedsBalance(\n                amount,\n                accountBalance\n            );\n\n        unchecked {\n            s.balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            s.totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) internal view returns (uint256) {\n        return _storage().balances[account];\n    }\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        internal\n        view\n        returns (uint256)\n    {\n        return _storage().allowances[owner][spender];\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        if (owner == address(0))\n            revert IERC20Errors.ERC20ApproveFromZeroAddress();\n        if (spender == address(0))\n            revert IERC20Errors.ERC20ApproveToZeroAddress();\n\n        _storage().allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (amount > currentAllowance)\n                revert IERC20Errors.ERC20InsufficientAllowance(\n                    amount,\n                    currentAllowance\n                );\n\n            unchecked {\n                approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function getName() internal view returns (string memory) {\n        return _storage().name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function getSymbol() internal view returns (string memory) {\n        return _storage().symbol;\n    }\n\n    /**\n     * @dev Returns the total supply of the token.\n     */\n    function totalSupply() internal view returns (uint256) {\n        return _storage().totalSupply;\n    }\n\n    function setName(string memory name) internal {\n        _storage().name = name;\n    }\n\n    function setSymbol(string memory symbol) internal {\n        _storage().symbol = symbol;\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/utils/initializer/IInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\ninterface IInitializer {\n    error InitializerContractIsInitializing();\n    error InitializerContractIsNotInitializing();\n    error InitializerContractAlreadyInitialized();\n    error InitializerVersionAlreadyInitialized(uint8 version);\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IInitializer} from \"./IInitializer.sol\";\nimport {LibInitializer} from \"./LibInitializer.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract Initializer is IInitializer {\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !LibInitializer.isInitializing();\n\n        if (\n            (isTopLevelCall && !LibInitializer.isInitialized(1)) ||\n            (!Address.isContract(address(this)) &&\n                LibInitializer.getInitializedVersion() == 1)\n        ) {\n            LibInitializer.setInitialized(1);\n\n            if (isTopLevelCall) {\n                LibInitializer.setInitializing(true);\n            }\n            _;\n            if (isTopLevelCall) {\n                LibInitializer.setInitializing(false);\n                emit Initialized(1);\n            }\n        } else {\n            revert InitializerContractAlreadyInitialized();\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        if (\n            LibInitializer.isInitializing() ||\n            LibInitializer.isInitialized(version)\n        ) {\n            revert InitializerVersionAlreadyInitialized(version);\n        }\n\n        LibInitializer.setInitialized(1);\n        LibInitializer.setInitializing(true);\n        _;\n        LibInitializer.setInitializing(false);\n        emit Initialized(version);\n    }\n}\n"
    },
    "@solarprotocol/solidity-modules/contracts/modules/utils/initializer/LibInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IInitializer} from \"./IInitializer.sol\";\n\nlibrary LibInitializer {\n    struct Storage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint8 initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool initializing;\n    }\n\n    bytes32 private constant STORAGE_SLOT =\n        keccak256(\"solarprotocol.contracts.utils.initializer.LibInitializer\");\n\n    /**\n     * @dev Returns the storage.\n     */\n    function _storage() private pure returns (Storage storage s) {\n        bytes32 slot = STORAGE_SLOT;\n        // solhint-disable no-inline-assembly\n        // slither-disable-next-line assembly\n        assembly {\n            s.slot := slot\n        }\n        // solhint-enable\n    }\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    function enforceIsInitializing() internal view {\n        if (!isInitializing()) {\n            revert IInitializer.InitializerContractIsNotInitializing();\n        }\n    }\n\n    function isInitializing() internal view returns (bool) {\n        return _storage().initializing;\n    }\n\n    function setInitializing(bool value) internal {\n        _storage().initializing = value;\n    }\n\n    function isInitialized() internal view returns (bool) {\n        return isInitialized(1);\n    }\n\n    function isInitialized(uint8 version) internal view returns (bool) {\n        return _storage().initialized >= version;\n    }\n\n    function getInitializedVersion() internal view returns (uint8) {\n        return _storage().initialized;\n    }\n\n    function setInitialized(uint8 version) internal {\n        if (isInitialized(version)) {\n            revert IInitializer.InitializerVersionAlreadyInitialized(version);\n        }\n\n        _storage().initialized = version;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function disable() internal {\n        if (isInitializing()) {\n            revert IInitializer.InitializerContractIsInitializing();\n        }\n\n        if (!isInitialized(type(uint8).max)) {\n            setInitialized(type(uint8).max);\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IERC20Mintable is IERC20, IERC20Metadata {\n    function mint(address account, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMasterChef {\n    /**\n     * @notice Info of each MC user.\n     * `amount` LP token amount the user has provided.\n     * `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\n     *\n     * We do some fancy math here. Basically, any point in time, the amount of KSWAP\n     * entitled to a user but is pending to be distributed is:\n     *\n     *   pending reward = (user share * pool.accKswapPerShare) - user.rewardDebt\n     *\n     *   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n     *   1. The pool's `accKswapPerShare` (and `lastRewardBlock`) gets updated.\n     *   2. User receives the pending reward sent to his/her address.\n     *   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\n     *   4. User's `rewardDebt` gets updated.\n     */\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 boostMultiplier;\n    }\n\n    /**\n     * @notice Info of each MC pool.\n     * `allocPoint` The amount of allocation points assigned to the pool.\n     *     Also known as the amount of \"multipliers\". Combined with `totalXAllocPoint`, it defines the % of\n     *     KSWAP rewards each pool gets.\n     * `accKswapPerShare` Accumulated KSWAPs per share, times 1e12.\n     * `lastRewardBlock` Last block number that pool update action is executed.\n     * `isRegular` The flag to set pool is regular or special. See below:\n     *     In MasterChef farms are \"regular pools\". \"special pools\", which use a different sets of\n     *     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\n     *     the KSWAP rewards to all the Kyoto Swap products.\n     * `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\n     */\n    struct PoolInfo {\n        uint256 accKswapPerShare;\n        uint256 lastRewardBlock;\n        uint256 allocPoint;\n        uint256 totalBoostedShare;\n        bool isRegular;\n    }\n\n    struct AddNewPoolInfo {\n        IERC20 lpToken;\n        uint256 allocPoint;\n        uint256 startBlockNumber;\n        bool isRegular;\n    }\n\n    event AddPool(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IERC20 indexed lpToken,\n        bool isRegular\n    );\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\n    event UpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardBlock,\n        uint256 lpSupply,\n        uint256 accKswapPerShare\n    );\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    event UpdateCakeRate(\n        uint256 burnRate,\n        uint256 regularFarmRate,\n        uint256 specialFarmRate\n    );\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\n    event UpdateWhiteList(address indexed user, bool isValid);\n    event UpdateBoostContract(address indexed boostContract);\n    event UpdateBoostMultiplier(\n        address indexed user,\n        uint256 pid,\n        uint256 oldMultiplier,\n        uint256 newMultiplier\n    );\n    event SetTreasuryAddress(address indexed user, address treasury);\n\n    /**\n     * @notice Add a new pool. Can only be called by the owner.\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n     * @param _allocPoint Number of allocation points for the new pool.\n     * @param _lpToken Address of the LP BEP-20 token.\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are\n     * @param _withUpdate Whether call \"massUpdatePools\" operation.\n     * only for KSWAP distributions within Kyoto Swap products.\n     */\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _isRegular,\n        uint256 _startBlockNumber,\n        bool _withUpdate\n    ) external;\n\n    /**\n     * @notice Update the given pool's KSWAP allocation point. Can only be called by the owner.\n     *\n     * @param _pid The id of the pool. See `poolInfo`.\n     * @param _allocPoint New number of allocation points for the pool.\n     * @param _withUpdate Whether call \"massUpdatePools\" operation.\n     */\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\n\n    /**\n     * @notice View function for checking pending KSWAP rewards.\n     *\n     * @param _pid The id of the pool. See `poolInfo`.\n     * @param _user Address of the user.\n     */\n    function pendingKswap(\n        uint256 _pid,\n        address _user\n    ) external view returns (uint256);\n\n    /// @notice Update kswap reward for all the active pools. Be careful of gas spending!\n    function massUpdatePools() external;\n\n    /// @notice Calculates and returns the `amount` of KSWAP per block.\n    /// @param _isRegular If the pool belongs to regular or special.\n    function kswapPerBlock(\n        bool _isRegular\n    ) external view returns (uint256 amount);\n\n    /// @notice Calculates and returns the `amount` of KSWAP per block to burn.\n    function kswapPerBlockToBurn() external view returns (uint256 amount);\n\n    /// @notice Update reward variables for the given pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 _pid) external returns (PoolInfo memory pool);\n\n    /// @notice Deposit LP tokens to pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to deposit.\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    /// @notice Withdraw LP tokens from pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to withdraw.\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    function emergencyWithdraw(uint256 _pid) external;\n\n    /// @notice Get user boost multiplier for specific pool id.\n    /// @param _user The user address.\n    /// @param _pid The pool id.\n    function getBoostMultiplier(\n        address _user,\n        uint256 _pid\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/KswapToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IERC20Mintable} from \"./interfaces/IERC20Mintable.sol\";\nimport {Initializer} from \"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\";\nimport {ERC20Facet, LibERC20} from \"@solarprotocol/solidity-modules/contracts/modules/token/ERC20/facets/ERC20Facet.sol\";\nimport {AccessControlFacet, LibAccessControl} from \"@solarprotocol/solidity-modules/contracts/modules/access/AccessControlFacet.sol\";\nimport {LibRoles} from \"@solarprotocol/solidity-modules/contracts/modules/access/LibRoles.sol\";\nimport {PausableFacet, LibPausable} from \"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\";\nimport {SimpleBlacklistFacet} from \"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\";\n\ncontract KswapToken is\n    IERC20Mintable,\n    Initializer,\n    ERC20Facet,\n    AccessControlFacet,\n    PausableFacet,\n    SimpleBlacklistFacet\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"ERC20_MINTER_ROLE\");\n\n    function mint(address account, uint256 amount) external {\n        LibAccessControl.enforceRole(MINTER_ROLE);\n\n        LibERC20.mint(account, amount);\n    }\n\n    function initialize(\n        address owner,\n        address[] memory mints,\n        uint256[] memory mintAmounts\n    ) external initializer {\n        LibERC20.setName(\"KyotoSwap Token\");\n        LibERC20.setSymbol(\"KSWAP\");\n\n        LibAccessControl.setRoleAdmin(MINTER_ROLE, LibRoles.MANAGER_ROLE);\n        LibAccessControl.grantRole(LibRoles.DEFAULT_ADMIN_ROLE, owner);\n        LibAccessControl.grantRole(LibRoles.MANAGER_ROLE, owner);\n        LibAccessControl.grantRole(LibRoles.MANAGER_ROLE, msg.sender);\n\n        LibPausable.unpause();\n\n        for (uint256 index = 0; index < mints.length; ++index) {\n            LibERC20.mint(mints[index], mintAmounts[index]);\n        }\n    }\n}\n"
    },
    "contracts/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n////////////////////////////////////////////////solarde.fi//////////////////////////////////////////////\n//_____/\\\\\\\\\\\\\\\\\\\\\\_________/\\\\\\\\\\_______/\\\\\\_________________/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____        //\n// ___/\\\\\\/////////\\\\\\_____/\\\\\\///\\\\\\____\\/\\\\\\_______________/\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\///////\\\\\\___       //\n//  __\\//\\\\\\______\\///____/\\\\\\/__\\///\\\\\\__\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\_____\\/\\\\\\___      //\n//   ___\\////\\\\\\__________/\\\\\\______\\//\\\\\\_\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____     //\n//    ______\\////\\\\\\______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//////\\\\\\____    //\n//     _________\\////\\\\\\___\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___   //\n//      __/\\\\\\______\\//\\\\\\___\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__  //\n//       _\\///\\\\\\\\\\\\\\\\\\\\\\/______\\///\\\\\\\\\\/_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_ //\n//        ___\\///////////__________\\/////_______\\///////////////__\\///________\\///__\\///________\\///__//\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\npragma solidity ^0.8.9;\n\nimport {IMasterChef} from \"./interfaces/IMasterChef.sol\";\nimport {IERC20Mintable} from \"./interfaces/IERC20Mintable.sol\";\nimport {Initializer} from \"@solarprotocol/solidity-modules/contracts/modules/utils/initializer/Initializer.sol\";\nimport {ReentrancyGuard} from \"@solarprotocol/solidity-modules/contracts/modules/security/reentrancy-guard/ReentrancyGuard.sol\";\nimport {PausableFacet, LibPausable} from \"@solarprotocol/solidity-modules/contracts/modules/pausable/PausableFacet.sol\";\nimport {SimpleBlacklistFacet, LibSimpleBlacklist} from \"@solarprotocol/solidity-modules/contracts/modules/blacklist/SimpleBlacklistFacet.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MasterChef is\n    IMasterChef,\n    Initializer,\n    ReentrancyGuard,\n    PausableFacet,\n    SimpleBlacklistFacet\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n\n    IERC20Mintable public kswap;\n\n    // Dev address.\n    address public treasury;\n\n    /// @notice The only address can withdraw all the burn KSWAP.\n    address public burnAdmin;\n    /// @notice The contract handles the share boosts.\n    address public boostContract;\n\n    /// @notice Info of each MCV2 pool.\n    PoolInfo[] public poolInfo;\n    /// @notice Address of the LP token for each MCV2 pool.\n    IERC20[] public lpToken;\n\n    /// @notice Info of each pool user.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\n    mapping(address => bool) public whiteList;\n\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\n    uint256 public totalRegularAllocPoint;\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\n    uint256 public totalSpecialAllocPoint;\n    ///  @notice 40 KSWAP per block in MC\n    uint256 public constant MASTERCHEF_KSWAP_PER_BLOCK = 40 * 1e18;\n    uint256 public constant ACC_KSWAP_PRECISION = 1e18;\n\n    /// @notice Basic boost factor, none boosted user's boost factor\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\n    /// @notice total kswap rate = toBurn + toRegular + toSpecial\n    uint256 public constant KSWAP_RATE_TOTAL_PRECISION = 1e12;\n    /// @notice The last block number of KSWAP burn action being executed.\n    /// @notice KSWAP distribute % for burn\n    uint256 public kswapRateToBurn = 989202815829;\n    /// @notice KSWAP distribute % for regular farm pool\n    uint256 public kswapRateToRegularFarm = 10797184170;\n    /// @notice KSWAP distribute % for special pools\n    uint256 public kswapRateToSpecialFarm = 1;\n\n    uint256 public lastBurnedBlock;\n\n    /// @notice Returns the number of MC pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /**\n     * @notice Add a new pool. Can only be called by the owner.\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n     * @param _allocPoint Number of allocation points for the new pool.\n     * @param _lpToken Address of the LP BEP-20 token.\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are\n     * @param _withUpdate Whether call \"massUpdatePools\" operation.\n     * only for KSWAP distributions within Kyoto Swap products.\n     */\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _isRegular,\n        uint256 _startBlockNumber,\n        bool _withUpdate\n    ) external onlyOwner {\n        _add(_allocPoint, _lpToken, _isRegular, _startBlockNumber, _withUpdate);\n    }\n\n    /// @notice Update the given pool's KSWAP allocation point. Can only be called by the owner.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _allocPoint New number of allocation points for the pool.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) external onlyOwner {\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\n        updatePool(_pid);\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        if (poolInfo[_pid].isRegular) {\n            totalRegularAllocPoint = totalRegularAllocPoint\n                .sub(poolInfo[_pid].allocPoint)\n                .add(_allocPoint);\n        } else {\n            totalSpecialAllocPoint = totalSpecialAllocPoint\n                .sub(poolInfo[_pid].allocPoint)\n                .add(_allocPoint);\n        }\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit SetPool(_pid, _allocPoint);\n    }\n\n    /// @notice View function for checking pending KSWAP rewards.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _user Address of the user.\n    function pendingKswap(\n        uint256 _pid,\n        address _user\n    ) external view returns (uint256) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo memory user = userInfo[_pid][_user];\n        uint256 accKswapPerShare = pool.accKswapPerShare;\n        uint256 lpSupply = pool.totalBoostedShare;\n\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\n\n            uint256 kswapReward = multiplier\n                .mul(kswapPerBlock(pool.isRegular))\n                .mul(pool.allocPoint)\n                .div(\n                    (\n                        pool.isRegular\n                            ? totalRegularAllocPoint\n                            : totalSpecialAllocPoint\n                    )\n                );\n            accKswapPerShare = accKswapPerShare.add(\n                kswapReward.mul(ACC_KSWAP_PRECISION).div(lpSupply)\n            );\n        }\n\n        uint256 boostedAmount = user\n            .amount\n            .mul(getBoostMultiplier(_user, _pid))\n            .div(BOOST_PRECISION);\n        return\n            boostedAmount.mul(accKswapPerShare).div(ACC_KSWAP_PRECISION).sub(\n                user.rewardDebt\n            );\n    }\n\n    /// @notice Update kswap reward for all the active pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo memory pool = poolInfo[pid];\n            if (pool.allocPoint != 0) {\n                updatePool(pid);\n            }\n        }\n    }\n\n    /// @notice Calculates and returns the `amount` of KSWAP per block.\n    /// @param _isRegular If the pool belongs to regular or special.\n    function kswapPerBlock(\n        bool _isRegular\n    ) public view returns (uint256 amount) {\n        if (_isRegular) {\n            amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToRegularFarm).div(\n                KSWAP_RATE_TOTAL_PRECISION\n            );\n        } else {\n            amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToSpecialFarm).div(\n                KSWAP_RATE_TOTAL_PRECISION\n            );\n        }\n    }\n\n    /// @notice Calculates and returns the `amount` of KSWAP per block to burn.\n    function kswapPerBlockToBurn() public view returns (uint256 amount) {\n        amount = MASTERCHEF_KSWAP_PER_BLOCK.mul(kswapRateToBurn).div(\n            KSWAP_RATE_TOTAL_PRECISION\n        );\n    }\n\n    /// @notice Update reward variables for the given pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[_pid];\n        if (block.number > pool.lastRewardBlock) {\n            uint256 lpSupply = pool.totalBoostedShare;\n            uint256 totalAllocPoint = (\n                pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint\n            );\n\n            if (lpSupply > 0 && totalAllocPoint > 0) {\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\n                uint256 kswapReward = multiplier\n                    .mul(kswapPerBlock(pool.isRegular))\n                    .mul(pool.allocPoint)\n                    .div(totalAllocPoint);\n                pool.accKswapPerShare = pool.accKswapPerShare.add(\n                    (kswapReward.mul(ACC_KSWAP_PRECISION).div(lpSupply))\n                );\n                kswap.mint(treasury, kswapReward.div(10));\n                kswap.mint(address(this), kswapReward);\n            }\n            pool.lastRewardBlock = block.number;\n            poolInfo[_pid] = pool;\n            emit UpdatePool(\n                _pid,\n                pool.lastRewardBlock,\n                lpSupply,\n                pool.accKswapPerShare\n            );\n        }\n    }\n\n    /// @notice Deposit LP tokens to pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to deposit.\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\n        LibPausable.enforceNotPaused();\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\n\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        // solhint-disable-next-line reason-string\n        require(\n            pool.isRegular || whiteList[msg.sender],\n            \"MasterChef: The address is not available to deposit in this pool\"\n        );\n\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\n\n        if (user.amount > 0) {\n            settlePendingKswap(msg.sender, _pid, multiplier);\n        }\n\n        if (_amount > 0) {\n            uint256 before = lpToken[_pid].balanceOf(address(this));\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\n            user.amount = user.amount.add(_amount);\n\n            // Update total boosted share.\n            pool.totalBoostedShare = pool.totalBoostedShare.add(\n                _amount.mul(multiplier).div(BOOST_PRECISION)\n            );\n        }\n\n        user.rewardDebt = user\n            .amount\n            .mul(multiplier)\n            .div(BOOST_PRECISION)\n            .mul(pool.accKswapPerShare)\n            .div(ACC_KSWAP_PRECISION);\n        poolInfo[_pid] = pool;\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw LP tokens from pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to withdraw.\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\n        LibPausable.enforceNotPaused();\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\n\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount >= _amount, \"withdraw: Insufficient\");\n\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\n\n        settlePendingKswap(msg.sender, _pid, multiplier);\n\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\n        }\n\n        user.rewardDebt = user\n            .amount\n            .mul(multiplier)\n            .div(BOOST_PRECISION)\n            .mul(pool.accKswapPerShare)\n            .div(ACC_KSWAP_PRECISION);\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\n            _amount.mul(multiplier).div(BOOST_PRECISION)\n        );\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\n        LibPausable.enforceNotPaused();\n        LibSimpleBlacklist.enforceNotBlacklisted(msg.sender);\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        uint256 boostedAmount = amount\n            .mul(getBoostMultiplier(msg.sender, _pid))\n            .div(BOOST_PRECISION);\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount\n            ? pool.totalBoostedShare.sub(boostedAmount)\n            : 0;\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpToken[_pid].safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    /// @notice Send KSWAP pending for burn to `burnAdmin`.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function burnKswap(bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\n        uint256 pendingKswapToBurn = multiplier.mul(kswapPerBlockToBurn());\n\n        // SafeTransfer KSWAP\n        _safeTransfer(burnAdmin, pendingKswapToBurn);\n        lastBurnedBlock = block.number;\n    }\n\n    /// @notice Update the % of KSWAP distributions for burn, regular pools and special pools.\n    /// @param _burnRate The % of KSWAP to burn each block.\n    /// @param _regularFarmRate The % of KSWAP to regular pools each block.\n    /// @param _specialFarmRate The % of KSWAP to special pools each block.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function updateKswapRate(\n        uint256 _burnRate,\n        uint256 _regularFarmRate,\n        uint256 _specialFarmRate,\n        bool _withUpdate\n    ) external onlyOwner {\n        // solhint-disable-next-line reason-string\n        require(\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\n            \"MasterChef: Kswap rate must be greater than 0\"\n        );\n        // solhint-disable-next-line reason-string\n        require(\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) ==\n                KSWAP_RATE_TOTAL_PRECISION,\n            \"MasterChef: Total rate must be 1e12\"\n        );\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        // burn kswap base on old burn kswap rate\n        burnKswap(false);\n\n        kswapRateToBurn = _burnRate;\n        kswapRateToRegularFarm = _regularFarmRate;\n        kswapRateToSpecialFarm = _specialFarmRate;\n\n        emit UpdateCakeRate(_burnRate, _regularFarmRate, _specialFarmRate);\n    }\n\n    /// @notice Update burn admin address.\n    /// @param _newAdmin The new burn admin address.\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\n        // solhint-disable-next-line reason-string\n        require(\n            _newAdmin != address(0),\n            \"MasterChef: Burn admin address must be valid\"\n        );\n        // solhint-disable-next-line reason-string\n        require(\n            _newAdmin != burnAdmin,\n            \"MasterChef: Burn admin address is the same with current address\"\n        );\n        address _oldAdmin = burnAdmin;\n        burnAdmin = _newAdmin;\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\n    }\n\n    /// @notice Update whitelisted addresses for special pools.\n    /// @param _user The address to be updated.\n    /// @param _isValid The flag for valid or invalid.\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\n        // solhint-disable-next-line reason-string\n        require(\n            _user != address(0),\n            \"MasterChef: The white list address must be valid\"\n        );\n\n        whiteList[_user] = _isValid;\n        emit UpdateWhiteList(_user, _isValid);\n    }\n\n    /// @notice Update boost contract address and max boost factor.\n    /// @param _newBoostContract The new address for handling all the share boosts.\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\n        // solhint-disable-next-line reason-string\n        require(\n            _newBoostContract != address(0) &&\n                _newBoostContract != boostContract,\n            \"MasterChef: New boost contract address must be valid\"\n        );\n\n        boostContract = _newBoostContract;\n        emit UpdateBoostContract(_newBoostContract);\n    }\n\n    /// @notice Update user boost factor.\n    /// @param _user The user address for boost factor updates.\n    /// @param _pid The pool id for the boost factor updates.\n    /// @param _newMultiplier New boost multiplier.\n    function updateBoostMultiplier(\n        address _user,\n        uint256 _pid,\n        uint256 _newMultiplier\n    ) external nonReentrant {\n        // solhint-disable-next-line reason-string\n        require(\n            boostContract == msg.sender,\n            \"Ownable: caller is not the boost contract\"\n        );\n        // solhint-disable-next-line reason-string\n        require(\n            _user != address(0),\n            \"MasterChef: The user address must be valid\"\n        );\n        // solhint-disable-next-line reason-string\n        require(\n            poolInfo[_pid].isRegular,\n            \"MasterChef: Only regular farm could be boosted\"\n        );\n        // solhint-disable-next-line reason-string\n        require(\n            _newMultiplier >= BOOST_PRECISION &&\n                _newMultiplier <= MAX_BOOST_PRECISION,\n            \"MasterChef: Invalid new boost multiplier\"\n        );\n\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\n        settlePendingKswap(_user, _pid, prevMultiplier);\n\n        user.rewardDebt = user\n            .amount\n            .mul(_newMultiplier)\n            .div(BOOST_PRECISION)\n            .mul(pool.accKswapPerShare)\n            .div(ACC_KSWAP_PRECISION);\n        pool.totalBoostedShare = pool\n            .totalBoostedShare\n            .sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION))\n            .add(user.amount.mul(_newMultiplier).div(BOOST_PRECISION));\n        poolInfo[_pid] = pool;\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\n\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\n    }\n\n    /// @notice Get user boost multiplier for specific pool id.\n    /// @param _user The user address.\n    /// @param _pid The pool id.\n    function getBoostMultiplier(\n        address _user,\n        uint256 _pid\n    ) public view returns (uint256) {\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\n    }\n\n    function setTreasuryAddress(address _treasury) external {\n        require(msg.sender == treasury, \"dev: wut?\");\n        treasury = _treasury;\n        emit SetTreasuryAddress(msg.sender, _treasury);\n    }\n\n    function setPoolLastRewardBlock(\n        uint256 _pid,\n        uint256 newLastRewardBlock\n    ) public onlyOwner {\n        uint256 oldLastRewardBlock = poolInfo[_pid].lastRewardBlock;\n        require(\n            oldLastRewardBlock > block.number &&\n                newLastRewardBlock >= block.number,\n            \"Can't modify history\"\n        );\n        poolInfo[_pid].lastRewardBlock = newLastRewardBlock;\n    }\n\n    function setPoolLastRewardBlock(\n        uint256[] memory _pids,\n        uint256 newLastRewardBlock\n    ) public onlyOwner {\n        if (newLastRewardBlock == 0) {\n            newLastRewardBlock = block.number + 200;\n        }\n\n        for (uint256 index = 0; index < _pids.length; ++index) {\n            setPoolLastRewardBlock(_pids[index], newLastRewardBlock);\n        }\n    }\n\n    function initialize(\n        IERC20Mintable kswap_,\n        address treasury_,\n        address burnAdmin_,\n        AddNewPoolInfo[] calldata newPools\n    ) external initializer {\n        kswap = kswap_;\n        treasury = treasury_;\n        burnAdmin = burnAdmin_;\n\n        uint256 index = 0;\n        uint256 newPoolsLength = newPools.length;\n\n        while (index < newPoolsLength) {\n            _add(\n                newPools[index].allocPoint,\n                newPools[index].lpToken,\n                newPools[index].isRegular,\n                newPools[index].startBlockNumber,\n                false\n            );\n\n            unchecked {\n                ++index;\n            }\n        }\n\n        LibPausable.unpause();\n    }\n\n    /// @notice Settles, distribute the pending KSWAP rewards for given user.\n    /// @param _user The user address for settling rewards.\n    /// @param _pid The pool id.\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\n    function settlePendingKswap(\n        address _user,\n        uint256 _pid,\n        uint256 _boostMultiplier\n    ) internal {\n        UserInfo memory user = userInfo[_pid][_user];\n\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(\n            BOOST_PRECISION\n        );\n        uint256 accKswap = boostedAmount\n            .mul(poolInfo[_pid].accKswapPerShare)\n            .div(ACC_KSWAP_PRECISION);\n        uint256 pending = accKswap.sub(user.rewardDebt);\n        // SafeTransfer KSWAP\n        _safeTransfer(_user, pending);\n    }\n\n    /**\n     * @notice Add a new pool. Can only be called by the owner.\n     * DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n     * @param _allocPoint Number of allocation points for the new pool.\n     * @param _lpToken Address of the LP BEP-20 token.\n     * @param _isRegular Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are\n     * @param _withUpdate Whether call \"massUpdatePools\" operation.\n     * only for KSWAP distributions within Kyoto Swap products.\n     */\n    function _add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _isRegular,\n        uint256 _startBlockNumber,\n        bool _withUpdate\n    ) internal {\n        require(_lpToken.balanceOf(address(this)) >= 0, \"None BEP20 tokens\");\n        // stake KSWAP token will cause staked token and reward token mixed up,\n        // may cause staked tokens withdraw as reward token,never do it.\n        // solhint-disable-next-line reason-string\n        require(_lpToken != kswap, \"KSWAP token can't be added to farm pools\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        if (_isRegular) {\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\n        } else {\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\n        }\n        lpToken.push(_lpToken);\n\n        poolInfo.push(\n            PoolInfo({\n                allocPoint: _allocPoint,\n                lastRewardBlock: _startBlockNumber > block.number\n                    ? _startBlockNumber\n                    : (block.number + 200),\n                accKswapPerShare: 0,\n                isRegular: _isRegular,\n                totalBoostedShare: 0\n            })\n        );\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\n    }\n\n    /// @notice Safe Transfer KSWAP.\n    /// @param _to The KSWAP receiver address.\n    /// @param _amount transfer KSWAP amounts.\n    function _safeTransfer(address _to, uint256 _amount) internal {\n        if (_amount > 0) {\n            uint256 balance = kswap.balanceOf(address(this));\n            if (balance < _amount) {\n                _amount = balance;\n            }\n            kswap.safeTransfer(_to, _amount);\n        }\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _getOwner(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _getOwner() internal view returns (address ownerAddress) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            ownerAddress := sload(\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\n            )\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}